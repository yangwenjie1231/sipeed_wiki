{
    "type": "top_module",
    "members": {
        "maix": {
            "type": "module",
            "doc": {
                "breif": "MaixPy C/C++ API from MaixCDK"
            },
            "members": {
                "err": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.err module"
                    },
                    "members": {
                        "Err": {
                            "type": "enum",
                            "name": "Err",
                            "doc": {
                                "brief": "Maix Error code",
                                "maixpy": "maix.err.Err",
                                "py_doc": "Maix Error code"
                            },
                            "values": [
                                [
                                    "ERR_NONE",
                                    "0",
                                    "No error"
                                ],
                                [
                                    "ERR_ARGS",
                                    "",
                                    "Invalid arguments"
                                ],
                                [
                                    "ERR_NO_MEM",
                                    "",
                                    "No memory"
                                ],
                                [
                                    "ERR_NOT_IMPL",
                                    "",
                                    "Not implemented"
                                ],
                                [
                                    "ERR_NOT_READY",
                                    "",
                                    "Not ready"
                                ],
                                [
                                    "ERR_NOT_INIT",
                                    "",
                                    "Not initialized"
                                ],
                                [
                                    "ERR_NOT_OPEN",
                                    "",
                                    "Not opened"
                                ],
                                [
                                    "ERR_NOT_PERMIT",
                                    "",
                                    "Not permitted"
                                ],
                                [
                                    "ERR_REOPEN",
                                    "",
                                    "Re-open"
                                ],
                                [
                                    "ERR_BUSY",
                                    "",
                                    "Busy"
                                ],
                                [
                                    "ERR_READ",
                                    "",
                                    "Read error"
                                ],
                                [
                                    "ERR_WRITE",
                                    "",
                                    "Write error"
                                ],
                                [
                                    "ERR_TIMEOUT",
                                    "",
                                    "Timeout"
                                ],
                                [
                                    "ERR_RUNTIME",
                                    "",
                                    "Runtime error"
                                ],
                                [
                                    "ERR_IO",
                                    "",
                                    "IO error"
                                ],
                                [
                                    "ERR_NOT_FOUND",
                                    "",
                                    "Not found"
                                ],
                                [
                                    "ERR_ALREAY_EXIST",
                                    "",
                                    "Already exist"
                                ],
                                [
                                    "ERR_BUFF_FULL",
                                    "",
                                    "Buffer full"
                                ],
                                [
                                    "ERR_BUFF_EMPTY",
                                    "",
                                    "Buffer empty"
                                ],
                                [
                                    "ERR_CANCEL",
                                    "",
                                    "Cancel"
                                ],
                                [
                                    "ERR_OVERFLOW",
                                    "",
                                    "Overflow"
                                ],
                                [
                                    "ERR_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum Err\n    {\n        // !!! fixed error code, DO NOT change number already defined, only append new error code\n        ERR_NONE        = 0,   // No error\n        ERR_ARGS           ,   // Invalid arguments\n        ERR_NO_MEM         ,   // No memory\n        ERR_NOT_IMPL       ,   // Not implemented\n        ERR_NOT_READY      ,   // Not ready\n        ERR_NOT_INIT       ,   // Not initialized\n        ERR_NOT_OPEN       ,   // Not opened\n        ERR_NOT_PERMIT     ,   // Not permitted\n        ERR_REOPEN         ,   // Re-open\n        ERR_BUSY           ,   // Busy\n        ERR_READ           ,   // Read error\n        ERR_WRITE          ,   // Write error\n        ERR_TIMEOUT        ,   // Timeout\n        ERR_RUNTIME        ,   // Runtime error\n        ERR_IO             ,   // IO error\n        ERR_NOT_FOUND      ,   // Not found\n        ERR_ALREAY_EXIST   ,   // Already exist\n        ERR_BUFF_FULL      ,   // Buffer full\n        ERR_BUFF_EMPTY     ,   // Buffer empty\n        ERR_CANCEL         ,   // Cancel\n        ERR_OVERFLOW       ,   // Overflow\n        ERR_MAX,\n    }"
                        },
                        "Exception": {
                            "type": "class",
                            "name": "Exception",
                            "doc": {
                                "brief": "Maix Exception",
                                "maixpy": "maix.err.Exception",
                                "py_doc": "Maix Exception"
                            },
                            "members": {},
                            "def": "class Exception : public std::exception"
                        },
                        "to_str": {
                            "type": "func",
                            "name": "to_str",
                            "doc": {
                                "brief": "Error code to string",
                                "param": {
                                    "e": "direction [in], error code, err::Err type"
                                },
                                "return": "error string",
                                "maixpy": "maix.err.to_str",
                                "py_doc": "Error code to string\n\nArgs:\n  - e: direction [in], error code, err::Err type\n\n\nReturns: error string\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string to_str(err::Err e)",
                            "py_def": "def to_str(e: Err) -> str"
                        },
                        "get_error": {
                            "type": "func",
                            "name": "get_error",
                            "doc": {
                                "brief": "get last error string",
                                "return": "error string",
                                "maixpy": "maix.err.get_error",
                                "py_doc": "get last error string\n\nReturns: error string\n"
                            },
                            "args": [],
                            "ret_type": "std::string&",
                            "static": false,
                            "def": "std::string& get_error()",
                            "py_def": "def get_error() -> str"
                        },
                        "set_error": {
                            "type": "func",
                            "name": "set_error",
                            "doc": {
                                "brief": "set last error string",
                                "param": {
                                    "str": "direction [in], error string"
                                },
                                "maixpy": "maix.err.set_error",
                                "py_doc": "set last error string\n\nArgs:\n  - str: direction [in], error string\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "str",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_error(const std::string &str)",
                            "py_def": "def set_error(str: str) -> None"
                        },
                        "check_raise": {
                            "type": "func",
                            "name": "check_raise",
                            "doc": {
                                "brief": "Check error code, if not ERR_NONE, raise err.Exception",
                                "param": {
                                    "e": "direction [in], error code, err::Err type",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_raise",
                                "py_doc": "Check error code, if not ERR_NONE, raise err.Exception\n\nArgs:\n  - e: direction [in], error code, err::Err type\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "e",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_raise(err::Err e, const std::string &msg = \"\")",
                            "py_def": "def check_raise(e: Err, msg: str = '') -> None"
                        },
                        "check_bool_raise": {
                            "type": "func",
                            "name": "check_bool_raise",
                            "doc": {
                                "brief": "Check condition, if false, raise err.Exception",
                                "param": {
                                    "ok": "direction [in], condition, if true, do nothing, if false, raise err.Exception",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_bool_raise",
                                "py_doc": "Check condition, if false, raise err.Exception\n\nArgs:\n  - ok: direction [in], condition, if true, do nothing, if false, raise err.Exception\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "ok",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_bool_raise(bool ok, const std::string &msg = \"\")",
                            "py_def": "def check_bool_raise(ok: bool, msg: str = '') -> None"
                        },
                        "check_null_raise": {
                            "type": "func",
                            "name": "check_null_raise",
                            "doc": {
                                "brief": "Check NULL pointer, if NULL, raise exception",
                                "param": {
                                    "ptr": "direction [in], pointer",
                                    "msg": "direction [in], error message"
                                },
                                "maixpy": "maix.err.check_null_raise",
                                "py_doc": "Check NULL pointer, if NULL, raise exception\n\nArgs:\n  - ptr: direction [in], pointer\n  - msg: direction [in], error message\n"
                            },
                            "args": [
                                [
                                    "void *",
                                    "ptr",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "msg",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void check_null_raise(void *ptr, const std::string &msg = \"\")",
                            "py_def": "def check_null_raise(ptr: capsule, msg: str = '') -> None"
                        }
                    },
                    "auto_add": true
                },
                "tensor": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.tensor module"
                    },
                    "members": {
                        "DType": {
                            "type": "enum",
                            "name": "DType",
                            "doc": {
                                "brief": "Tensor data types",
                                "maixpy": "maix.tensor.DType",
                                "py_doc": "Tensor data types"
                            },
                            "values": [
                                [
                                    "UINT8",
                                    "0",
                                    ""
                                ],
                                [
                                    "INT8",
                                    "",
                                    ""
                                ],
                                [
                                    "UINT16",
                                    "",
                                    ""
                                ],
                                [
                                    "INT16",
                                    "",
                                    ""
                                ],
                                [
                                    "UINT32",
                                    "",
                                    ""
                                ],
                                [
                                    "INT32",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT16",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT32",
                                    "",
                                    ""
                                ],
                                [
                                    "FLOAT64",
                                    "",
                                    ""
                                ],
                                [
                                    "BOOL",
                                    "",
                                    ""
                                ],
                                [
                                    "DTYPE_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum DType\n        {\n            UINT8 = 0,\n            INT8,\n            UINT16,\n            INT16,\n            UINT32,\n            INT32,\n            FLOAT16,\n            FLOAT32,\n            FLOAT64,\n            BOOL,\n            // STRING,\n            // OBJECT,\n            DTYPE_MAX\n        }"
                        },
                        "dtype_size": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type size in bytes",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.tensor.dtype_size",
                                "py_doc": "Tensor data type size in bytes"
                            },
                            "value": "{\n            1, // UINT8\n            1, // INT8\n            2, // UINT16\n            2, // INT16\n            4, // UINT32\n            4, // INT32\n            2, // FLOAT16\n            4, // FLOAT32\n            8, // FLOAT64\n            1, // BOOL\n            // 1, // STRING\n            // 1, // OBJECT\n            0\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<int> dtype_size = {\n            1, // UINT8\n            1, // INT8\n            2, // UINT16\n            2, // INT16\n            4, // UINT32\n            4, // INT32\n            2, // FLOAT16\n            4, // FLOAT32\n            8, // FLOAT64\n            1, // BOOL\n            // 1, // STRING\n            // 1, // OBJECT\n            0\n        }"
                        },
                        "dtype_name": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type name",
                                "maixpy": "maix.tensor.dtype_name",
                                "py_doc": "Tensor data type name"
                            },
                            "value": "{\n            \"uint8\",\n            \"int8\",\n            \"uint16\",\n            \"int16\",\n            \"uint32\",\n            \"int32\",\n            \"float16\",\n            \"float32\",\n            \"float64\",\n            \"bool\",\n            // \"string\",\n            // \"object\",\n            \"invalid\"\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<std::string> dtype_name = {\n            \"uint8\",\n            \"int8\",\n            \"uint16\",\n            \"int16\",\n            \"uint32\",\n            \"int32\",\n            \"float16\",\n            \"float32\",\n            \"float64\",\n            \"bool\",\n            // \"string\",\n            // \"object\",\n            \"invalid\"\n        }"
                        },
                        "Tensor": {
                            "type": "class",
                            "name": "Tensor",
                            "doc": {
                                "brief": "Tensor class",
                                "maixpy": "maix.tensor.Tensor",
                                "py_doc": "Tensor class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Tensor",
                                    "doc": {
                                        "brief": "Tensor constructor",
                                        "param": {
                                            "shape": "tensor shape, a int list",
                                            "dtype": "tensor element data type, see DType of this module"
                                        },
                                        "maixpy": "maix.tensor.Tensor.__init__",
                                        "py_doc": "Tensor constructor\n\nArgs:\n  - shape: tensor shape, a int list\n  - dtype: tensor element data type, see DType of this module\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            null
                                        ],
                                        [
                                            "tensor::DType",
                                            "dtype",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Tensor(std::vector<int> shape, tensor::DType dtype)",
                                    "py_def": "def __init__(self, shape: list[int], dtype: DType) -> None"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.tensor.Tensor.to_str",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def to_str(self) -> str"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.tensor.Tensor.__str__",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "shape": {
                                    "type": "func",
                                    "name": "shape",
                                    "doc": {
                                        "brief": "get tensor shape",
                                        "return": "tensor shape, a int list",
                                        "maixpy": "maix.tensor.Tensor.shape",
                                        "py_doc": "get tensor shape\n\nReturns: tensor shape, a int list\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> shape()",
                                    "py_def": "def shape(self) -> list[int]"
                                },
                                "expand_dims": {
                                    "type": "func",
                                    "name": "expand_dims",
                                    "doc": {
                                        "brief": "expand tensor shape",
                                        "param": {
                                            "axis": "axis to expand"
                                        },
                                        "maixpy": "maix.tensor.Tensor.expand_dims",
                                        "py_doc": "expand tensor shape\n\nArgs:\n  - axis: axis to expand\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "axis",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void expand_dims(int axis)",
                                    "py_def": "def expand_dims(self, axis: int) -> None"
                                },
                                "reshape": {
                                    "type": "func",
                                    "name": "reshape",
                                    "doc": {
                                        "brief": "reshape tensor shape, if size not match, it will throw an err::Exception",
                                        "param": {
                                            "shape": "new shape"
                                        },
                                        "maixpy": "maix.tensor.Tensor.reshape",
                                        "py_doc": "reshape tensor shape, if size not match, it will throw an err::Exception\n\nArgs:\n  - shape: new shape\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void reshape(std::vector<int> shape)",
                                    "py_def": "def reshape(self, shape: list[int]) -> None"
                                },
                                "flatten": {
                                    "type": "func",
                                    "name": "flatten",
                                    "doc": {
                                        "brief": "Flatten tensor shape to 1D",
                                        "maixpy": "maix.tensor.Tensor.flatten",
                                        "py_doc": "Flatten tensor shape to 1D"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void flatten()",
                                    "py_def": "def flatten(self) -> None"
                                },
                                "dtype": {
                                    "type": "func",
                                    "name": "dtype",
                                    "doc": {
                                        "brief": "get tensor data type",
                                        "return": "tensor data type, see DType of this module",
                                        "maixpy": "maix.tensor.Tensor.dtype",
                                        "py_doc": "get tensor data type\n\nReturns: tensor data type, see DType of this module\n"
                                    },
                                    "args": [],
                                    "ret_type": "tensor::DType",
                                    "static": false,
                                    "def": "tensor::DType  dtype()",
                                    "py_def": "def dtype(self) -> DType"
                                },
                                "to_float_list": {
                                    "type": "func",
                                    "name": "to_float_list",
                                    "doc": {
                                        "brief": "get tensor data and return a list",
                                        "return": "list type data",
                                        "maixpy": "maix.tensor.Tensor.to_float_list",
                                        "py_doc": "get tensor data and return a list\n\nReturns: list type data\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::valarray<float>*",
                                    "static": false,
                                    "def": "std::valarray<float>* to_float_list()",
                                    "py_def": "def to_float_list(self) -> list[float]"
                                },
                                "argmax": {
                                    "type": "func",
                                    "name": "argmax",
                                    "doc": {
                                        "brief": "argmax of tensor",
                                        "param": {
                                            "axis": "By default, the index is into the flattened array, otherwise along the specified axis., wrong axis will throw an err::Exception"
                                        },
                                        "return": "argmax result, you need to delete it after use in C++.",
                                        "maixpy": "maix.tensor.Tensor.argmax",
                                        "py_doc": "argmax of tensor\n\nArgs:\n  - axis: By default, the index is into the flattened array, otherwise along the specified axis., wrong axis will throw an err::Exception\n\n\nReturns: argmax result, you need to delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "axis",
                                            "0xffff"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *argmax(int axis = 0xffff)",
                                    "py_def": "def argmax(self, axis: int = 65535) -> Tensor"
                                },
                                "argmax1": {
                                    "type": "func",
                                    "name": "argmax1",
                                    "doc": {
                                        "brief": "argmax1, flattened data max index",
                                        "return": "argmax result, int type",
                                        "maixpy": "maix.tensor.Tensor.argmax1",
                                        "py_doc": "argmax1, flattened data max index\n\nReturns: argmax result, int type\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int argmax1()",
                                    "py_def": "def argmax1(self) -> int"
                                }
                            },
                            "def": "class Tensor"
                        },
                        "Tensors": {
                            "type": "class",
                            "name": "Tensors",
                            "doc": {
                                "brief": "Tensors",
                                "maixpy": "maix.tensor.Tensors",
                                "py_doc": "Tensors"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Tensors",
                                    "doc": {
                                        "brief": "Constructor of Tensors",
                                        "maixpy": "maix.tensor.Tensors.__init__",
                                        "maixcdk": "maix.tensor.Tensors.Tensors",
                                        "py_doc": "Constructor of Tensors"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Tensors()",
                                    "py_def": "def __init__(self) -> None"
                                },
                                "add_tensor": {
                                    "type": "func",
                                    "name": "add_tensor",
                                    "doc": {
                                        "brief": "Add tensor",
                                        "maixpy": "maix.tensor.Tensors.add_tensor",
                                        "py_doc": "Add tensor"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ],
                                        [
                                            "tensor::Tensor *",
                                            "tensor",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "auto_delete",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_tensor(const std::string &key, tensor::Tensor *tensor, bool copy, bool auto_delete)",
                                    "py_def": "def add_tensor(self, key: str, tensor: Tensor, copy: bool, auto_delete: bool) -> None"
                                },
                                "rm_tensor": {
                                    "type": "func",
                                    "name": "rm_tensor",
                                    "doc": {
                                        "brief": "Remove tensor",
                                        "maixpy": "maix.tensor.Tensors.rm_tensor",
                                        "py_doc": "Remove tensor"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void rm_tensor(const std::string &key)",
                                    "py_def": "def rm_tensor(self, key: str) -> None"
                                },
                                "clear": {
                                    "type": "func",
                                    "name": "clear",
                                    "doc": {
                                        "brief": "Clear tensors",
                                        "maixpy": "maix.tensor.Tensors.clear",
                                        "py_doc": "Clear tensors"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void clear()",
                                    "py_def": "def clear(self) -> None"
                                },
                                "get_tensor": {
                                    "type": "func",
                                    "name": "get_tensor",
                                    "doc": {
                                        "brief": "Get tensor by key",
                                        "maixpy": "maix.tensor.Tensors.get_tensor",
                                        "maixcdk": "maix.tensor.Tensors.get_tensor",
                                        "py_doc": "Get tensor by key"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor&",
                                    "static": false,
                                    "def": "tensor::Tensor &get_tensor(const std::string &key)",
                                    "py_def": "def get_tensor(self, key: str) -> Tensor"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "operator[]",
                                    "doc": {
                                        "brief": "Operator []",
                                        "maixpy": "maix.tensor.Tensors.__getitem__",
                                        "maixcdk": "maix.tensor.Tensors.[]",
                                        "py_doc": "Operator []"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "key",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor&",
                                    "static": false,
                                    "def": "tensor::Tensor &operator[](const std::string &key)",
                                    "py_def": "def __getitem__(self, key: str) -> Tensor"
                                },
                                "__len__": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Size",
                                        "maixpy": "maix.tensor.Tensors.__len__",
                                        "maixcdk": "maix.tensor.Tensors.size",
                                        "py_doc": "Size"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t size()",
                                    "py_def": "def __len__(self) -> int"
                                },
                                "keys": {
                                    "type": "func",
                                    "name": "keys",
                                    "doc": {
                                        "brief": "Get names",
                                        "maixpy": "maix.tensor.Tensors.keys",
                                        "py_doc": "Get names"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> keys()",
                                    "py_def": "def keys(self) -> list[str]"
                                },
                                "tensors": {
                                    "type": "var",
                                    "name": "tensors",
                                    "doc": {
                                        "brief": "Tensors data, dict type",
                                        "maixpy": "maix.tensor.Tensors.tensors",
                                        "py_doc": "Tensors data, dict type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::map<std::string, tensor::Tensor*> tensors"
                                }
                            },
                            "def": "class Tensors"
                        },
                        "tensor_from_numpy_float32": {
                            "type": "func",
                            "name": "tensor_from_numpy_float32",
                            "doc": {
                                "brief": "float32 type numpy ndarray object to tensor.Tensor object.",
                                "param": {
                                    "array": "numpy array object.",
                                    "copy": "if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash."
                                },
                                "return": "tensor.Tensor object.",
                                "maixpy": "maix.tensor.tensor_from_numpy_float32",
                                "py_doc": "float32 type numpy ndarray object to tensor.Tensor object.\n\nArgs:\n  - array: numpy array object.\n  - copy: if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash.\n\n\nReturns: tensor.Tensor object.\n"
                            },
                            "args": [
                                [
                                    "py::array_t<float, py::array::c_style>",
                                    "array",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "tensor::Tensor*",
                            "static": false,
                            "def": "tensor::Tensor *tensor_from_numpy_float32(py::array_t<float, py::array::c_style> array, bool copy = true)",
                            "py_def": "def tensor_from_numpy_float32(array: numpy.ndarray[numpy.float32], copy: bool = True) -> Tensor"
                        },
                        "tensor_from_numpy_uint8": {
                            "type": "func",
                            "name": "tensor_from_numpy_uint8",
                            "doc": {
                                "brief": "uint8 type numpy ndarray object to tensor.Tensor object.",
                                "param": {
                                    "array": "numpy array object.",
                                    "copy": "if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash."
                                },
                                "return": "tensor.Tensor object.",
                                "maixpy": "maix.tensor.tensor_from_numpy_uint8",
                                "py_doc": "uint8 type numpy ndarray object to tensor.Tensor object.\n\nArgs:\n  - array: numpy array object.\n  - copy: if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash.\n\n\nReturns: tensor.Tensor object.\n"
                            },
                            "args": [
                                [
                                    "py::array_t<uint8_t, py::array::c_style>",
                                    "array",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "tensor::Tensor*",
                            "static": false,
                            "def": "tensor::Tensor *tensor_from_numpy_uint8(py::array_t<uint8_t, py::array::c_style> array, bool copy = true)",
                            "py_def": "def tensor_from_numpy_uint8(array: numpy.ndarray[numpy.uint8], copy: bool = True) -> Tensor"
                        },
                        "tensor_from_numpy_int8": {
                            "type": "func",
                            "name": "tensor_from_numpy_int8",
                            "doc": {
                                "brief": "int8 type numpy ndarray object to tensor.Tensor object.",
                                "param": {
                                    "array": "numpy array object.",
                                    "copy": "if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash."
                                },
                                "return": "tensor.Tensor object.",
                                "maixpy": "maix.tensor.tensor_from_numpy_int8",
                                "py_doc": "int8 type numpy ndarray object to tensor.Tensor object.\n\nArgs:\n  - array: numpy array object.\n  - copy: if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return tensor of this func, or will cause program crash.\n\n\nReturns: tensor.Tensor object.\n"
                            },
                            "args": [
                                [
                                    "py::array_t<int8_t, py::array::c_style>",
                                    "array",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "tensor::Tensor*",
                            "static": false,
                            "def": "tensor::Tensor *tensor_from_numpy_int8(py::array_t<int8_t, py::array::c_style> array, bool copy = true)",
                            "py_def": "def tensor_from_numpy_int8(array: numpy.ndarray[numpy.int8], copy: bool = True) -> Tensor"
                        },
                        "tensor_to_numpy_float32": {
                            "type": "func",
                            "name": "tensor_to_numpy_float32",
                            "doc": {
                                "brief": "tensor.Tensor object to float32 type numpy ndarray object.",
                                "param": {
                                    "t": "tensor.Tensor object.",
                                    "copy": "Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true."
                                },
                                "return": "numpy array object",
                                "maixpy": "maix.tensor.tensor_to_numpy_float32",
                                "py_doc": "tensor.Tensor object to float32 type numpy ndarray object.\n\nArgs:\n  - t: tensor.Tensor object.\n  - copy: Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true.\n\n\nReturns: numpy array object\n"
                            },
                            "args": [
                                [
                                    "tensor::Tensor *",
                                    "t",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "py::array_t<float, py::array::c_style>",
                            "static": false,
                            "def": "py::array_t<float, py::array::c_style> tensor_to_numpy_float32(tensor::Tensor *t, bool copy = true)",
                            "py_def": "def tensor_to_numpy_float32(t: Tensor, copy: bool = True) -> numpy.ndarray[numpy.float32]"
                        },
                        "tensor_to_numpy_uint8": {
                            "type": "func",
                            "name": "tensor_to_numpy_uint8",
                            "doc": {
                                "brief": "tensor.Tensor object to int8 type numpy ndarray object.",
                                "param": {
                                    "t": "tensor.Tensor object.",
                                    "copy": "Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true."
                                },
                                "return": "numpy array object",
                                "maixpy": "maix.tensor.tensor_to_numpy_uint8",
                                "py_doc": "tensor.Tensor object to int8 type numpy ndarray object.\n\nArgs:\n  - t: tensor.Tensor object.\n  - copy: Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true.\n\n\nReturns: numpy array object\n"
                            },
                            "args": [
                                [
                                    "tensor::Tensor *",
                                    "t",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "py::array_t<uint8_t, py::array::c_style>",
                            "static": false,
                            "def": "py::array_t<uint8_t, py::array::c_style> tensor_to_numpy_uint8(tensor::Tensor *t, bool copy = true)",
                            "py_def": "def tensor_to_numpy_uint8(t: Tensor, copy: bool = True) -> numpy.ndarray[numpy.uint8]"
                        },
                        "tensor_to_numpy_int8": {
                            "type": "func",
                            "name": "tensor_to_numpy_int8",
                            "doc": {
                                "brief": "tensor.Tensor object to int8 type numpy ndarray object.",
                                "param": {
                                    "t": "tensor.Tensor object.",
                                    "copy": "Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true."
                                },
                                "return": "numpy array object",
                                "maixpy": "maix.tensor.tensor_to_numpy_int8",
                                "py_doc": "tensor.Tensor object to int8 type numpy ndarray object.\n\nArgs:\n  - t: tensor.Tensor object.\n  - copy: Whether alloc new Tensor and copy data or not,\nif not copy, array object will directly use arg's data buffer, will faster but change array will affect arg's data, default true.\n\n\nReturns: numpy array object\n"
                            },
                            "args": [
                                [
                                    "tensor::Tensor *",
                                    "t",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "py::array_t<int8_t, py::array::c_style>",
                            "static": false,
                            "def": "py::array_t<int8_t, py::array::c_style> tensor_to_numpy_int8(tensor::Tensor *t, bool copy = true)",
                            "py_def": "def tensor_to_numpy_int8(t: Tensor, copy: bool = True) -> numpy.ndarray[numpy.int8]"
                        }
                    },
                    "auto_add": true
                },
                "image": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.image module, image related definition and functions",
                        "maixpy": "maix.image",
                        "py_doc": "maix.image module, image related definition and functions"
                    },
                    "members": {
                        "Format": {
                            "type": "enum",
                            "name": "Format",
                            "doc": {
                                "brief": "Image formats",
                                "attention": "for MaixPy firmware developers, update this enum will also need to update the fmt_size and fmt_names too !!!",
                                "maixpy": "maix.image.Format",
                                "py_doc": "Image formats"
                            },
                            "values": [
                                [
                                    "FMT_RGB888",
                                    "0",
                                    "RGBRGB...RGB, R at the lowest address"
                                ],
                                [
                                    "FMT_BGR888",
                                    "",
                                    "BGRBGR...BGR, B at the lowest address"
                                ],
                                [
                                    "FMT_RGBA8888",
                                    "",
                                    "RGBARGBA...RGBA, R at the lowest address"
                                ],
                                [
                                    "FMT_BGRA8888",
                                    "",
                                    "BGRABGRA...BGRA, B at the lowest address"
                                ],
                                [
                                    "FMT_RGB565",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_BGR565",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_YUV422SP",
                                    "",
                                    "YYY...UVUVUV...UVUV"
                                ],
                                [
                                    "FMT_YUV422P",
                                    "",
                                    "YYY...UUU...VVV"
                                ],
                                [
                                    "FMT_YVU420SP",
                                    "",
                                    "YYY...VUVUVU...VUVU, NV21"
                                ],
                                [
                                    "FMT_YUV420SP",
                                    "",
                                    "YYY...UVUVUV...UVUV, NV12"
                                ],
                                [
                                    "FMT_YVU420P",
                                    "",
                                    "YYY...VVV...UUU"
                                ],
                                [
                                    "FMT_YUV420P",
                                    "",
                                    "YYY...UUU...VVV"
                                ],
                                [
                                    "FMT_GRAYSCALE",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_BGGR6",
                                    "",
                                    "6-bit Bayer format with a BGGR pattern."
                                ],
                                [
                                    "FMT_GBRG6",
                                    "",
                                    "6-bit Bayer format with a GBRG pattern."
                                ],
                                [
                                    "FMT_GRBG6",
                                    "",
                                    "6-bit Bayer format with a GRBG pattern."
                                ],
                                [
                                    "FMT_RGGB6",
                                    "",
                                    "6-bit Bayer format with a RGGB pattern."
                                ],
                                [
                                    "FMT_BGGR8",
                                    "",
                                    "8-bit Bayer format with a BGGR pattern."
                                ],
                                [
                                    "FMT_GBRG8",
                                    "",
                                    "8-bit Bayer format with a GBRG pattern."
                                ],
                                [
                                    "FMT_GRBG8",
                                    "",
                                    "8-bit Bayer format with a GRBG pattern."
                                ],
                                [
                                    "FMT_RGGB8",
                                    "",
                                    "8-bit Bayer format with a RGGB pattern."
                                ],
                                [
                                    "FMT_BGGR10",
                                    "",
                                    "10-bit Bayer format with a BGGR pattern."
                                ],
                                [
                                    "FMT_GBRG10",
                                    "",
                                    "10-bit Bayer format with a GBRG pattern."
                                ],
                                [
                                    "FMT_GRBG10",
                                    "",
                                    "10-bit Bayer format with a GRBG pattern."
                                ],
                                [
                                    "FMT_RGGB10",
                                    "",
                                    "10-bit Bayer format with a RGGB pattern."
                                ],
                                [
                                    "FMT_BGGR12",
                                    "",
                                    "12-bit Bayer format with a BGGR pattern."
                                ],
                                [
                                    "FMT_GBRG12",
                                    "",
                                    "12-bit Bayer format with a GBRG pattern."
                                ],
                                [
                                    "FMT_GRBG12",
                                    "",
                                    "12-bit Bayer format with a GRBG pattern."
                                ],
                                [
                                    "FMT_RGGB12",
                                    "",
                                    "12-bit Bayer format with a RGGB pattern."
                                ],
                                [
                                    "FMT_UNCOMPRESSED_MAX",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_COMPRESSED_MIN",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_JPEG",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_PNG",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_COMPRESSED_MAX",
                                    "",
                                    ""
                                ],
                                [
                                    "FMT_INVALID",
                                    "0xFF",
                                    "format not valid"
                                ]
                            ],
                            "def": "enum Format\n    {\n        FMT_RGB888 = 0, // RGBRGB...RGB, R at the lowest address\n        FMT_BGR888,     // BGRBGR...BGR, B at the lowest address\n        FMT_RGBA8888,   // RGBARGBA...RGBA, R at the lowest address\n        FMT_BGRA8888,   // BGRABGRA...BGRA, B at the lowest address\n        FMT_RGB565,\n        FMT_BGR565,\n        FMT_YUV422SP, // YYY...UVUVUV...UVUV\n        FMT_YUV422P,  // YYY...UUU...VVV\n        FMT_YVU420SP, // YYY...VUVUVU...VUVU, NV21\n        FMT_YUV420SP, // YYY...UVUVUV...UVUV, NV12\n        FMT_YVU420P,  // YYY...VVV...UUU\n        FMT_YUV420P,  // YYY...UUU...VVV\n        FMT_GRAYSCALE,\n        FMT_BGGR6,      // 6-bit Bayer format with a BGGR pattern.\n        FMT_GBRG6,      // 6-bit Bayer format with a GBRG pattern.\n        FMT_GRBG6,      // 6-bit Bayer format with a GRBG pattern.\n        FMT_RGGB6,      // 6-bit Bayer format with a RGGB pattern.\n        FMT_BGGR8,      // 8-bit Bayer format with a BGGR pattern.\n        FMT_GBRG8,      // 8-bit Bayer format with a GBRG pattern.\n        FMT_GRBG8,      // 8-bit Bayer format with a GRBG pattern.\n        FMT_RGGB8,      // 8-bit Bayer format with a RGGB pattern.\n        FMT_BGGR10,     // 10-bit Bayer format with a BGGR pattern.\n        FMT_GBRG10,     // 10-bit Bayer format with a GBRG pattern.\n        FMT_GRBG10,     // 10-bit Bayer format with a GRBG pattern.\n        FMT_RGGB10,     // 10-bit Bayer format with a RGGB pattern.\n        FMT_BGGR12,     // 12-bit Bayer format with a BGGR pattern.\n        FMT_GBRG12,     // 12-bit Bayer format with a GBRG pattern.\n        FMT_GRBG12,     // 12-bit Bayer format with a GRBG pattern.\n        FMT_RGGB12,     // 12-bit Bayer format with a RGGB pattern.\n        FMT_UNCOMPRESSED_MAX,\n\n        // compressed format below, not compressed should define upper\n        FMT_COMPRESSED_MIN,\n        FMT_JPEG,\n        FMT_PNG,\n        FMT_COMPRESSED_MAX,\n\n        FMT_INVALID = 0xFF  // format not valid\n    }"
                        },
                        "fmt_size": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Image format size in bytes",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.image.fmt_size",
                                "py_doc": "Image format size in bytes"
                            },
                            "value": "{\n        3,\n        3,\n        4,\n        4,\n        2,\n        2,\n        2,\n        2,\n        1.5,\n        1.5,\n        1.5,\n        1.5,\n        1, // grayscale\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        0, // uncompereed_max\n        0, // compressed_min\n        1, // jpeg\n        1, // png\n        0, // compressed_max\n        0  // invalid\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<float> fmt_size = {\n        3,\n        3,\n        4,\n        4,\n        2,\n        2,\n        2,\n        2,\n        1.5,\n        1.5,\n        1.5,\n        1.5,\n        1, // grayscale\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        0.75,   // 6-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1,      // 8-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.25,   // 10-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        1.5,    // 12-bit Bayer format\n        0, // uncompereed_max\n        0, // compressed_min\n        1, // jpeg\n        1, // png\n        0, // compressed_max\n        0  // invalid\n        }"
                        },
                        "fmt_names": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Image format string",
                                "maixpy": "maix.image.fmt_names",
                                "py_doc": "Image format string"
                            },
                            "value": "{\n        \"RGB888\",\n        \"BGR888\",\n        \"RGBA8888\",\n        \"BGRA8888\",\n        \"RGB565\",\n        \"BGR565\",\n        \"YUV422SP\",\n        \"YUV422P\",\n        \"YVU420SP\",\n        \"YUV420SP\",\n        \"YVU420P\",\n        \"YUV420P\",\n        \"GRAYSCALE\",\n        \"BGGR6\",\n        \"GBRG6\",\n        \"GRBG6\",\n        \"RG6B6\",\n        \"BGGR8\",\n        \"GBRG8\",\n        \"GRBG8\",\n        \"RG6B8\",\n        \"BGGR10\",\n        \"GBRG10\",\n        \"GRBG10\",\n        \"RG6B10\",\n        \"BGGR12\",\n        \"GBRG12\",\n        \"GRBG12\",\n        \"RG6B12\",\n        \"UNCOMPRESSED_MAX\",\n        \"COMPRESSED_MIN\",\n        \"JPEG\",\n        \"PNG\",\n        \"COMPRESSED_MAX\",\n        \"INVALID\"\n        }",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<std::string> fmt_names = {\n        \"RGB888\",\n        \"BGR888\",\n        \"RGBA8888\",\n        \"BGRA8888\",\n        \"RGB565\",\n        \"BGR565\",\n        \"YUV422SP\",\n        \"YUV422P\",\n        \"YVU420SP\",\n        \"YUV420SP\",\n        \"YVU420P\",\n        \"YUV420P\",\n        \"GRAYSCALE\",\n        \"BGGR6\",\n        \"GBRG6\",\n        \"GRBG6\",\n        \"RG6B6\",\n        \"BGGR8\",\n        \"GBRG8\",\n        \"GRBG8\",\n        \"RG6B8\",\n        \"BGGR10\",\n        \"GBRG10\",\n        \"GRBG10\",\n        \"RG6B10\",\n        \"BGGR12\",\n        \"GBRG12\",\n        \"GRBG12\",\n        \"RG6B12\",\n        \"UNCOMPRESSED_MAX\",\n        \"COMPRESSED_MIN\",\n        \"JPEG\",\n        \"PNG\",\n        \"COMPRESSED_MAX\",\n        \"INVALID\"\n        }"
                        },
                        "Size": {
                            "type": "class",
                            "name": "Size",
                            "doc": {
                                "brief": "Image size type",
                                "maixpy": "maix.image.Size",
                                "py_doc": "Image size type"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Size",
                                    "doc": {
                                        "brief": "Construct a new Size object",
                                        "param": {
                                            "width": "image width",
                                            "height": "image height"
                                        },
                                        "maixpy": "maix.image.Size.__init__",
                                        "py_doc": "Construct a new Size object\n\nArgs:\n  - width: image width\n  - height: image height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Size(int width = 0, int height = 0)",
                                    "py_def": "def __init__(self, width: int = 0, height: int = 0) -> None"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "width of size",
                                        "param": {
                                            "width": "set new width, if not set, only return current width"
                                        },
                                        "maixpy": "maix.image.Size.width",
                                        "py_doc": "width of size\n\nArgs:\n  - width: set new width, if not set, only return current width\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width(int width = -1)",
                                    "py_def": "def width(self, width: int = -1) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "height of size",
                                        "param": {
                                            "height": "set new height, if not set, only return current height"
                                        },
                                        "maixpy": "maix.image.Size.height",
                                        "py_doc": "height of size\n\nArgs:\n  - height: set new height, if not set, only return current height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height(int height = -1)",
                                    "py_def": "def height(self, height: int = -1) -> int"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "operator[]",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "0 for width, 1 for height"
                                        },
                                        "return": "int& width or height",
                                        "maixpy": "maix.image.Size.__getitem__",
                                        "maixcdk": "maix.image.Size.[]",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: 0 for width, 1 for height\n\n\nReturns: int& width or height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &operator[](int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "to string",
                                        "maixpy": "maix.image.Size.__str__",
                                        "py_doc": "to string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()",
                                    "py_def": "def __str__(self) -> str"
                                }
                            },
                            "def": "class Size"
                        },
                        "Fit": {
                            "type": "enum",
                            "name": "Fit",
                            "doc": {
                                "brief": "Object fit method",
                                "maixpy": "maix.image.Fit",
                                "py_doc": "Object fit method"
                            },
                            "values": [
                                [
                                    "FIT_NONE",
                                    "-1",
                                    "no object fit, keep original"
                                ],
                                [
                                    "FIT_FILL",
                                    "0",
                                    "width to new width, height to new height, may be stretch"
                                ],
                                [
                                    "FIT_CONTAIN",
                                    "",
                                    "keep aspect ratio, fill blank area with black color"
                                ],
                                [
                                    "FIT_COVER",
                                    "",
                                    "keep aspect ratio, crop image to fit new size"
                                ],
                                [
                                    "FIT_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum Fit\n    {\n        FIT_NONE = -1, // no object fit, keep original\n        FIT_FILL = 0,  // width to new width, height to new height, may be stretch\n        FIT_CONTAIN,   // keep aspect ratio, fill blank area with black color\n        FIT_COVER,     // keep aspect ratio, crop image to fit new size\n        FIT_MAX\n    }"
                        },
                        "ResizeMethod": {
                            "type": "enum",
                            "name": "ResizeMethod",
                            "doc": {
                                "brief": "Resize method",
                                "maixpy": "maix.image.ResizeMethod",
                                "py_doc": "Resize method"
                            },
                            "values": [
                                [
                                    "NEAREST",
                                    "0",
                                    ""
                                ],
                                [
                                    "BILINEAR",
                                    "",
                                    ""
                                ],
                                [
                                    "BICUBIC",
                                    "",
                                    ""
                                ],
                                [
                                    "AREA",
                                    "",
                                    ""
                                ],
                                [
                                    "LANCZOS",
                                    "",
                                    ""
                                ],
                                [
                                    "HAMMING",
                                    "",
                                    ""
                                ],
                                [
                                    "RESIZE_METHOD_MAX",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum ResizeMethod\n    {\n        NEAREST = 0,\n        BILINEAR,\n        BICUBIC,\n        AREA,\n        LANCZOS,\n        HAMMING,\n        RESIZE_METHOD_MAX\n    }"
                        },
                        "ApriltagFamilies": {
                            "type": "enum",
                            "name": "ApriltagFamilies",
                            "doc": {
                                "brief": "Family of apriltag",
                                "maixpy": "maix.image.ApriltagFamilies",
                                "py_doc": "Family of apriltag"
                            },
                            "values": [
                                [
                                    "TAG16H5",
                                    "1",
                                    ""
                                ],
                                [
                                    "TAG25H7",
                                    "2",
                                    ""
                                ],
                                [
                                    "TAG25H9",
                                    "4",
                                    ""
                                ],
                                [
                                    "TAG36H10",
                                    "8",
                                    ""
                                ],
                                [
                                    "TAG36H11",
                                    "16",
                                    ""
                                ],
                                [
                                    "ARTOOLKIT",
                                    "32",
                                    ""
                                ]
                            ],
                            "def": "enum ApriltagFamilies\n    {\n        TAG16H5   = 1,\n        TAG25H7   = 2,\n        TAG25H9   = 4,\n        TAG36H10  = 8,\n        TAG36H11  = 16,\n        ARTOOLKIT = 32\n    }"
                        },
                        "TemplateMatch": {
                            "type": "enum",
                            "name": "TemplateMatch",
                            "doc": {
                                "brief": "Template match method",
                                "maixpy": "maix.image.TemplateMatch",
                                "py_doc": "Template match method"
                            },
                            "values": [
                                [
                                    "SEARCH_EX",
                                    "",
                                    "Exhaustive search"
                                ],
                                [
                                    "SEARCH_DS",
                                    "",
                                    "Diamond search"
                                ]
                            ],
                            "def": "enum TemplateMatch\n    {\n        SEARCH_EX,  // Exhaustive search\n        SEARCH_DS,  // Diamond search\n    }"
                        },
                        "CornerDetector": {
                            "type": "enum",
                            "name": "CornerDetector",
                            "doc": {
                                "brief": "CornerDetector class",
                                "maixpy": "maix.image.CornerDetector",
                                "py_doc": "CornerDetector class"
                            },
                            "values": [
                                [
                                    "CORNER_FAST",
                                    "",
                                    ""
                                ],
                                [
                                    "CORNER_AGAST",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum CornerDetector\n    {\n        CORNER_FAST,\n        CORNER_AGAST\n    }"
                        },
                        "EdgeDetector": {
                            "type": "enum",
                            "name": "EdgeDetector",
                            "doc": {
                                "brief": "EdgeDetector class",
                                "maixpy": "maix.image.EdgeDetector",
                                "py_doc": "EdgeDetector class"
                            },
                            "values": [
                                [
                                    "EDGE_CANNY",
                                    "",
                                    ""
                                ],
                                [
                                    "EDGE_SIMPLE",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum EdgeDetector\n    {\n        EDGE_CANNY,\n        EDGE_SIMPLE,\n    }"
                        },
                        "Line": {
                            "type": "class",
                            "name": "Line",
                            "doc": {
                                "brief": "Line class",
                                "maixpy": "maix.image.Line",
                                "py_doc": "Line class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Line",
                                    "doc": {
                                        "brief": "Line constructor",
                                        "param": {
                                            "x1": "coordinate x1 of the straight line",
                                            "y1": "coordinate y1 of the straight line",
                                            "x2": "coordinate x2 of the straight line",
                                            "y2": "coordinate y2 of the straight line",
                                            "magnitude": "magnitude of the straight line after Hough transformation",
                                            "theta": "angle of the straight line after Hough transformation",
                                            "rho": "p-value of the straight line after Hough transformation"
                                        },
                                        "maixpy": "maix.image.Line.__init__",
                                        "py_doc": "Line constructor\n\nArgs:\n  - x1: coordinate x1 of the straight line\n  - y1: coordinate y1 of the straight line\n  - x2: coordinate x2 of the straight line\n  - y2: coordinate y2 of the straight line\n  - magnitude: magnitude of the straight line after Hough transformation\n  - theta: angle of the straight line after Hough transformation\n  - rho: p-value of the straight line after Hough transformation\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "theta",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "rho",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Line(int x1, int y1, int x2, int y2, int magnitude = 0, int theta = 0, int rho = 0)",
                                    "py_def": "def __init__(self, x1: int, y1: int, x2: int, y2: int, magnitude: int = 0, theta: int = 0, rho: int = 0) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] get x1 of line\n[1] get y1 of line\n[2] get x2 of line\n[3] get y2 of line\n[4] get length of line\n[5] get magnitude of the straight line after Hough transformation\n[6] get angle of the straight line after Hough transformation (0-179 degrees)\n[7] get p-value of the straight line after Hough transformation"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.Line.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] get x1 of line\n[1] get y1 of line\n[2] get x2 of line\n[3] get y2 of line\n[4] get length of line\n[5] get magnitude of the straight line after Hough transformation\n[6] get angle of the straight line after Hough transformation (0-179 degrees)\n[7] get p-value of the straight line after Hough transformation\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "x1": {
                                    "type": "func",
                                    "name": "x1",
                                    "doc": {
                                        "brief": "get x1 of line",
                                        "return": "return x1 of the line, type is int",
                                        "maixpy": "maix.image.Line.x1",
                                        "py_doc": "get x1 of line\n\nReturns: return x1 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x1()",
                                    "py_def": "def x1(self) -> int"
                                },
                                "y1": {
                                    "type": "func",
                                    "name": "y1",
                                    "doc": {
                                        "brief": "get y1 of line",
                                        "return": "return y1 of the line, type is int",
                                        "maixpy": "maix.image.Line.y1",
                                        "py_doc": "get y1 of line\n\nReturns: return y1 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y1()",
                                    "py_def": "def y1(self) -> int"
                                },
                                "x2": {
                                    "type": "func",
                                    "name": "x2",
                                    "doc": {
                                        "brief": "get x2 of line",
                                        "return": "return x2 of the line, type is int",
                                        "maixpy": "maix.image.Line.x2",
                                        "py_doc": "get x2 of line\n\nReturns: return x2 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x2()",
                                    "py_def": "def x2(self) -> int"
                                },
                                "y2": {
                                    "type": "func",
                                    "name": "y2",
                                    "doc": {
                                        "brief": "get y2 of line",
                                        "return": "return y2 of the line, type is int",
                                        "maixpy": "maix.image.Line.y2",
                                        "py_doc": "get y2 of line\n\nReturns: return y2 of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y2()",
                                    "py_def": "def y2(self) -> int"
                                },
                                "length": {
                                    "type": "func",
                                    "name": "length",
                                    "doc": {
                                        "brief": "get length of line",
                                        "return": "return length of the line, type is int",
                                        "maixpy": "maix.image.Line.length",
                                        "py_doc": "get length of line\n\nReturns: return length of the line, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int length()",
                                    "py_def": "def length(self) -> int"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the straight line after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Line.magnitude",
                                        "py_doc": "get magnitude of the straight line after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()",
                                    "py_def": "def magnitude(self) -> int"
                                },
                                "theta": {
                                    "type": "func",
                                    "name": "theta",
                                    "doc": {
                                        "brief": "get angle of the straight line after Hough transformation (0-179 degrees)",
                                        "return": "return angle, type is int",
                                        "maixpy": "maix.image.Line.theta",
                                        "py_doc": "get angle of the straight line after Hough transformation (0-179 degrees)\n\nReturns: return angle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int theta()",
                                    "py_def": "def theta(self) -> int"
                                },
                                "rho": {
                                    "type": "func",
                                    "name": "rho",
                                    "doc": {
                                        "brief": "get p-value of the straight line after Hough transformation",
                                        "return": "return p-value, type is int",
                                        "maixpy": "maix.image.Line.rho",
                                        "py_doc": "get p-value of the straight line after Hough transformation\n\nReturns: return p-value, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rho()",
                                    "py_def": "def rho(self) -> int"
                                }
                            },
                            "def": "class Line"
                        },
                        "Rect": {
                            "type": "class",
                            "name": "Rect",
                            "doc": {
                                "brief": "Rect class",
                                "maixpy": "maix.image.Rect",
                                "py_doc": "Rect class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Rect",
                                    "doc": {
                                        "brief": "Rect constructor",
                                        "param": {
                                            "corners": "corners of rect",
                                            "x": "coordinate x of the straight line",
                                            "y": "coordinate y of the straight line",
                                            "w": "coordinate w of the straight line",
                                            "h": "coordinate h of the straight line",
                                            "magnitude": "magnitude of the straight line after Hough transformation"
                                        },
                                        "maixpy": "maix.image.Rect.__init__",
                                        "py_doc": "Rect constructor\n\nArgs:\n  - corners: corners of rect\n  - x: coordinate x of the straight line\n  - y: coordinate y of the straight line\n  - w: coordinate w of the straight line\n  - h: coordinate h of the straight line\n  - magnitude: magnitude of the straight line after Hough transformation\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Rect(std::vector<std::vector<int>> &corners, int x, int y, int w, int h, int magnitude = 0)",
                                    "py_def": "def __init__(self, corners: list[list[int]], x: int, y: int, w: int, h: int, magnitude: int = 0) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] get x of rect\n[1] get y of rect\n[2] get w of rect\n[3] get h of rect\n[4] get magnitude of the straight line after Hough transformation"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.Rect.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] get x of rect\n[1] get y of rect\n[2] get w of rect\n[3] get h of rect\n[4] get magnitude of the straight line after Hough transformation\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get corners of rect",
                                        "return": "return the coordinate of the rect.",
                                        "maixpy": "maix.image.Rect.corners",
                                        "py_doc": "get corners of rect\n\nReturns: return the coordinate of the rect.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of rect",
                                        "return": "return the rectangle of the rect. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.Rect.rect",
                                        "py_doc": "get rectangle of rect\n\nReturns: return the rectangle of the rect. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of rect",
                                        "return": "return x of the rect, type is int",
                                        "maixpy": "maix.image.Rect.x",
                                        "py_doc": "get x of rect\n\nReturns: return x of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of rect",
                                        "return": "return y of the rect, type is int",
                                        "maixpy": "maix.image.Rect.y",
                                        "py_doc": "get y of rect\n\nReturns: return y of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of rect",
                                        "return": "return w of the rect, type is int",
                                        "maixpy": "maix.image.Rect.w",
                                        "py_doc": "get w of rect\n\nReturns: return w of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of rect",
                                        "return": "return h of the rect, type is int",
                                        "maixpy": "maix.image.Rect.h",
                                        "py_doc": "get h of rect\n\nReturns: return h of the rect, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the straight line after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Rect.magnitude",
                                        "py_doc": "get magnitude of the straight line after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()",
                                    "py_def": "def magnitude(self) -> int"
                                }
                            },
                            "def": "class Rect"
                        },
                        "Circle": {
                            "type": "class",
                            "name": "Circle",
                            "doc": {
                                "brief": "circle class",
                                "maixpy": "maix.image.Circle",
                                "py_doc": "circle class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Circle",
                                    "doc": {
                                        "brief": "Circle constructor",
                                        "param": {
                                            "x": "coordinate x of the circle",
                                            "y": "coordinate y of the circle",
                                            "r": "coordinate r of the circle",
                                            "magnitude": "coordinate y2 of the straight line"
                                        },
                                        "maixpy": "maix.image.Circle.__init__",
                                        "py_doc": "Circle constructor\n\nArgs:\n  - x: coordinate x of the circle\n  - y: coordinate y of the circle\n  - r: coordinate r of the circle\n  - magnitude: coordinate y2 of the straight line\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "r",
                                            null
                                        ],
                                        [
                                            "int",
                                            "magnitude",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Circle(int x, int y, int r, int magnitude)",
                                    "py_def": "def __init__(self, x: int, y: int, r: int, magnitude: int) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] get x of circle\n[1] get y of circle\n[2] get r of circle\n[3] get magnitude of the circle after Hough transformation"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.Circle.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] get x of circle\n[1] get y of circle\n[2] get r of circle\n[3] get magnitude of the circle after Hough transformation\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of circle",
                                        "return": "return x of the circle, type is int",
                                        "maixpy": "maix.image.Circle.x",
                                        "py_doc": "get x of circle\n\nReturns: return x of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of circle",
                                        "return": "return y of the circle, type is int",
                                        "maixpy": "maix.image.Circle.y",
                                        "py_doc": "get y of circle\n\nReturns: return y of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "r": {
                                    "type": "func",
                                    "name": "r",
                                    "doc": {
                                        "brief": "get r of circle",
                                        "return": "return r of the circle, type is int",
                                        "maixpy": "maix.image.Circle.r",
                                        "py_doc": "get r of circle\n\nReturns: return r of the circle, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int r()",
                                    "py_def": "def r(self) -> int"
                                },
                                "magnitude": {
                                    "type": "func",
                                    "name": "magnitude",
                                    "doc": {
                                        "brief": "get magnitude of the circle after Hough transformation",
                                        "return": "return magnitude, type is int",
                                        "maixpy": "maix.image.Circle.magnitude",
                                        "py_doc": "get magnitude of the circle after Hough transformation\n\nReturns: return magnitude, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int magnitude()",
                                    "py_def": "def magnitude(self) -> int"
                                }
                            },
                            "def": "class Circle"
                        },
                        "Blob": {
                            "type": "class",
                            "name": "Blob",
                            "doc": {
                                "brief": "Blob class",
                                "maixpy": "maix.image.Blob",
                                "py_doc": "Blob class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Blob",
                                    "doc": {
                                        "brief": "Blob constructor",
                                        "param": {
                                            "rect": "blob rect, type is std::vector<int>",
                                            "corners": "blob corners, type is std::vector<std::vector<int>>",
                                            "mini_corners": "blob mini_corners, type is std::vector<std::vector<int>>",
                                            "cx": "blob center x, type is float",
                                            "cy": "blob center y, type is float",
                                            "pixels": "blob pixels, type is int",
                                            "rotation": "blob rotation, type is float",
                                            "code": "blob code, type is int",
                                            "count": "blob count, type is int",
                                            "perimeter": "blob perimeter, type is int",
                                            "roundness": "blob roundness, type is float",
                                            "x_hist_bins": "blob x_hist_bins, type is std::vector<int>",
                                            "y_hist_bins": "blob y_hist_bins, type is std::vector<int>"
                                        },
                                        "maixpy": "maix.image.Blob.__init__",
                                        "py_doc": "Blob constructor\n\nArgs:\n  - rect: blob rect, type is std::vector<int>\n  - corners: blob corners, type is std::vector<std::vector<int>>\n  - mini_corners: blob mini_corners, type is std::vector<std::vector<int>>\n  - cx: blob center x, type is float\n  - cy: blob center y, type is float\n  - pixels: blob pixels, type is int\n  - rotation: blob rotation, type is float\n  - code: blob code, type is int\n  - count: blob count, type is int\n  - perimeter: blob perimeter, type is int\n  - roundness: blob roundness, type is float\n  - x_hist_bins: blob x_hist_bins, type is std::vector<int>\n  - y_hist_bins: blob y_hist_bins, type is std::vector<int>\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "mini_corners",
                                            null
                                        ],
                                        [
                                            "float",
                                            "cx",
                                            null
                                        ],
                                        [
                                            "float",
                                            "cy",
                                            null
                                        ],
                                        [
                                            "int",
                                            "pixels",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "code",
                                            null
                                        ],
                                        [
                                            "int",
                                            "count",
                                            null
                                        ],
                                        [
                                            "int",
                                            "perimeter",
                                            null
                                        ],
                                        [
                                            "float",
                                            "roundness",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "x_hist_bins",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "y_hist_bins",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Blob(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::vector<std::vector<int>> &mini_corners,float cx, float cy, int pixels, float rotation, int code, int count, int perimeter, float roundness, std::vector<int> &x_hist_bins, std::vector<int> &y_hist_bins)",
                                    "py_def": "def __init__(self, rect: list[int], corners: list[list[int]], mini_corners: list[list[int]], cx: float, cy: float, pixels: int, rotation: float, code: int, count: int, perimeter: int, roundness: float, x_hist_bins: list[int], y_hist_bins: list[int]) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] Returns the blob\u2019s bounding box x coordinate\n[1] Returns the blob\u2019s bounding box y coordinate\n[2] Returns the blob\u2019s bounding box w coordinate\n[3] Returns the blob\u2019s bounding box h coordinate\n[4] Returns the number of pixels that are part of this blob\n[5] Returns the centroid x position of the blob\n[6] Returns the centroid y position of the blob"
                                        },
                                        "return": "int& width or height",
                                        "maixpy": "maix.image.Blob.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] Returns the blob\u2019s bounding box x coordinate\n[1] Returns the blob\u2019s bounding box y coordinate\n[2] Returns the blob\u2019s bounding box w coordinate\n[3] Returns the blob\u2019s bounding box h coordinate\n[4] Returns the number of pixels that are part of this blob\n[5] Returns the centroid x position of the blob\n[6] Returns the centroid y position of the blob\n\n\nReturns: int& width or height\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get blob corners",
                                        "return": "Returns a list of 4 (x,y) tuples of the 4 corners of the object.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change",
                                        "maixpy": "maix.image.Blob.corners",
                                        "py_doc": "get blob corners\n\nReturns: Returns a list of 4 (x,y) tuples of the 4 corners of the object.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "mini_corners": {
                                    "type": "func",
                                    "name": "mini_corners",
                                    "doc": {
                                        "brief": "get blob mini corners",
                                        "return": "Returns a list of 4 (x,y) tuples of the 4 corners than bound the min area rectangle of the blob.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change",
                                        "maixpy": "maix.image.Blob.mini_corners",
                                        "py_doc": "get blob mini corners\n\nReturns: Returns a list of 4 (x,y) tuples of the 4 corners than bound the min area rectangle of the blob.\n(x0, y0)___________(x1, y1)\n|           |\n|           |\n|           |\n|___________|\n(x3, y3)           (x2, y2)\nnote: the order of corners may change\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> mini_corners()",
                                    "py_def": "def mini_corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get blob rect",
                                        "return": "Returns the center coordinates and width and height of the rectangle. format is (x, y, w, h)\nw\n(x, y) ___________\n|           |\n|           |  h\n|           |\n|___________|",
                                        "maixpy": "maix.image.Blob.rect",
                                        "py_doc": "get blob rect\n\nReturns: Returns the center coordinates and width and height of the rectangle. format is (x, y, w, h)\nw\n(x, y) ___________\n|           |\n|           |  h\n|           |\n|___________|\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get blob x of the upper left coordinate",
                                        "return": "Returns the x coordinate of the upper left corner of the rectangle.",
                                        "maixpy": "maix.image.Blob.x",
                                        "py_doc": "get blob x of the upper left coordinate\n\nReturns: Returns the x coordinate of the upper left corner of the rectangle.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get blob y of the upper left coordinate",
                                        "return": "Returns the y coordinate of the upper left corner of the rectangle.",
                                        "maixpy": "maix.image.Blob.y",
                                        "py_doc": "get blob y of the upper left coordinate\n\nReturns: Returns the y coordinate of the upper left corner of the rectangle.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get blob width",
                                        "return": "Returns the blob\u2019s bounding box w coordinate",
                                        "maixpy": "maix.image.Blob.w",
                                        "py_doc": "get blob width\n\nReturns: Returns the blob\u2019s bounding box w coordinate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get blob height",
                                        "return": "Returns the blob\u2019s bounding box h coordinate",
                                        "maixpy": "maix.image.Blob.h",
                                        "py_doc": "get blob height\n\nReturns: Returns the blob\u2019s bounding box h coordinate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "pixels": {
                                    "type": "func",
                                    "name": "pixels",
                                    "doc": {
                                        "brief": "get blob pixels",
                                        "return": "Returns the number of pixels that are part of this blob.",
                                        "maixpy": "maix.image.Blob.pixels",
                                        "py_doc": "get blob pixels\n\nReturns: Returns the number of pixels that are part of this blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int pixels()",
                                    "py_def": "def pixels(self) -> int"
                                },
                                "cx": {
                                    "type": "func",
                                    "name": "cx",
                                    "doc": {
                                        "brief": "get blob center x",
                                        "return": "Returns the centroid x position of the blob",
                                        "maixpy": "maix.image.Blob.cx",
                                        "py_doc": "get blob center x\n\nReturns: Returns the centroid x position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cx()",
                                    "py_def": "def cx(self) -> int"
                                },
                                "cy": {
                                    "type": "func",
                                    "name": "cy",
                                    "doc": {
                                        "brief": "get blob center y",
                                        "return": "Returns the centroid y position of the blob",
                                        "maixpy": "maix.image.Blob.cy",
                                        "py_doc": "get blob center y\n\nReturns: Returns the centroid y position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cy()",
                                    "py_def": "def cy(self) -> int"
                                },
                                "cxf": {
                                    "type": "func",
                                    "name": "cxf",
                                    "doc": {
                                        "brief": "get blob center x",
                                        "return": "Returns the centroid x position of the blob",
                                        "maixpy": "maix.image.Blob.cxf",
                                        "py_doc": "get blob center x\n\nReturns: Returns the centroid x position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cxf()",
                                    "py_def": "def cxf(self) -> float"
                                },
                                "cyf": {
                                    "type": "func",
                                    "name": "cyf",
                                    "doc": {
                                        "brief": "get blob center y",
                                        "return": "Returns the centroid y position of the blob",
                                        "maixpy": "maix.image.Blob.cyf",
                                        "py_doc": "get blob center y\n\nReturns: Returns the centroid y position of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cyf()",
                                    "py_def": "def cyf(self) -> float"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get blob rotation",
                                        "return": "Returns the rotation of the blob in radians (float). If the blob is like a pencil or pen this value will be unique for 0-180 degrees.",
                                        "maixpy": "maix.image.Blob.rotation",
                                        "py_doc": "get blob rotation\n\nReturns: Returns the rotation of the blob in radians (float). If the blob is like a pencil or pen this value will be unique for 0-180 degrees.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()",
                                    "py_def": "def rotation(self) -> float"
                                },
                                "rotation_rad": {
                                    "type": "func",
                                    "name": "rotation_rad",
                                    "doc": {
                                        "brief": "get blob rotation_rad",
                                        "return": "Returns the rotation of the blob in radians",
                                        "maixpy": "maix.image.Blob.rotation_rad",
                                        "py_doc": "get blob rotation_rad\n\nReturns: Returns the rotation of the blob in radians\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation_rad()",
                                    "py_def": "def rotation_rad(self) -> float"
                                },
                                "rotation_deg": {
                                    "type": "func",
                                    "name": "rotation_deg",
                                    "doc": {
                                        "brief": "get blob rotation_deg",
                                        "return": "Returns the rotation of the blob in degrees.",
                                        "maixpy": "maix.image.Blob.rotation_deg",
                                        "py_doc": "get blob rotation_deg\n\nReturns: Returns the rotation of the blob in degrees.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rotation_deg()",
                                    "py_def": "def rotation_deg(self) -> int"
                                },
                                "code": {
                                    "type": "func",
                                    "name": "code",
                                    "doc": {
                                        "brief": "get blob code",
                                        "return": "Returns a 32-bit binary number with a bit set in it for each color threshold that\u2019s part of this blob",
                                        "maixpy": "maix.image.Blob.code",
                                        "py_doc": "get blob code\n\nReturns: Returns a 32-bit binary number with a bit set in it for each color threshold that\u2019s part of this blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int code()",
                                    "py_def": "def code(self) -> int"
                                },
                                "count": {
                                    "type": "func",
                                    "name": "count",
                                    "doc": {
                                        "brief": "get blob count",
                                        "return": "Returns the number of blobs merged into this blob.",
                                        "maixpy": "maix.image.Blob.count",
                                        "py_doc": "get blob count\n\nReturns: Returns the number of blobs merged into this blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int count()",
                                    "py_def": "def count(self) -> int"
                                },
                                "perimeter": {
                                    "type": "func",
                                    "name": "perimeter",
                                    "doc": {
                                        "brief": "get blob merge_cnt",
                                        "return": "Returns the number of pixels on this blob\u2019s perimeter.",
                                        "maixpy": "maix.image.Blob.perimeter",
                                        "py_doc": "get blob merge_cnt\n\nReturns: Returns the number of pixels on this blob\u2019s perimeter.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int perimeter()",
                                    "py_def": "def perimeter(self) -> int"
                                },
                                "roundness": {
                                    "type": "func",
                                    "name": "roundness",
                                    "doc": {
                                        "brief": "get blob roundness",
                                        "return": "Returns a value between 0 and 1 representing how round the object is",
                                        "maixpy": "maix.image.Blob.roundness",
                                        "py_doc": "get blob roundness\n\nReturns: Returns a value between 0 and 1 representing how round the object is\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float roundness()",
                                    "py_def": "def roundness(self) -> float"
                                },
                                "elongation": {
                                    "type": "func",
                                    "name": "elongation",
                                    "doc": {
                                        "brief": "get blob elongation",
                                        "returnReturns": "a value between 0 and 1 representing how long (not round) the object is",
                                        "maixpy": "maix.image.Blob.elongation",
                                        "py_doc": "get blob elongation"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float elongation()",
                                    "py_def": "def elongation(self) -> float"
                                },
                                "area": {
                                    "type": "func",
                                    "name": "area",
                                    "doc": {
                                        "brief": "get blob area",
                                        "return": "Returns the area of the bounding box around the blob",
                                        "maixpy": "maix.image.Blob.area",
                                        "py_doc": "get blob area\n\nReturns: Returns the area of the bounding box around the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int area()",
                                    "py_def": "def area(self) -> int"
                                },
                                "density": {
                                    "type": "func",
                                    "name": "density",
                                    "doc": {
                                        "brief": "get blob density",
                                        "return": "Returns the density ratio of the blob",
                                        "maixpy": "maix.image.Blob.density",
                                        "py_doc": "get blob density\n\nReturns: Returns the density ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float density()",
                                    "py_def": "def density(self) -> float"
                                },
                                "extent": {
                                    "type": "func",
                                    "name": "extent",
                                    "doc": {
                                        "brief": "Alias for blob.density()",
                                        "return": "Returns the density ratio of the blob",
                                        "maixpy": "maix.image.Blob.extent",
                                        "py_doc": "Alias for blob.density()\n\nReturns: Returns the density ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float extent()",
                                    "py_def": "def extent(self) -> float"
                                },
                                "compactness": {
                                    "type": "func",
                                    "name": "compactness",
                                    "doc": {
                                        "brief": "get blob compactness",
                                        "return": "Returns the compactness ratio of the blob",
                                        "maixpy": "maix.image.Blob.compactness",
                                        "py_doc": "get blob compactness\n\nReturns: Returns the compactness ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float compactness()",
                                    "py_def": "def compactness(self) -> float"
                                },
                                "solidity": {
                                    "type": "func",
                                    "name": "solidity",
                                    "doc": {
                                        "brief": "get blob solidity",
                                        "return": "Returns the solidity ratio of the blob",
                                        "maixpy": "maix.image.Blob.solidity",
                                        "py_doc": "get blob solidity\n\nReturns: Returns the solidity ratio of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float solidity()",
                                    "py_def": "def solidity(self) -> float"
                                },
                                "convexity": {
                                    "type": "func",
                                    "name": "convexity",
                                    "doc": {
                                        "brief": "get blob convexity",
                                        "return": "Returns a value between 0 and 1 representing how convex the object is",
                                        "maixpy": "maix.image.Blob.convexity",
                                        "py_doc": "get blob convexity\n\nReturns: Returns a value between 0 and 1 representing how convex the object is\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float convexity()",
                                    "py_def": "def convexity(self) -> float"
                                },
                                "x_hist_bins": {
                                    "type": "func",
                                    "name": "x_hist_bins",
                                    "doc": {
                                        "brief": "get blob x_hist_bins",
                                        "return": "Returns the x_hist_bins of the blob",
                                        "maixpy": "maix.image.Blob.x_hist_bins",
                                        "py_doc": "get blob x_hist_bins\n\nReturns: Returns the x_hist_bins of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> x_hist_bins()",
                                    "py_def": "def x_hist_bins(self) -> list[int]"
                                },
                                "y_hist_bins": {
                                    "type": "func",
                                    "name": "y_hist_bins",
                                    "doc": {
                                        "brief": "get blob y_hist_bins",
                                        "return": "Returns the y_hist_bins of the blob",
                                        "maixpy": "maix.image.Blob.y_hist_bins",
                                        "py_doc": "get blob y_hist_bins\n\nReturns: Returns the y_hist_bins of the blob\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> y_hist_bins()",
                                    "py_def": "def y_hist_bins(self) -> list[int]"
                                },
                                "major_axis_line": {
                                    "type": "func",
                                    "name": "major_axis_line",
                                    "doc": {
                                        "brief": "get blob major_axis_line",
                                        "return": "Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.",
                                        "maixpy": "maix.image.Blob.major_axis_line",
                                        "py_doc": "get blob major_axis_line\n\nReturns: Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> major_axis_line()",
                                    "py_def": "def major_axis_line(self) -> list[int]"
                                },
                                "minor_axis_line": {
                                    "type": "func",
                                    "name": "minor_axis_line",
                                    "doc": {
                                        "brief": "get blob minor_axis_line",
                                        "return": "Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.",
                                        "maixpy": "maix.image.Blob.minor_axis_line",
                                        "py_doc": "get blob minor_axis_line\n\nReturns: Returns a line tuple (x1, y1, x2, y2) of the minor axis of the blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> minor_axis_line()",
                                    "py_def": "def minor_axis_line(self) -> list[int]"
                                },
                                "enclosing_circle": {
                                    "type": "func",
                                    "name": "enclosing_circle",
                                    "doc": {
                                        "brief": "get blob enclosing_circle",
                                        "return": "Returns a circle tuple (x, y, r) of the circle that encloses the min area rectangle of a blob.",
                                        "maixpy": "maix.image.Blob.enclosing_circle",
                                        "py_doc": "get blob enclosing_circle\n\nReturns: Returns a circle tuple (x, y, r) of the circle that encloses the min area rectangle of a blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> enclosing_circle()",
                                    "py_def": "def enclosing_circle(self) -> list[int]"
                                },
                                "enclosed_ellipse": {
                                    "type": "func",
                                    "name": "enclosed_ellipse",
                                    "doc": {
                                        "brief": "get blob enclosed_ellipse",
                                        "return": "Returns an ellipse tuple (x, y, rx, ry, rotation) of the ellipse that fits inside of the min area rectangle of a blob.",
                                        "maixpy": "maix.image.Blob.enclosed_ellipse",
                                        "py_doc": "get blob enclosed_ellipse\n\nReturns: Returns an ellipse tuple (x, y, rx, ry, rotation) of the ellipse that fits inside of the min area rectangle of a blob.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> enclosed_ellipse()",
                                    "py_def": "def enclosed_ellipse(self) -> list[int]"
                                }
                            },
                            "def": "class Blob"
                        },
                        "QRCode": {
                            "type": "class",
                            "name": "QRCode",
                            "doc": {
                                "brief": "QRCode class",
                                "maixpy": "maix.image.QRCode",
                                "py_doc": "QRCode class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "QRCode",
                                    "doc": {
                                        "brief": "QRCode constructor",
                                        "param": {
                                            "rect": "rect of corners, type is std::vector<int>",
                                            "corners": "corners of QRCode",
                                            "payload": "payload of the QRCode",
                                            "version": "version of the QRCode",
                                            "ecc_level": "ecc_level of the QRCode",
                                            "mask": "mask of the QRCode",
                                            "data_type": "data_type of the QRCode",
                                            "eci": "eci of the QRCode"
                                        },
                                        "maixpy": "maix.image.QRCode.__init__",
                                        "py_doc": "QRCode constructor\n\nArgs:\n  - rect: rect of corners, type is std::vector<int>\n  - corners: corners of QRCode\n  - payload: payload of the QRCode\n  - version: version of the QRCode\n  - ecc_level: ecc_level of the QRCode\n  - mask: mask of the QRCode\n  - data_type: data_type of the QRCode\n  - eci: eci of the QRCode\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "int",
                                            "version",
                                            null
                                        ],
                                        [
                                            "int",
                                            "ecc_level",
                                            null
                                        ],
                                        [
                                            "int",
                                            "mask",
                                            null
                                        ],
                                        [
                                            "int",
                                            "data_type",
                                            null
                                        ],
                                        [
                                            "int",
                                            "eci",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "QRCode(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, int version, int ecc_level, int mask, int data_type, int eci)",
                                    "py_def": "def __init__(self, rect: list[int], corners: list[list[int]], payload: str, version: int, ecc_level: int, mask: int, data_type: int, eci: int) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] Returns the qrcode\u2019s bounding box x coordinate\n[1] Returns the qrcode\u2019s bounding box y coordinate\n[2] Returns the qrcode\u2019s bounding box w coordinate\n[3] Returns the qrcode\u2019s bounding box h coordinate\n[4] Not support this index, try to use payload() method\n[5] Returns the version of qrcode\n[6] Returns the error correction level of qrcode\n[7] Returns the mask of qrcode\n[8] Returns the datatype of qrcode\n[9] Returns the eci of qrcode"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.QRCode.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] Returns the qrcode\u2019s bounding box x coordinate\n[1] Returns the qrcode\u2019s bounding box y coordinate\n[2] Returns the qrcode\u2019s bounding box w coordinate\n[3] Returns the qrcode\u2019s bounding box h coordinate\n[4] Not support this index, try to use payload() method\n[5] Returns the version of qrcode\n[6] Returns the error correction level of qrcode\n[7] Returns the mask of qrcode\n[8] Returns the datatype of qrcode\n[9] Returns the eci of qrcode\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of QRCode",
                                        "return": "return the coordinate of the QRCode.",
                                        "maixpy": "maix.image.QRCode.corners",
                                        "py_doc": "get coordinate of QRCode\n\nReturns: return the coordinate of the QRCode.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of QRCode",
                                        "return": "return the rectangle of the QRCode. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.QRCode.rect",
                                        "py_doc": "get rectangle of QRCode\n\nReturns: return the rectangle of the QRCode. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of QRCode",
                                        "return": "return x of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.x",
                                        "py_doc": "get x of QRCode\n\nReturns: return x of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of QRCode",
                                        "return": "return y of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.y",
                                        "py_doc": "get y of QRCode\n\nReturns: return y of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of QRCode",
                                        "return": "return w of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.w",
                                        "py_doc": "get w of QRCode\n\nReturns: return w of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of QRCode",
                                        "return": "return h of the QRCode, type is int",
                                        "maixpy": "maix.image.QRCode.h",
                                        "py_doc": "get h of QRCode\n\nReturns: return h of the QRCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get QRCode payload",
                                        "return": "return area of the QRCode",
                                        "maixpy": "maix.image.QRCode.payload",
                                        "py_doc": "get QRCode payload\n\nReturns: return area of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()",
                                    "py_def": "def payload(self) -> str"
                                },
                                "version": {
                                    "type": "func",
                                    "name": "version",
                                    "doc": {
                                        "brief": "get QRCode version",
                                        "return": "return version of the QRCode",
                                        "maixpy": "maix.image.QRCode.version",
                                        "py_doc": "get QRCode version\n\nReturns: return version of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int version()",
                                    "py_def": "def version(self) -> int"
                                },
                                "ecc_level": {
                                    "type": "func",
                                    "name": "ecc_level",
                                    "doc": {
                                        "brief": "get QRCode error correction level",
                                        "return": "return error correction level of the QRCode",
                                        "maixpy": "maix.image.QRCode.ecc_level",
                                        "py_doc": "get QRCode error correction level\n\nReturns: return error correction level of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int ecc_level()",
                                    "py_def": "def ecc_level(self) -> int"
                                },
                                "mask": {
                                    "type": "func",
                                    "name": "mask",
                                    "doc": {
                                        "brief": "get QRCode mask",
                                        "return": "return mask of the QRCode",
                                        "maixpy": "maix.image.QRCode.mask",
                                        "py_doc": "get QRCode mask\n\nReturns: return mask of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int mask()",
                                    "py_def": "def mask(self) -> int"
                                },
                                "data_type": {
                                    "type": "func",
                                    "name": "data_type",
                                    "doc": {
                                        "brief": "get QRCode dataType",
                                        "return": "return mask of the QRCode",
                                        "maixpy": "maix.image.QRCode.data_type",
                                        "py_doc": "get QRCode dataType\n\nReturns: return mask of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int data_type()",
                                    "py_def": "def data_type(self) -> int"
                                },
                                "eci": {
                                    "type": "func",
                                    "name": "eci",
                                    "doc": {
                                        "brief": "get QRCode eci",
                                        "return": "return data of the QRCode",
                                        "maixpy": "maix.image.QRCode.eci",
                                        "py_doc": "get QRCode eci\n\nReturns: return data of the QRCode\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int eci()",
                                    "py_def": "def eci(self) -> int"
                                },
                                "is_numeric": {
                                    "type": "func",
                                    "name": "is_numeric",
                                    "doc": {
                                        "brief": "check QRCode is numeric",
                                        "return": "return true if the result type of the QRCode is numeric",
                                        "maixpy": "maix.image.QRCode.is_numeric",
                                        "py_doc": "check QRCode is numeric\n\nReturns: return true if the result type of the QRCode is numeric\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_numeric()",
                                    "py_def": "def is_numeric(self) -> bool"
                                },
                                "is_alphanumeric": {
                                    "type": "func",
                                    "name": "is_alphanumeric",
                                    "doc": {
                                        "brief": "check QRCode is alphanumeric",
                                        "return": "return true if the result type of the QRCode is alphanumeric",
                                        "maixpy": "maix.image.QRCode.is_alphanumeric",
                                        "py_doc": "check QRCode is alphanumeric\n\nReturns: return true if the result type of the QRCode is alphanumeric\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_alphanumeric()",
                                    "py_def": "def is_alphanumeric(self) -> bool"
                                },
                                "is_binary": {
                                    "type": "func",
                                    "name": "is_binary",
                                    "doc": {
                                        "brief": "check QRCode is binary",
                                        "return": "return true if the result type of the QRCode is binary",
                                        "maixpy": "maix.image.QRCode.is_binary",
                                        "py_doc": "check QRCode is binary\n\nReturns: return true if the result type of the QRCode is binary\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_binary()",
                                    "py_def": "def is_binary(self) -> bool"
                                },
                                "is_kanji": {
                                    "type": "func",
                                    "name": "is_kanji",
                                    "doc": {
                                        "brief": "check QRCode is kanji",
                                        "return": "return true if the result type of the QRCode is kanji",
                                        "maixpy": "maix.image.QRCode.is_kanji",
                                        "py_doc": "check QRCode is kanji\n\nReturns: return true if the result type of the QRCode is kanji\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_kanji()",
                                    "py_def": "def is_kanji(self) -> bool"
                                }
                            },
                            "def": "class QRCode"
                        },
                        "AprilTag": {
                            "type": "class",
                            "name": "AprilTag",
                            "doc": {
                                "brief": "AprilTag class",
                                "maixpy": "maix.image.AprilTag",
                                "py_doc": "AprilTag class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "AprilTag",
                                    "doc": {
                                        "brief": "AprilTag constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "id": "The id of the AprilTag",
                                            "famliy": "The family of the AprilTag",
                                            "centroid_x": "The x coordinate of the center of the AprilTag",
                                            "centroid_y": "The y coordinate of the center of the AprilTag",
                                            "rotation": "The rotation of the AprilTag",
                                            "decision_margin": "The decision_margin of the AprilTag",
                                            "hamming": "The hamming of the AprilTag",
                                            "goodness": "The goodness of the AprilTag",
                                            "x_translation": "The x_translation of the AprilTag",
                                            "y_translation": "The y_translation of the AprilTag",
                                            "z_translation": "The z_translation of the AprilTag",
                                            "x_rotation": "The x_rotation of the AprilTag",
                                            "y_rotation": "The y_rotation of the AprilTag",
                                            "z_rotation": "The z_rotation of the AprilTag"
                                        },
                                        "maixpy": "maix.image.AprilTag.__init__",
                                        "py_doc": "AprilTag constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - id: The id of the AprilTag\n  - famliy: The family of the AprilTag\n  - centroid_x: The x coordinate of the center of the AprilTag\n  - centroid_y: The y coordinate of the center of the AprilTag\n  - rotation: The rotation of the AprilTag\n  - decision_margin: The decision_margin of the AprilTag\n  - hamming: The hamming of the AprilTag\n  - goodness: The goodness of the AprilTag\n  - x_translation: The x_translation of the AprilTag\n  - y_translation: The y_translation of the AprilTag\n  - z_translation: The z_translation of the AprilTag\n  - x_rotation: The x_rotation of the AprilTag\n  - y_rotation: The y_rotation of the AprilTag\n  - z_rotation: The z_rotation of the AprilTag\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "int",
                                            "id",
                                            null
                                        ],
                                        [
                                            "int",
                                            "famliy",
                                            null
                                        ],
                                        [
                                            "float",
                                            "centroid_x",
                                            null
                                        ],
                                        [
                                            "float",
                                            "centroid_y",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "decision_margin",
                                            null
                                        ],
                                        [
                                            "int",
                                            "hamming",
                                            null
                                        ],
                                        [
                                            "float",
                                            "goodness",
                                            null
                                        ],
                                        [
                                            "float",
                                            "x_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "z_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "x_rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "z_rotation",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "AprilTag(std::vector<int> &rect, std::vector<std::vector<int>> &corners, int id, int famliy, float centroid_x, float centroid_y, float rotation, float decision_margin, int hamming, float goodness, float x_translation, float y_translation, float z_translation, float x_rotation, float y_rotation, float z_rotation)",
                                    "py_def": "def __init__(self, rect: list[int], corners: list[list[int]], id: int, famliy: int, centroid_x: float, centroid_y: float, rotation: float, decision_margin: float, hamming: int, goodness: float, x_translation: float, y_translation: float, z_translation: float, x_rotation: float, y_rotation: float, z_rotation: float) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] Returns the apriltag\u2019s bounding box x coordinate\n[1] Returns the apriltag\u2019s bounding box y coordinate\n[2] Returns the apriltag\u2019s bounding box w coordinate\n[3] Returns the apriltag\u2019s bounding box h coordinate\n[4] Returns the apriltag\u2019s id\n[5] Returns the apriltag\u2019s family\n[6] Not support\n[7] Not support\n[8] Not support\n[9] Not support\n[10] Returns the apriltag\u2019s hamming\n[11] Not support\n[12] Not support\n[13] Not support\n[14] Not support\n[15] Not support\n[16] Not support\n[17] Not support"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.AprilTag.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] Returns the apriltag\u2019s bounding box x coordinate\n[1] Returns the apriltag\u2019s bounding box y coordinate\n[2] Returns the apriltag\u2019s bounding box w coordinate\n[3] Returns the apriltag\u2019s bounding box h coordinate\n[4] Returns the apriltag\u2019s id\n[5] Returns the apriltag\u2019s family\n[6] Not support\n[7] Not support\n[8] Not support\n[9] Not support\n[10] Returns the apriltag\u2019s hamming\n[11] Not support\n[12] Not support\n[13] Not support\n[14] Not support\n[15] Not support\n[16] Not support\n[17] Not support\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of AprilTag",
                                        "return": "return the coordinate of the AprilTag.",
                                        "maixpy": "maix.image.AprilTag.corners",
                                        "py_doc": "get coordinate of AprilTag\n\nReturns: return the coordinate of the AprilTag.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of AprilTag",
                                        "return": "return the rectangle of the AprilTag. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.AprilTag.rect",
                                        "py_doc": "get rectangle of AprilTag\n\nReturns: return the rectangle of the AprilTag. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of AprilTag",
                                        "return": "return x of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.x",
                                        "py_doc": "get x of AprilTag\n\nReturns: return x of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of AprilTag",
                                        "return": "return y of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.y",
                                        "py_doc": "get y of AprilTag\n\nReturns: return y of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of AprilTag",
                                        "return": "return w of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.w",
                                        "py_doc": "get w of AprilTag\n\nReturns: return w of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of AprilTag",
                                        "return": "return h of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.h",
                                        "py_doc": "get h of AprilTag\n\nReturns: return h of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "id": {
                                    "type": "func",
                                    "name": "id",
                                    "doc": {
                                        "brief": "get id of AprilTag",
                                        "return": "return id of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.id",
                                        "py_doc": "get id of AprilTag\n\nReturns: return id of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int id()",
                                    "py_def": "def id(self) -> int"
                                },
                                "family": {
                                    "type": "func",
                                    "name": "family",
                                    "doc": {
                                        "brief": "get family of AprilTag",
                                        "return": "return family of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.family",
                                        "py_doc": "get family of AprilTag\n\nReturns: return family of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int family()",
                                    "py_def": "def family(self) -> int"
                                },
                                "cx": {
                                    "type": "func",
                                    "name": "cx",
                                    "doc": {
                                        "brief": "get cx of AprilTag",
                                        "return": "return cx of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.cx",
                                        "py_doc": "get cx of AprilTag\n\nReturns: return cx of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cx()",
                                    "py_def": "def cx(self) -> int"
                                },
                                "cxf": {
                                    "type": "func",
                                    "name": "cxf",
                                    "doc": {
                                        "brief": "get cxf of AprilTag",
                                        "return": "return cxf of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.cxf",
                                        "py_doc": "get cxf of AprilTag\n\nReturns: return cxf of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cxf()",
                                    "py_def": "def cxf(self) -> float"
                                },
                                "cy": {
                                    "type": "func",
                                    "name": "cy",
                                    "doc": {
                                        "brief": "get cy of AprilTag",
                                        "return": "return cy of the AprilTag, type is int",
                                        "maixpy": "maix.image.AprilTag.cy",
                                        "py_doc": "get cy of AprilTag\n\nReturns: return cy of the AprilTag, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int cy()",
                                    "py_def": "def cy(self) -> int"
                                },
                                "cyf": {
                                    "type": "func",
                                    "name": "cyf",
                                    "doc": {
                                        "brief": "get cyf of AprilTag",
                                        "return": "return cyf of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.cyf",
                                        "py_doc": "get cyf of AprilTag\n\nReturns: return cyf of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float cyf()",
                                    "py_def": "def cyf(self) -> float"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of AprilTag",
                                        "return": "return rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.rotation",
                                        "py_doc": "get rotation of AprilTag\n\nReturns: return rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()",
                                    "py_def": "def rotation(self) -> float"
                                },
                                "decision_margin": {
                                    "type": "func",
                                    "name": "decision_margin",
                                    "doc": {
                                        "brief": "Get decision_margin of AprilTag",
                                        "return": "Returns the quality of the apriltag match (0.0 - 1.0) where 1.0 is the best.",
                                        "maixpy": "maix.image.AprilTag.decision_margin",
                                        "py_doc": "Get decision_margin of AprilTag\n\nReturns: Returns the quality of the apriltag match (0.0 - 1.0) where 1.0 is the best.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float decision_margin()",
                                    "py_def": "def decision_margin(self) -> float"
                                },
                                "hamming": {
                                    "type": "func",
                                    "name": "hamming",
                                    "doc": {
                                        "brief": "get hamming of AprilTag",
                                        "return": "Returns the number of accepted bit errors for this tag.\nreturn 0, means 0 bit errors will be accepted.\n1 is TAG25H7, means up to 1 bit error may be accepted\n2 is TAG25H9, means up to 3 bit errors may be accepted\n3 is TAG36H10, means up to 3 bit errors may be accepted\n4 is TAG36H11, means up to 4 bit errors may be accepted\n5 is ARTOOLKIT, means 0 bit errors will be accepted",
                                        "maixpy": "maix.image.AprilTag.hamming",
                                        "py_doc": "get hamming of AprilTag\n\nReturns: Returns the number of accepted bit errors for this tag.\nreturn 0, means 0 bit errors will be accepted.\n1 is TAG25H7, means up to 1 bit error may be accepted\n2 is TAG25H9, means up to 3 bit errors may be accepted\n3 is TAG36H10, means up to 3 bit errors may be accepted\n4 is TAG36H11, means up to 4 bit errors may be accepted\n5 is ARTOOLKIT, means 0 bit errors will be accepted\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int hamming()",
                                    "py_def": "def hamming(self) -> int"
                                },
                                "goodness": {
                                    "type": "func",
                                    "name": "goodness",
                                    "doc": {
                                        "brief": "get goodness of AprilTag",
                                        "return": "return goodness of the AprilTag, type is float\nNote: This value is always 0.0 for now.",
                                        "maixpy": "maix.image.AprilTag.goodness",
                                        "py_doc": "get goodness of AprilTag\n\nReturns: return goodness of the AprilTag, type is float\nNote: This value is always 0.0 for now.\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float goodness()",
                                    "py_def": "def goodness(self) -> float"
                                },
                                "x_translation": {
                                    "type": "func",
                                    "name": "x_translation",
                                    "doc": {
                                        "brief": "get x_translation of AprilTag",
                                        "return": "return x_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.x_translation",
                                        "py_doc": "get x_translation of AprilTag\n\nReturns: return x_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_translation()",
                                    "py_def": "def x_translation(self) -> float"
                                },
                                "y_translation": {
                                    "type": "func",
                                    "name": "y_translation",
                                    "doc": {
                                        "brief": "get y_translation of AprilTag",
                                        "return": "return y_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.y_translation",
                                        "py_doc": "get y_translation of AprilTag\n\nReturns: return y_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_translation()",
                                    "py_def": "def y_translation(self) -> float"
                                },
                                "z_translation": {
                                    "type": "func",
                                    "name": "z_translation",
                                    "doc": {
                                        "brief": "get z_translation of AprilTag",
                                        "return": "return z_translation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.z_translation",
                                        "py_doc": "get z_translation of AprilTag\n\nReturns: return z_translation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float z_translation()",
                                    "py_def": "def z_translation(self) -> float"
                                },
                                "x_rotation": {
                                    "type": "func",
                                    "name": "x_rotation",
                                    "doc": {
                                        "brief": "get x_rotation of AprilTag",
                                        "return": "return x_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.x_rotation",
                                        "py_doc": "get x_rotation of AprilTag\n\nReturns: return x_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_rotation()",
                                    "py_def": "def x_rotation(self) -> float"
                                },
                                "y_rotation": {
                                    "type": "func",
                                    "name": "y_rotation",
                                    "doc": {
                                        "brief": "get y_rotation of AprilTag",
                                        "return": "return y_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.y_rotation",
                                        "py_doc": "get y_rotation of AprilTag\n\nReturns: return y_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_rotation()",
                                    "py_def": "def y_rotation(self) -> float"
                                },
                                "z_rotation": {
                                    "type": "func",
                                    "name": "z_rotation",
                                    "doc": {
                                        "brief": "get z_rotation of AprilTag",
                                        "return": "return z_rotation of the AprilTag, type is float",
                                        "maixpy": "maix.image.AprilTag.z_rotation",
                                        "py_doc": "get z_rotation of AprilTag\n\nReturns: return z_rotation of the AprilTag, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float z_rotation()",
                                    "py_def": "def z_rotation(self) -> float"
                                }
                            },
                            "def": "class AprilTag"
                        },
                        "DataMatrix": {
                            "type": "class",
                            "name": "DataMatrix",
                            "doc": {
                                "brief": "DataMatrix class",
                                "maixpy": "maix.image.DataMatrix",
                                "py_doc": "DataMatrix class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "DataMatrix",
                                    "doc": {
                                        "brief": "DataMatrix constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "payload": "The payload of the DataMatrix",
                                            "rotation": "The rotation of the DataMatrix",
                                            "rows": "The rows of the DataMatrix",
                                            "columns": "The columns of the DataMatrix",
                                            "capacity": "The capacity of the DataMatrix",
                                            "padding": "The padding of the DataMatrix"
                                        },
                                        "maixpy": "maix.image.DataMatrix.__init__",
                                        "py_doc": "DataMatrix constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - payload: The payload of the DataMatrix\n  - rotation: The rotation of the DataMatrix\n  - rows: The rows of the DataMatrix\n  - columns: The columns of the DataMatrix\n  - capacity: The capacity of the DataMatrix\n  - padding: The padding of the DataMatrix\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "rows",
                                            null
                                        ],
                                        [
                                            "int",
                                            "columns",
                                            null
                                        ],
                                        [
                                            "int",
                                            "capacity",
                                            null
                                        ],
                                        [
                                            "int",
                                            "padding",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "DataMatrix(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, float rotation, int rows, int columns, int capacity, int padding)",
                                    "py_def": "def __init__(self, rect: list[int], corners: list[list[int]], payload: str, rotation: float, rows: int, columns: int, capacity: int, padding: int) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] get x of DataMatrix\n[1] get y of DataMatrix\n[2] get w of DataMatrix\n[3] get h of DataMatrix\n[4] Not support this index, try to use payload() method\n[5] Not support this index, try to use rotation() method\n[6] get rows of DataMatrix\n[7] get columns of DataMatrix\n[8] get capacity of DataMatrix\n[9] get padding of DataMatrix"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.DataMatrix.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] get x of DataMatrix\n[1] get y of DataMatrix\n[2] get w of DataMatrix\n[3] get h of DataMatrix\n[4] Not support this index, try to use payload() method\n[5] Not support this index, try to use rotation() method\n[6] get rows of DataMatrix\n[7] get columns of DataMatrix\n[8] get capacity of DataMatrix\n[9] get padding of DataMatrix\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of DataMatrix",
                                        "return": "return the coordinate of the DataMatrix.",
                                        "maixpy": "maix.image.DataMatrix.corners",
                                        "py_doc": "get coordinate of DataMatrix\n\nReturns: return the coordinate of the DataMatrix.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of DataMatrix",
                                        "return": "return the rectangle of the DataMatrix. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.DataMatrix.rect",
                                        "py_doc": "get rectangle of DataMatrix\n\nReturns: return the rectangle of the DataMatrix. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of DataMatrix",
                                        "return": "return x of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.x",
                                        "py_doc": "get x of DataMatrix\n\nReturns: return x of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of DataMatrix",
                                        "return": "return y of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.y",
                                        "py_doc": "get y of DataMatrix\n\nReturns: return y of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of DataMatrix",
                                        "return": "return w of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.w",
                                        "py_doc": "get w of DataMatrix\n\nReturns: return w of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of DataMatrix",
                                        "return": "return h of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.h",
                                        "py_doc": "get h of DataMatrix\n\nReturns: return h of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get payload of DataMatrix",
                                        "return": "return payload of the DataMatrix, type is std::string",
                                        "maixpy": "maix.image.DataMatrix.payload",
                                        "py_doc": "get payload of DataMatrix\n\nReturns: return payload of the DataMatrix, type is std::string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()",
                                    "py_def": "def payload(self) -> str"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of DataMatrix",
                                        "return": "return rotation of the DataMatrix, type is float",
                                        "maixpy": "maix.image.DataMatrix.rotation",
                                        "py_doc": "get rotation of DataMatrix\n\nReturns: return rotation of the DataMatrix, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()",
                                    "py_def": "def rotation(self) -> float"
                                },
                                "rows": {
                                    "type": "func",
                                    "name": "rows",
                                    "doc": {
                                        "brief": "get rows of DataMatrix",
                                        "return": "return rows of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.rows",
                                        "py_doc": "get rows of DataMatrix\n\nReturns: return rows of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int rows()",
                                    "py_def": "def rows(self) -> int"
                                },
                                "columns": {
                                    "type": "func",
                                    "name": "columns",
                                    "doc": {
                                        "brief": "get columns of DataMatrix",
                                        "return": "return columns of the DataMatrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.columns",
                                        "py_doc": "get columns of DataMatrix\n\nReturns: return columns of the DataMatrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int columns()",
                                    "py_def": "def columns(self) -> int"
                                },
                                "capacity": {
                                    "type": "func",
                                    "name": "capacity",
                                    "doc": {
                                        "brief": "get capacity of DataMatrix",
                                        "return": "returns how many characters could fit in this data matrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.capacity",
                                        "py_doc": "get capacity of DataMatrix\n\nReturns: returns how many characters could fit in this data matrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int capacity()",
                                    "py_def": "def capacity(self) -> int"
                                },
                                "padding": {
                                    "type": "func",
                                    "name": "padding",
                                    "doc": {
                                        "brief": "get padding of DataMatrix",
                                        "return": "returns how many unused characters are in this data matrix, type is int",
                                        "maixpy": "maix.image.DataMatrix.padding",
                                        "py_doc": "get padding of DataMatrix\n\nReturns: returns how many unused characters are in this data matrix, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int padding()",
                                    "py_def": "def padding(self) -> int"
                                }
                            },
                            "def": "class DataMatrix"
                        },
                        "BarCode": {
                            "type": "class",
                            "name": "BarCode",
                            "doc": {
                                "brief": "BarCode class",
                                "maixpy": "maix.image.BarCode",
                                "py_doc": "BarCode class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "BarCode",
                                    "doc": {
                                        "brief": "BarCode constructor",
                                        "param": {
                                            "rect": "Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>",
                                            "corners": "Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>",
                                            "payload": "The payload of the BarCode",
                                            "type": "The type of the BarCode",
                                            "rotation": "The rotation of the BarCode",
                                            "quality": "The quality of the BarCode"
                                        },
                                        "maixpy": "maix.image.BarCode.__init__",
                                        "py_doc": "BarCode constructor\n\nArgs:\n  - rect: Inlucdes the top-left corner and the width and height of the rectangle. format is {x, y, w, h}, type is std::vector<int>\n  - corners: Includes the four corners of the rectangle. format is {{x0, y0}, {x1, y1}, {x2, y2}, {x3, y3}}, type is std::vector<std::vector<int>>\n  - payload: The payload of the BarCode\n  - type: The type of the BarCode\n  - rotation: The rotation of the BarCode\n  - quality: The quality of the BarCode\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int> &",
                                            "rect",
                                            null
                                        ],
                                        [
                                            "std::vector<std::vector<int>> &",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "std::string &",
                                            "payload",
                                            null
                                        ],
                                        [
                                            "int",
                                            "type",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "int",
                                            "quality",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "BarCode(std::vector<int> &rect, std::vector<std::vector<int>> &corners, std::string &payload, int type, float rotation, int quality)",
                                    "py_def": "def __init__(self, rect: list[int], corners: list[list[int]], payload: str, type: int, rotation: float, quality: int) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "[0] get x of BarCode\n[1] get y of BarCode\n[2] get w of BarCode\n[3] get h of BarCode\n[4] Not support this index, try to use payload() method\n[5] get type of BarCode\n[6] Not support this index, try to use rotation() method\n[7] get quality of BarCode"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.BarCode.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: [0] get x of BarCode\n[1] get y of BarCode\n[2] get w of BarCode\n[3] get h of BarCode\n[4] Not support this index, try to use payload() method\n[5] get type of BarCode\n[6] Not support this index, try to use rotation() method\n[7] get quality of BarCode\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "corners": {
                                    "type": "func",
                                    "name": "corners",
                                    "doc": {
                                        "brief": "get coordinate of BarCode",
                                        "return": "return the coordinate of the BarCode.",
                                        "maixpy": "maix.image.BarCode.corners",
                                        "py_doc": "get coordinate of BarCode\n\nReturns: return the coordinate of the BarCode.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::vector<int>>",
                                    "static": false,
                                    "def": "std::vector<std::vector<int>> corners()",
                                    "py_def": "def corners(self) -> list[list[int]]"
                                },
                                "rect": {
                                    "type": "func",
                                    "name": "rect",
                                    "doc": {
                                        "brief": "get rectangle of BarCode",
                                        "return": "return the rectangle of the BarCode. format is {x, y, w, h}, type is std::vector<int>",
                                        "maixpy": "maix.image.BarCode.rect",
                                        "py_doc": "get rectangle of BarCode\n\nReturns: return the rectangle of the BarCode. format is {x, y, w, h}, type is std::vector<int>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> rect()",
                                    "py_def": "def rect(self) -> list[int]"
                                },
                                "x": {
                                    "type": "func",
                                    "name": "x",
                                    "doc": {
                                        "brief": "get x of BarCode",
                                        "return": "return x of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.x",
                                        "py_doc": "get x of BarCode\n\nReturns: return x of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int x()",
                                    "py_def": "def x(self) -> int"
                                },
                                "y": {
                                    "type": "func",
                                    "name": "y",
                                    "doc": {
                                        "brief": "get y of BarCode",
                                        "return": "return y of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.y",
                                        "py_doc": "get y of BarCode\n\nReturns: return y of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int y()",
                                    "py_def": "def y(self) -> int"
                                },
                                "w": {
                                    "type": "func",
                                    "name": "w",
                                    "doc": {
                                        "brief": "get w of BarCode",
                                        "return": "return w of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.w",
                                        "py_doc": "get w of BarCode\n\nReturns: return w of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int w()",
                                    "py_def": "def w(self) -> int"
                                },
                                "h": {
                                    "type": "func",
                                    "name": "h",
                                    "doc": {
                                        "brief": "get h of BarCode",
                                        "return": "return h of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.h",
                                        "py_doc": "get h of BarCode\n\nReturns: return h of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int h()",
                                    "py_def": "def h(self) -> int"
                                },
                                "payload": {
                                    "type": "func",
                                    "name": "payload",
                                    "doc": {
                                        "brief": "get payload of BarCode",
                                        "return": "return payload of the BarCode, type is std::string",
                                        "maixpy": "maix.image.BarCode.payload",
                                        "py_doc": "get payload of BarCode\n\nReturns: return payload of the BarCode, type is std::string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string payload()",
                                    "py_def": "def payload(self) -> str"
                                },
                                "type": {
                                    "type": "func",
                                    "name": "type",
                                    "doc": {
                                        "brief": "get type of BarCode",
                                        "return": "return type of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.type",
                                        "py_doc": "get type of BarCode\n\nReturns: return type of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int type()",
                                    "py_def": "def type(self) -> int"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of BarCode",
                                        "return": "return rotation of the BarCode, type is float. FIXME: always return 0.0",
                                        "maixpy": "maix.image.BarCode.rotation",
                                        "py_doc": "get rotation of BarCode\n\nReturns: return rotation of the BarCode, type is float. FIXME: always return 0.0\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()",
                                    "py_def": "def rotation(self) -> float"
                                },
                                "quality": {
                                    "type": "func",
                                    "name": "quality",
                                    "doc": {
                                        "brief": "get quality of BarCode",
                                        "return": "return quality of the BarCode, type is int",
                                        "maixpy": "maix.image.BarCode.quality",
                                        "py_doc": "get quality of BarCode\n\nReturns: return quality of the BarCode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int quality()",
                                    "py_def": "def quality(self) -> int"
                                }
                            },
                            "def": "class BarCode"
                        },
                        "Statistics": {
                            "type": "class",
                            "name": "Statistics",
                            "doc": {
                                "brief": "Statistics class",
                                "maixpy": "maix.image.Statistics",
                                "py_doc": "Statistics class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Statistics",
                                    "doc": {
                                        "brief": "Statistics constructor",
                                        "param": {
                                            "format": "The statistics source image format",
                                            "l_statistics": "The statistics of the L channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>",
                                            "a_statistics": "The statistics of the A channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>",
                                            "b_statistics": "The statistics of the B channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>"
                                        },
                                        "maixpy": "maix.image.Statistics.__init__",
                                        "py_doc": "Statistics constructor\n\nArgs:\n  - format: The statistics source image format\n  - l_statistics: The statistics of the L channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n  - a_statistics: The statistics of the A channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n  - b_statistics: The statistics of the B channel. format is {mean, median, mode, std_dev, min, max, lq, uq}, type is std::vector<int>\n"
                                    },
                                    "args": [
                                        [
                                            "image::Format",
                                            "format",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "l_statistics",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "a_statistics",
                                            null
                                        ],
                                        [
                                            "std::vector<int> &",
                                            "b_statistics",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Statistics(image::Format format, std::vector<int> &l_statistics, std::vector<int> &a_statistics, std::vector<int> &b_statistics)",
                                    "py_def": "def __init__(self, format: Format, l_statistics: list[int], a_statistics: list[int], b_statistics: list[int]) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "array index"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.Statistics.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: array index\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "get format of Statistics source image",
                                        "return": "return format of the Statistics source image, type is image::Format",
                                        "maixpy": "maix.image.Statistics.format",
                                        "py_doc": "get format of Statistics source image\n\nReturns: return format of the Statistics source image, type is image::Format\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()",
                                    "py_def": "def format(self) -> Format"
                                },
                                "l_mean": {
                                    "type": "func",
                                    "name": "l_mean",
                                    "doc": {
                                        "brief": "get L channel mean",
                                        "return": "return L channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.l_mean",
                                        "py_doc": "get L channel mean\n\nReturns: return L channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_mean()",
                                    "py_def": "def l_mean(self) -> int"
                                },
                                "l_median": {
                                    "type": "func",
                                    "name": "l_median",
                                    "doc": {
                                        "brief": "get L channel median",
                                        "return": "return L channel median, type is int",
                                        "maixpy": "maix.image.Statistics.l_median",
                                        "py_doc": "get L channel median\n\nReturns: return L channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_median()",
                                    "py_def": "def l_median(self) -> int"
                                },
                                "l_mode": {
                                    "type": "func",
                                    "name": "l_mode",
                                    "doc": {
                                        "brief": "get L channel mode",
                                        "return": "return L channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.l_mode",
                                        "py_doc": "get L channel mode\n\nReturns: return L channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_mode()",
                                    "py_def": "def l_mode(self) -> int"
                                },
                                "l_std_dev": {
                                    "type": "func",
                                    "name": "l_std_dev",
                                    "doc": {
                                        "brief": "get L channel std_dev",
                                        "return": "return L channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.l_std_dev",
                                        "py_doc": "get L channel std_dev\n\nReturns: return L channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_std_dev()",
                                    "py_def": "def l_std_dev(self) -> int"
                                },
                                "l_min": {
                                    "type": "func",
                                    "name": "l_min",
                                    "doc": {
                                        "brief": "get L channel min",
                                        "return": "return L channel min, type is int",
                                        "maixpy": "maix.image.Statistics.l_min",
                                        "py_doc": "get L channel min\n\nReturns: return L channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_min()",
                                    "py_def": "def l_min(self) -> int"
                                },
                                "l_max": {
                                    "type": "func",
                                    "name": "l_max",
                                    "doc": {
                                        "brief": "get L channel max",
                                        "return": "return L channel max, type is int",
                                        "maixpy": "maix.image.Statistics.l_max",
                                        "py_doc": "get L channel max\n\nReturns: return L channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_max()",
                                    "py_def": "def l_max(self) -> int"
                                },
                                "l_lq": {
                                    "type": "func",
                                    "name": "l_lq",
                                    "doc": {
                                        "brief": "get L channel lq",
                                        "return": "return L channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.l_lq",
                                        "py_doc": "get L channel lq\n\nReturns: return L channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_lq()",
                                    "py_def": "def l_lq(self) -> int"
                                },
                                "l_uq": {
                                    "type": "func",
                                    "name": "l_uq",
                                    "doc": {
                                        "brief": "get L channel uq",
                                        "return": "return L channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.l_uq",
                                        "py_doc": "get L channel uq\n\nReturns: return L channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_uq()",
                                    "py_def": "def l_uq(self) -> int"
                                },
                                "a_mean": {
                                    "type": "func",
                                    "name": "a_mean",
                                    "doc": {
                                        "brief": "get A channel mean",
                                        "return": "return A channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.a_mean",
                                        "py_doc": "get A channel mean\n\nReturns: return A channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_mean()",
                                    "py_def": "def a_mean(self) -> int"
                                },
                                "a_median": {
                                    "type": "func",
                                    "name": "a_median",
                                    "doc": {
                                        "brief": "get A channea median",
                                        "return": "return A channel median, type is int",
                                        "maixpy": "maix.image.Statistics.a_median",
                                        "py_doc": "get A channea median\n\nReturns: return A channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_median()",
                                    "py_def": "def a_median(self) -> int"
                                },
                                "a_mode": {
                                    "type": "func",
                                    "name": "a_mode",
                                    "doc": {
                                        "brief": "get A channel mode",
                                        "return": "return A channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.a_mode",
                                        "py_doc": "get A channel mode\n\nReturns: return A channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_mode()",
                                    "py_def": "def a_mode(self) -> int"
                                },
                                "a_std_dev": {
                                    "type": "func",
                                    "name": "a_std_dev",
                                    "doc": {
                                        "brief": "get A channel std_dev",
                                        "return": "return A channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.a_std_dev",
                                        "py_doc": "get A channel std_dev\n\nReturns: return A channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_std_dev()",
                                    "py_def": "def a_std_dev(self) -> int"
                                },
                                "a_min": {
                                    "type": "func",
                                    "name": "a_min",
                                    "doc": {
                                        "brief": "get A channel min",
                                        "return": "return A channel min, type is int",
                                        "maixpy": "maix.image.Statistics.a_min",
                                        "py_doc": "get A channel min\n\nReturns: return A channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_min()",
                                    "py_def": "def a_min(self) -> int"
                                },
                                "a_max": {
                                    "type": "func",
                                    "name": "a_max",
                                    "doc": {
                                        "brief": "get A channel max",
                                        "return": "return A channel max, type is int",
                                        "maixpy": "maix.image.Statistics.a_max",
                                        "py_doc": "get A channel max\n\nReturns: return A channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_max()",
                                    "py_def": "def a_max(self) -> int"
                                },
                                "a_lq": {
                                    "type": "func",
                                    "name": "a_lq",
                                    "doc": {
                                        "brief": "get A channel lq",
                                        "return": "return A channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.a_lq",
                                        "py_doc": "get A channel lq\n\nReturns: return A channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_lq()",
                                    "py_def": "def a_lq(self) -> int"
                                },
                                "a_uq": {
                                    "type": "func",
                                    "name": "a_uq",
                                    "doc": {
                                        "brief": "get A channel uq",
                                        "return": "return A channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.a_uq",
                                        "py_doc": "get A channel uq\n\nReturns: return A channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_uq()",
                                    "py_def": "def a_uq(self) -> int"
                                },
                                "b_mean": {
                                    "type": "func",
                                    "name": "b_mean",
                                    "doc": {
                                        "brief": "get B channel mean",
                                        "return": "return B channel mean, type is int",
                                        "maixpy": "maix.image.Statistics.b_mean",
                                        "py_doc": "get B channel mean\n\nReturns: return B channel mean, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_mean()",
                                    "py_def": "def b_mean(self) -> int"
                                },
                                "b_median": {
                                    "type": "func",
                                    "name": "b_median",
                                    "doc": {
                                        "brief": "get B channea median",
                                        "return": "return B channel median, type is int",
                                        "maixpy": "maix.image.Statistics.b_median",
                                        "py_doc": "get B channea median\n\nReturns: return B channel median, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_median()",
                                    "py_def": "def b_median(self) -> int"
                                },
                                "b_mode": {
                                    "type": "func",
                                    "name": "b_mode",
                                    "doc": {
                                        "brief": "get B channel mode",
                                        "return": "return B channel mode, type is int",
                                        "maixpy": "maix.image.Statistics.b_mode",
                                        "py_doc": "get B channel mode\n\nReturns: return B channel mode, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_mode()",
                                    "py_def": "def b_mode(self) -> int"
                                },
                                "b_std_dev": {
                                    "type": "func",
                                    "name": "b_std_dev",
                                    "doc": {
                                        "brief": "get B channel std_dev",
                                        "return": "return B channel std_dev, type is int",
                                        "maixpy": "maix.image.Statistics.b_std_dev",
                                        "py_doc": "get B channel std_dev\n\nReturns: return B channel std_dev, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_std_dev()",
                                    "py_def": "def b_std_dev(self) -> int"
                                },
                                "b_min": {
                                    "type": "func",
                                    "name": "b_min",
                                    "doc": {
                                        "brief": "get B channel min",
                                        "return": "return B channel min, type is int",
                                        "maixpy": "maix.image.Statistics.b_min",
                                        "py_doc": "get B channel min\n\nReturns: return B channel min, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_min()",
                                    "py_def": "def b_min(self) -> int"
                                },
                                "b_max": {
                                    "type": "func",
                                    "name": "b_max",
                                    "doc": {
                                        "brief": "get B channel max",
                                        "return": "return B channel max, type is int",
                                        "maixpy": "maix.image.Statistics.b_max",
                                        "py_doc": "get B channel max\n\nReturns: return B channel max, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_max()",
                                    "py_def": "def b_max(self) -> int"
                                },
                                "b_lq": {
                                    "type": "func",
                                    "name": "b_lq",
                                    "doc": {
                                        "brief": "get B channel lq",
                                        "return": "return B channel lq, type is int",
                                        "maixpy": "maix.image.Statistics.b_lq",
                                        "py_doc": "get B channel lq\n\nReturns: return B channel lq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_lq()",
                                    "py_def": "def b_lq(self) -> int"
                                },
                                "b_uq": {
                                    "type": "func",
                                    "name": "b_uq",
                                    "doc": {
                                        "brief": "get B channel uq",
                                        "return": "return B channel uq, type is int",
                                        "maixpy": "maix.image.Statistics.b_uq",
                                        "py_doc": "get B channel uq\n\nReturns: return B channel uq, type is int\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_uq()",
                                    "py_def": "def b_uq(self) -> int"
                                }
                            },
                            "def": "class Statistics"
                        },
                        "Displacement": {
                            "type": "class",
                            "name": "Displacement",
                            "doc": {
                                "brief": "Displacement class",
                                "maixpy": "maix.image.Displacement",
                                "py_doc": "Displacement class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Displacement",
                                    "doc": {
                                        "brief": "Displacement constructor",
                                        "param": {
                                            "x_translation": "The x_translation of the Displacement",
                                            "y_translation": "The y_translation of the Displacement",
                                            "rotation": "The rotation of the Displacement",
                                            "scale": "The scale of the Displacement",
                                            "response": "The response of the Displacement"
                                        },
                                        "maixpy": "maix.image.Displacement.__init__",
                                        "py_doc": "Displacement constructor\n\nArgs:\n  - x_translation: The x_translation of the Displacement\n  - y_translation: The y_translation of the Displacement\n  - rotation: The rotation of the Displacement\n  - scale: The scale of the Displacement\n  - response: The response of the Displacement\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "x_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "y_translation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "rotation",
                                            null
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            null
                                        ],
                                        [
                                            "float",
                                            "response",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Displacement(float x_translation, float y_translation, float rotation, float scale, float response)",
                                    "py_def": "def __init__(self, x_translation: float, y_translation: float, rotation: float, scale: float, response: float) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "param": {
                                            "index": "array index"
                                        },
                                        "return": "int&",
                                        "maixpy": "maix.image.Displacement.__getitem__",
                                        "py_doc": "Subscript operator\n\nArgs:\n  - index: array index\n\n\nReturns: int&\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "x_translation": {
                                    "type": "func",
                                    "name": "x_translation",
                                    "doc": {
                                        "brief": "get x_translation of Displacement",
                                        "return": "return x_translation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.x_translation",
                                        "py_doc": "get x_translation of Displacement\n\nReturns: return x_translation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float x_translation()",
                                    "py_def": "def x_translation(self) -> float"
                                },
                                "y_translation": {
                                    "type": "func",
                                    "name": "y_translation",
                                    "doc": {
                                        "brief": "get y_translation of Displacement",
                                        "return": "return y_translation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.y_translation",
                                        "py_doc": "get y_translation of Displacement\n\nReturns: return y_translation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float y_translation()",
                                    "py_def": "def y_translation(self) -> float"
                                },
                                "rotation": {
                                    "type": "func",
                                    "name": "rotation",
                                    "doc": {
                                        "brief": "get rotation of Displacement",
                                        "return": "return rotation of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.rotation",
                                        "py_doc": "get rotation of Displacement\n\nReturns: return rotation of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float rotation()",
                                    "py_def": "def rotation(self) -> float"
                                },
                                "scale": {
                                    "type": "func",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "get scale of Displacement",
                                        "return": "return scale of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.scale",
                                        "py_doc": "get scale of Displacement\n\nReturns: return scale of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float scale()",
                                    "py_def": "def scale(self) -> float"
                                },
                                "response": {
                                    "type": "func",
                                    "name": "response",
                                    "doc": {
                                        "brief": "get response of Displacement",
                                        "return": "return response of the Displacement, type is float",
                                        "maixpy": "maix.image.Displacement.response",
                                        "py_doc": "get response of Displacement\n\nReturns: return response of the Displacement, type is float\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float response()",
                                    "py_def": "def response(self) -> float"
                                }
                            },
                            "def": "class Displacement"
                        },
                        "Percentile": {
                            "type": "class",
                            "name": "Percentile",
                            "doc": {
                                "brief": "Percentile class",
                                "maixpy": "maix.image.Percentile",
                                "py_doc": "Percentile class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Percentile",
                                    "doc": {
                                        "brief": "Percentile constructor",
                                        "param": {
                                            "l_value": "for grayscale image, it is grayscale percentile value (between 0 and 255).\nfor rgb888 image, it is l channel percentile value of lab (between 0 and 100).",
                                            "a_value": "for rgb888 image, it is a channel percentile value of lab format(between -128 and 127).",
                                            "b_value": "for rgb888 image, it is b channel percentile value of lab format(between -128 and 127)."
                                        },
                                        "maixpy": "maix.image.Percentile.__init__",
                                        "py_doc": "Percentile constructor\n\nArgs:\n  - l_value: for grayscale image, it is grayscale percentile value (between 0 and 255).\nfor rgb888 image, it is l channel percentile value of lab (between 0 and 100).\n  - a_value: for rgb888 image, it is a channel percentile value of lab format(between -128 and 127).\n  - b_value: for rgb888 image, it is b channel percentile value of lab format(between -128 and 127).\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "l_value",
                                            null
                                        ],
                                        [
                                            "int",
                                            "a_value",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "b_value",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Percentile(int l_value, int a_value = 0, int b_value = 0)",
                                    "py_def": "def __init__(self, l_value: int, a_value: int = 0, b_value: int = 0) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "maixpy": "maix.image.Percentile.__getitem__",
                                        "py_doc": "Subscript operator"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "value": {
                                    "type": "func",
                                    "name": "value",
                                    "doc": {
                                        "brief": "Return the grayscale percentile value (between 0 and 255).",
                                        "return": "returns grayscale percentile value",
                                        "maixpy": "maix.image.Percentile.value",
                                        "py_doc": "Return the grayscale percentile value (between 0 and 255).\n\nReturns: returns grayscale percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int value()",
                                    "py_def": "def value(self) -> int"
                                },
                                "l_value": {
                                    "type": "func",
                                    "name": "l_value",
                                    "doc": {
                                        "brief": "Return the l channel percentile value of lab format (between 0 and 100).",
                                        "return": "returns l channel percentile value",
                                        "maixpy": "maix.image.Percentile.l_value",
                                        "py_doc": "Return the l channel percentile value of lab format (between 0 and 100).\n\nReturns: returns l channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_value()",
                                    "py_def": "def l_value(self) -> int"
                                },
                                "a_value": {
                                    "type": "func",
                                    "name": "a_value",
                                    "doc": {
                                        "brief": "Return the a channel percentile value of lab format (between -128 and 127).",
                                        "return": "returns a channel percentile value",
                                        "maixpy": "maix.image.Percentile.a_value",
                                        "py_doc": "Return the a channel percentile value of lab format (between -128 and 127).\n\nReturns: returns a channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_value()",
                                    "py_def": "def a_value(self) -> int"
                                },
                                "b_value": {
                                    "type": "func",
                                    "name": "b_value",
                                    "doc": {
                                        "brief": "Return the b channel percentile value of lab format (between -128 and 127).",
                                        "return": "returns b channel percentile value",
                                        "maixpy": "maix.image.Percentile.b_value",
                                        "py_doc": "Return the b channel percentile value of lab format (between -128 and 127).\n\nReturns: returns b channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_value()",
                                    "py_def": "def b_value(self) -> int"
                                }
                            },
                            "def": "class Percentile"
                        },
                        "Threshold": {
                            "type": "class",
                            "name": "Threshold",
                            "doc": {
                                "brief": "Threshold class",
                                "maixpy": "maix.image.Threshold",
                                "py_doc": "Threshold class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Threshold",
                                    "doc": {
                                        "brief": "Threshold constructor",
                                        "param": {
                                            "l_value": "for grayscale image, it is grayscale threshold value (between 0 and 255).\nfor rgb888 image, it is l channel threshold value of lab (between 0 and 100).",
                                            "a_value": "for rgb888 image, it is a channel threshold value of lab format(between -128 and 127).",
                                            "b_value": "for rgb888 image, it is b channel threshold value of lab format(between -128 and 127)."
                                        },
                                        "maixpy": "maix.image.Threshold.__init__",
                                        "py_doc": "Threshold constructor\n\nArgs:\n  - l_value: for grayscale image, it is grayscale threshold value (between 0 and 255).\nfor rgb888 image, it is l channel threshold value of lab (between 0 and 100).\n  - a_value: for rgb888 image, it is a channel threshold value of lab format(between -128 and 127).\n  - b_value: for rgb888 image, it is b channel threshold value of lab format(between -128 and 127).\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "l_value",
                                            null
                                        ],
                                        [
                                            "int",
                                            "a_value",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "b_value",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Threshold(int l_value, int a_value = 0, int b_value = 0)",
                                    "py_def": "def __init__(self, l_value: int, a_value: int = 0, b_value: int = 0) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "maixpy": "maix.image.Threshold.__getitem__",
                                        "py_doc": "Subscript operator"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "value": {
                                    "type": "func",
                                    "name": "value",
                                    "doc": {
                                        "brief": "Return the grayscale threshold value (between 0 and 255).",
                                        "return": "returns grayscale threshold value",
                                        "maixpy": "maix.image.Threshold.value",
                                        "py_doc": "Return the grayscale threshold value (between 0 and 255).\n\nReturns: returns grayscale threshold value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int value()",
                                    "py_def": "def value(self) -> int"
                                },
                                "l_value": {
                                    "type": "func",
                                    "name": "l_value",
                                    "doc": {
                                        "brief": "Return the l channel threshold value of lab format (between 0 and 100).",
                                        "return": "returns l channel percentile value",
                                        "maixpy": "maix.image.Threshold.l_value",
                                        "py_doc": "Return the l channel threshold value of lab format (between 0 and 100).\n\nReturns: returns l channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int l_value()",
                                    "py_def": "def l_value(self) -> int"
                                },
                                "a_value": {
                                    "type": "func",
                                    "name": "a_value",
                                    "doc": {
                                        "brief": "Return the a channel threshold value of lab format (between -128 and 127).",
                                        "return": "returns a channel percentile value",
                                        "maixpy": "maix.image.Threshold.a_value",
                                        "py_doc": "Return the a channel threshold value of lab format (between -128 and 127).\n\nReturns: returns a channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int a_value()",
                                    "py_def": "def a_value(self) -> int"
                                },
                                "b_value": {
                                    "type": "func",
                                    "name": "b_value",
                                    "doc": {
                                        "brief": "Return the b channel threshold value of lab format (between -128 and 127).",
                                        "return": "returns b channel percentile value",
                                        "maixpy": "maix.image.Threshold.b_value",
                                        "py_doc": "Return the b channel threshold value of lab format (between -128 and 127).\n\nReturns: returns b channel percentile value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int b_value()",
                                    "py_def": "def b_value(self) -> int"
                                }
                            },
                            "def": "class Threshold"
                        },
                        "Histogram": {
                            "type": "class",
                            "name": "Histogram",
                            "doc": {
                                "brief": "Histogram class",
                                "maixpy": "maix.image.Histogram",
                                "py_doc": "Histogram class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Histogram",
                                    "doc": {
                                        "brief": "Histogram constructor",
                                        "param": {
                                            "l_value": "for grayscale image, it is grayscale threshold value list (the range of element values in the list is 0 and 255).\nfor rgb888 image, it is l channel threshold value list of lab (the range of element values in the list is 0 and 100).",
                                            "a_value": "for rgb888 image, it is a channel threshold value list of lab format(the range of element values in the list is -128 and 127).",
                                            "b_value": "for rgb888 image, it is b channel threshold value list of lab format(the range of element values in the list is -128 and 127).",
                                            "format": "format of the source image"
                                        },
                                        "maixpy": "maix.image.Histogram.__init__",
                                        "py_doc": "Histogram constructor\n\nArgs:\n  - l_value: for grayscale image, it is grayscale threshold value list (the range of element values in the list is 0 and 255).\nfor rgb888 image, it is l channel threshold value list of lab (the range of element values in the list is 0 and 100).\n  - a_value: for rgb888 image, it is a channel threshold value list of lab format(the range of element values in the list is -128 and 127).\n  - b_value: for rgb888 image, it is b channel threshold value list of lab format(the range of element values in the list is -128 and 127).\n  - format: format of the source image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<float>",
                                            "l_bin",
                                            null
                                        ],
                                        [
                                            "std::vector<float>",
                                            "a_bin",
                                            null
                                        ],
                                        [
                                            "std::vector<float>",
                                            "b_bin",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_RGB888"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Histogram(std::vector<float> l_bin, std::vector<float> a_bin, std::vector<float> b_bin, image::Format format = image::Format::FMT_RGB888)",
                                    "py_def": "def __init__(self, l_bin: list[float], a_bin: list[float], b_bin: list[float], format: Format = ...) -> None"
                                },
                                "__getitem__": {
                                    "type": "func",
                                    "name": "__getitem__",
                                    "doc": {
                                        "brief": "Subscript operator",
                                        "maixpy": "maix.image.Histogram.__getitem__",
                                        "py_doc": "Subscript operator"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "index",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int&",
                                    "static": false,
                                    "def": "int &__getitem__(int index)",
                                    "py_def": "def __getitem__(self, index: int) -> int"
                                },
                                "bins": {
                                    "type": "func",
                                    "name": "bins",
                                    "doc": {
                                        "brief": "Returns a list of floats for the grayscale histogram.",
                                        "maixpy": "maix.image.Histogram.bins",
                                        "py_doc": "Returns a list of floats for the grayscale histogram."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<float>",
                                    "static": false,
                                    "def": "std::vector<float> bins()",
                                    "py_def": "def bins(self) -> list[float]"
                                },
                                "l_bins": {
                                    "type": "func",
                                    "name": "l_bins",
                                    "doc": {
                                        "brief": "Returns a list of floats for the RGB565 histogram LAB L channel.",
                                        "maixpy": "maix.image.Histogram.l_bins",
                                        "py_doc": "Returns a list of floats for the RGB565 histogram LAB L channel."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<float>",
                                    "static": false,
                                    "def": "std::vector<float> l_bins()",
                                    "py_def": "def l_bins(self) -> list[float]"
                                },
                                "a_bins": {
                                    "type": "func",
                                    "name": "a_bins",
                                    "doc": {
                                        "brief": "Returns a list of floats for the RGB565 histogram LAB A channel.",
                                        "maixpy": "maix.image.Histogram.a_bins",
                                        "py_doc": "Returns a list of floats for the RGB565 histogram LAB A channel."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<float>",
                                    "static": false,
                                    "def": "std::vector<float> a_bins()",
                                    "py_def": "def a_bins(self) -> list[float]"
                                },
                                "b_bins": {
                                    "type": "func",
                                    "name": "b_bins",
                                    "doc": {
                                        "brief": "Returns a list of floats for the RGB565 histogram LAB B channel.",
                                        "maixpy": "maix.image.Histogram.b_bins",
                                        "py_doc": "Returns a list of floats for the RGB565 histogram LAB B channel."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<float>",
                                    "static": false,
                                    "def": "std::vector<float> b_bins()",
                                    "py_def": "def b_bins(self) -> list[float]"
                                },
                                "get_percentile": {
                                    "type": "func",
                                    "name": "get_percentile",
                                    "doc": {
                                        "brief": "Computes the CDF of the histogram channels and returns a image::Percentile object",
                                        "param": {
                                            "percentile": "the values of the histogram at the passed in percentile (0.0 - 1.0) (float).\nSo, if you pass in 0.1 this method will tell you (going from left-to-right in the histogram)\nwhat bin when summed into an accumulator caused the accumulator to cross 0.1. This is useful\nto determine min (with 0.1) and max (with 0.9) of a color distribution without outlier effects\nruining your results for adaptive color tracking."
                                        },
                                        "return": "image::Percentile object",
                                        "maixpy": "maix.image.Histogram.get_percentile",
                                        "py_doc": "Computes the CDF of the histogram channels and returns a image::Percentile object\n\nArgs:\n  - percentile: the values of the histogram at the passed in percentile (0.0 - 1.0) (float).\nSo, if you pass in 0.1 this method will tell you (going from left-to-right in the histogram)\nwhat bin when summed into an accumulator caused the accumulator to cross 0.1. This is useful\nto determine min (with 0.1) and max (with 0.9) of a color distribution without outlier effects\nruining your results for adaptive color tracking.\n\n\nReturns: image::Percentile object\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "percentile",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Percentile",
                                    "static": false,
                                    "def": "image::Percentile get_percentile(float percentile)",
                                    "py_def": "def get_percentile(self, percentile: float) -> Percentile"
                                },
                                "get_threshold": {
                                    "type": "func",
                                    "name": "get_threshold",
                                    "doc": {
                                        "brief": "Uses Otsu\u2019s Method to compute the optimal threshold values that split the histogram into two halves for each channel of the histogram and returns a image::Threshold object.",
                                        "return": "image::Threshold object",
                                        "maixpy": "maix.image.Histogram.get_threshold",
                                        "py_doc": "Uses Otsu\u2019s Method to compute the optimal threshold values that split the histogram into two halves for each channel of the histogram and returns a image::Threshold object.\n\nReturns: image::Threshold object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Threshold",
                                    "static": false,
                                    "def": "image::Threshold get_threshold()",
                                    "py_def": "def get_threshold(self) -> Threshold"
                                },
                                "get_statistics": {
                                    "type": "func",
                                    "name": "get_statistics",
                                    "doc": {
                                        "brief": "Computes the mean, median, mode, standard deviation, min, max, lower quartile, and upper quartile of each color channel in the histogram and returns a image::Statistics object.",
                                        "return": "image::Statistics object",
                                        "maixpy": "maix.image.Histogram.get_statistics",
                                        "py_doc": "Computes the mean, median, mode, standard deviation, min, max, lower quartile, and upper quartile of each color channel in the histogram and returns a image::Statistics object.\n\nReturns: image::Statistics object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Statistics",
                                    "static": false,
                                    "def": "image::Statistics get_statistics()",
                                    "py_def": "def get_statistics(self) -> Statistics"
                                }
                            },
                            "def": "class Histogram"
                        },
                        "LBPKeyPoint": {
                            "type": "class",
                            "name": "LBPKeyPoint",
                            "doc": {
                                "brief": "LBPKeyPoint class",
                                "maixpy": "maix.image.LBPKeyPoint",
                                "py_doc": "LBPKeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "LBPKeyPoint",
                                    "doc": {
                                        "brief": "LBPKeyPoint constructor",
                                        "param": {
                                            "data": "The data of the LBPKeyPoint"
                                        },
                                        "maixpy": "maix.image.LBPKeyPoint.__init__",
                                        "py_doc": "LBPKeyPoint constructor\n\nArgs:\n  - data: The data of the LBPKeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "std::valarray<uint8_t> &",
                                            "data",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "LBPKeyPoint(std::valarray<uint8_t> &data)",
                                    "py_def": "def __init__(self, data: list[int]) -> None"
                                }
                            },
                            "def": "class LBPKeyPoint"
                        },
                        "KeyPoint": {
                            "type": "class",
                            "name": "KeyPoint",
                            "doc": {
                                "brief": "KeyPoint class",
                                "maixpy": "maix.image.KeyPoint",
                                "py_doc": "KeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "KeyPoint",
                                    "doc": {
                                        "brief": "KeyPoint constructor",
                                        "param": {
                                            "x": "The x of the KeyPoint",
                                            "y": "The y of the KeyPoint",
                                            "score": "The score of the KeyPoint",
                                            "octave": "The octave of the KeyPoint",
                                            "angle": "The angle of the KeyPoint",
                                            "matched": "The matched of the KeyPoint",
                                            "desc": "The desc of the KeyPoint"
                                        },
                                        "maixpy": "maix.image.KeyPoint.__init__",
                                        "py_doc": "KeyPoint constructor\n\nArgs:\n  - x: The x of the KeyPoint\n  - y: The y of the KeyPoint\n  - score: The score of the KeyPoint\n  - octave: The octave of the KeyPoint\n  - angle: The angle of the KeyPoint\n  - matched: The matched of the KeyPoint\n  - desc: The desc of the KeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "uint16_t",
                                            "x",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "y",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "score",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "octave",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "matched",
                                            null
                                        ],
                                        [
                                            "std::vector<uint8_t> &",
                                            "desc",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "KeyPoint(uint16_t x, uint16_t y, uint16_t score, uint16_t octave, uint16_t angle, uint16_t matched, std::vector<uint8_t> &desc)",
                                    "py_def": "def __init__(self, x: int, y: int, score: int, octave: int, angle: int, matched: int, desc: list[int]) -> None"
                                }
                            },
                            "def": "class KeyPoint"
                        },
                        "KPTMatch": {
                            "type": "class",
                            "name": "KPTMatch",
                            "doc": {
                                "brief": "KPTMatch class",
                                "maixpy": "maix.image.KPTMatch",
                                "py_doc": "KPTMatch class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "KPTMatch",
                                    "doc": {
                                        "brief": "KPTMatch constructor",
                                        "param": {
                                            "cx": "The cx of the KPTMatch",
                                            "cy": "The cy of the KPTMatch",
                                            "x": "The x of the KPTMatch",
                                            "y": "The y of the KPTMatch",
                                            "w": "The w of the KPTMatch",
                                            "h": "The h of the KPTMatch",
                                            "score": "The score of the KPTMatch",
                                            "theta": "The theta of the KPTMatch",
                                            "match": "The match of the KPTMatch"
                                        },
                                        "maixpy": "maix.image.KPTMatch.__init__",
                                        "py_doc": "KPTMatch constructor\n\nArgs:\n  - cx: The cx of the KPTMatch\n  - cy: The cy of the KPTMatch\n  - x: The x of the KPTMatch\n  - y: The y of the KPTMatch\n  - w: The w of the KPTMatch\n  - h: The h of the KPTMatch\n  - score: The score of the KPTMatch\n  - theta: The theta of the KPTMatch\n  - match: The match of the KPTMatch\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "cx",
                                            null
                                        ],
                                        [
                                            "int",
                                            "cy",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "int",
                                            "score",
                                            null
                                        ],
                                        [
                                            "int",
                                            "theta",
                                            null
                                        ],
                                        [
                                            "int",
                                            "match",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "KPTMatch(int cx, int cy, int x, int y, int w, int h, int score, int theta, int match)",
                                    "py_def": "def __init__(self, cx: int, cy: int, x: int, y: int, w: int, h: int, score: int, theta: int, match: int) -> None"
                                }
                            },
                            "def": "class KPTMatch"
                        },
                        "ORBKeyPoint": {
                            "type": "class",
                            "name": "ORBKeyPoint",
                            "doc": {
                                "brief": "ORBKeyPoint class",
                                "maixpy": "maix.image.ORBKeyPoint",
                                "py_doc": "ORBKeyPoint class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "ORBKeyPoint",
                                    "doc": {
                                        "brief": "ORBKeyPoint constructor",
                                        "param": {
                                            "data": "The data of the ORBKeyPoint",
                                            "threshold": "The threshold of the ORBKeyPoint",
                                            "normalized": "The normalized of the ORBKeyPoint"
                                        },
                                        "maixpy": "maix.image.ORBKeyPoint.__init__",
                                        "py_doc": "ORBKeyPoint constructor\n\nArgs:\n  - data: The data of the ORBKeyPoint\n  - threshold: The threshold of the ORBKeyPoint\n  - normalized: The normalized of the ORBKeyPoint\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<image::KeyPoint> &",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "normalized",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "ORBKeyPoint(std::vector<image::KeyPoint> &data, int threshold, bool normalized)",
                                    "py_def": "def __init__(self, data: list[KeyPoint], threshold: int, normalized: bool) -> None"
                                },
                                "get_data": {
                                    "type": "func",
                                    "name": "get_data",
                                    "doc": {
                                        "brief": "get data of ORBKeyPoint",
                                        "return": "return data of the ORBKeyPoint, type is std::vector<KeyPoint>",
                                        "maixpy": "maix.image.ORBKeyPoint.get_data",
                                        "py_doc": "get data of ORBKeyPoint\n\nReturns: return data of the ORBKeyPoint, type is std::vector<KeyPoint>\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<image::KeyPoint>",
                                    "static": false,
                                    "def": "std::vector<image::KeyPoint> get_data()",
                                    "py_def": "def get_data(self) -> list[KeyPoint]"
                                }
                            },
                            "def": "class ORBKeyPoint"
                        },
                        "HaarCascade": {
                            "type": "class",
                            "name": "HaarCascade",
                            "doc": {
                                "brief": "HaarCascade class",
                                "maixpy": "maix.image.HaarCascade",
                                "py_doc": "HaarCascade class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "HaarCascade",
                                    "doc": {
                                        "brief": "HaarCascade constructor",
                                        "param": {
                                            "data": "The data of the HaarCascade",
                                            "threshold": "The threshold of the HaarCascade",
                                            "normalized": "The normalized of the HaarCascade"
                                        },
                                        "maixpy": "maix.image.HaarCascade.__init__",
                                        "py_doc": "HaarCascade constructor\n\nArgs:\n  - data: The data of the HaarCascade\n  - threshold: The threshold of the HaarCascade\n  - normalized: The normalized of the HaarCascade\n"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "HaarCascade()",
                                    "py_def": "def __init__(self) -> None"
                                }
                            },
                            "def": "class HaarCascade"
                        },
                        "Color": {
                            "type": "class",
                            "name": "Color",
                            "doc": {
                                "brief": "Color class",
                                "maixpy": "maix.image.Color",
                                "py_doc": "Color class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Color",
                                    "doc": {
                                        "brief": "Color constructor",
                                        "param": {
                                            "alpha": "alpha channel, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.__init__",
                                        "py_doc": "Color constructor\n\nArgs:\n  - alpha: alpha channel, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "ch1",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "ch2",
                                            "0"
                                        ],
                                        [
                                            "uint8_t",
                                            "ch3",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            "0"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_GRAYSCALE"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Color(uint8_t ch1, uint8_t ch2 = 0, uint8_t ch3 = 0, float alpha = 0, image::Format format = image::FMT_GRAYSCALE)",
                                    "py_def": "def __init__(self, ch1: int, ch2: int = 0, ch3: int = 0, alpha: float = 0, format: Format = ...) -> None"
                                },
                                "r": {
                                    "type": "var",
                                    "name": "r",
                                    "doc": {
                                        "brief": "Color red channel",
                                        "maixpy": "maix.image.Color.r",
                                        "py_doc": "Color red channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t r"
                                },
                                "g": {
                                    "type": "var",
                                    "name": "g",
                                    "doc": {
                                        "brief": "Color green channel",
                                        "maixpy": "maix.image.Color.g",
                                        "py_doc": "Color green channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t g"
                                },
                                "b": {
                                    "type": "var",
                                    "name": "b",
                                    "doc": {
                                        "brief": "Color blue channel",
                                        "maixpy": "maix.image.Color.b",
                                        "py_doc": "Color blue channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t b"
                                },
                                "alpha": {
                                    "type": "var",
                                    "name": "alpha",
                                    "doc": {
                                        "brief": "Color alpha channel, value from 0.0 to 1.0, float value",
                                        "maixpy": "maix.image.Color.alpha",
                                        "py_doc": "Color alpha channel, value from 0.0 to 1.0, float value"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float alpha"
                                },
                                "gray": {
                                    "type": "var",
                                    "name": "gray",
                                    "doc": {
                                        "brief": "Color gray channel",
                                        "maixpy": "maix.image.Color.gray",
                                        "py_doc": "Color gray channel"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t gray"
                                },
                                "format": {
                                    "type": "var",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Color format",
                                        "maixpy": "maix.image.Color.format",
                                        "py_doc": "Color format"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "image::Format format"
                                },
                                "hex": {
                                    "type": "func",
                                    "name": "hex",
                                    "doc": {
                                        "brief": "Get color's hex value",
                                        "maixpy": "maix.image.Color.hex",
                                        "py_doc": "Get color's hex value"
                                    },
                                    "args": [],
                                    "ret_type": "uint32_t",
                                    "static": false,
                                    "def": "uint32_t hex()",
                                    "py_def": "def hex(self) -> int"
                                },
                                "from_rgb": {
                                    "type": "func",
                                    "name": "from_rgb",
                                    "doc": {
                                        "brief": "Create Color object from RGB channels",
                                        "maixpy": "maix.image.Color.from_rgb",
                                        "py_doc": "Create Color object from RGB channels"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_rgb(uint8_t r, uint8_t g, uint8_t b)",
                                    "py_def": "def from_rgb(r: int, g: int, b: int) -> Color"
                                },
                                "from_bgr": {
                                    "type": "func",
                                    "name": "from_bgr",
                                    "doc": {
                                        "brief": "Create Color object from BGR channels",
                                        "maixpy": "maix.image.Color.from_bgr",
                                        "py_doc": "Create Color object from BGR channels"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_bgr(uint8_t b, uint8_t g, uint8_t r)",
                                    "py_def": "def from_bgr(b: int, g: int, r: int) -> Color"
                                },
                                "from_gray": {
                                    "type": "func",
                                    "name": "from_gray",
                                    "doc": {
                                        "brief": "Create Color object from gray channel",
                                        "maixpy": "maix.image.Color.from_gray",
                                        "py_doc": "Create Color object from gray channel"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "gray",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_gray(uint8_t gray)",
                                    "py_def": "def from_gray(gray: int) -> Color"
                                },
                                "from_rgba": {
                                    "type": "func",
                                    "name": "from_rgba",
                                    "doc": {
                                        "brief": "Create Color object from RGBA channels",
                                        "param": {
                                            "alpha": "alpha channel, float value, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.from_rgba",
                                        "py_doc": "Create Color object from RGBA channels\n\nArgs:\n  - alpha: alpha channel, float value, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_rgba(uint8_t r, uint8_t g, uint8_t b, float alpha)",
                                    "py_def": "def from_rgba(r: int, g: int, b: int, alpha: float) -> Color"
                                },
                                "from_bgra": {
                                    "type": "func",
                                    "name": "from_bgra",
                                    "doc": {
                                        "brief": "Create Color object from BGRA channels",
                                        "param": {
                                            "alpha": "alpha channel, float value, value range: 0 ~ 1"
                                        },
                                        "maixpy": "maix.image.Color.from_bgra",
                                        "py_doc": "Create Color object from BGRA channels\n\nArgs:\n  - alpha: alpha channel, float value, value range: 0 ~ 1\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "b",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "g",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "r",
                                            null
                                        ],
                                        [
                                            "float",
                                            "alpha",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_bgra(uint8_t b, uint8_t g, uint8_t r, float alpha)",
                                    "py_def": "def from_bgra(b: int, g: int, r: int, alpha: float) -> Color"
                                },
                                "from_hex": {
                                    "type": "func",
                                    "name": "from_hex",
                                    "doc": {
                                        "brief": "Create Color object from hex value",
                                        "param": {
                                            "hex": "hex value, e.g. 0x0000FF00, lower address if first channel",
                                            "format": "color format, @see image::Format"
                                        },
                                        "maixpy": "maix.image.Color.from_hex",
                                        "py_doc": "Create Color object from hex value\n\nArgs:\n  - hex: hex value, e.g. 0x0000FF00, lower address if first channel\n  - format: color format, @see image::Format\n"
                                    },
                                    "args": [
                                        [
                                            "uint32_t",
                                            "hex",
                                            null
                                        ],
                                        [
                                            "image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color",
                                    "static": true,
                                    "def": "static image::Color from_hex(uint32_t hex, image::Format &format)",
                                    "py_def": "def from_hex(hex: int, format: Format) -> Color"
                                },
                                "to_format": {
                                    "type": "func",
                                    "name": "to_format",
                                    "doc": {
                                        "brief": "Convert Color format",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE."
                                        },
                                        "maixpy": "maix.image.Color.to_format",
                                        "py_doc": "Convert Color format\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void to_format(const image::Format &format)",
                                    "py_def": "def to_format(self, format: Format) -> None"
                                },
                                "to_format2": {
                                    "type": "func",
                                    "name": "to_format2",
                                    "doc": {
                                        "brief": "Convert color format and return a new Color object",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE."
                                        },
                                        "return": "new Color object, you need to delete it manually in C++.",
                                        "maixpy": "maix.image.Color.to_format2",
                                        "py_doc": "Convert color format and return a new Color object\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE.\n\n\nReturns: new Color object, you need to delete it manually in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Color*",
                                    "static": false,
                                    "def": "image::Color *to_format2(const image::Format &format)",
                                    "py_def": "def to_format2(self, format: Format) -> Color"
                                }
                            },
                            "def": "class Color"
                        },
                        "COLOR_WHITE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color white",
                                "maixpy": "maix.image.COLOR_WHITE",
                                "py_doc": "Predefined color white"
                            },
                            "value": "image::Color::from_rgb(255, 255, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_WHITE = image::Color::from_rgb(255, 255, 255)"
                        },
                        "COLOR_BLACK": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color black",
                                "maixpy": "maix.image.COLOR_BLACK",
                                "py_doc": "Predefined color black"
                            },
                            "value": "image::Color::from_rgb(0, 0, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_BLACK = image::Color::from_rgb(0, 0, 0)"
                        },
                        "COLOR_RED": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color red",
                                "maixpy": "maix.image.COLOR_RED",
                                "py_doc": "Predefined color red"
                            },
                            "value": "image::Color::from_rgb(255, 0, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_RED = image::Color::from_rgb(255, 0, 0)"
                        },
                        "COLOR_GREEN": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color green",
                                "maixpy": "maix.image.COLOR_GREEN",
                                "py_doc": "Predefined color green"
                            },
                            "value": "image::Color::from_rgb(0, 255, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_GREEN = image::Color::from_rgb(0, 255, 0)"
                        },
                        "COLOR_BLUE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color blue",
                                "maixpy": "maix.image.COLOR_BLUE",
                                "py_doc": "Predefined color blue"
                            },
                            "value": "image::Color::from_rgb(0, 0, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_BLUE = image::Color::from_rgb(0, 0, 255)"
                        },
                        "COLOR_YELLOW": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color yellow",
                                "maixpy": "maix.image.COLOR_YELLOW",
                                "py_doc": "Predefined color yellow"
                            },
                            "value": "image::Color::from_rgb(255, 255, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_YELLOW = image::Color::from_rgb(255, 255, 0)"
                        },
                        "COLOR_PURPLE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color purple",
                                "maixpy": "maix.image.COLOR_PURPLE",
                                "py_doc": "Predefined color purple"
                            },
                            "value": "image::Color::from_rgb(143, 0, 255)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_PURPLE = image::Color::from_rgb(143, 0, 255)"
                        },
                        "COLOR_ORANGE": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color orange",
                                "maixpy": "maix.image.COLOR_ORANGE",
                                "py_doc": "Predefined color orange"
                            },
                            "value": "image::Color::from_rgb(255, 127, 0)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_ORANGE = image::Color::from_rgb(255, 127, 0)"
                        },
                        "COLOR_GRAY": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Predefined color gray",
                                "maixpy": "maix.image.COLOR_GRAY",
                                "py_doc": "Predefined color gray"
                            },
                            "value": "image::Color::from_rgb(127, 127, 127)",
                            "static": false,
                            "readonly": true,
                            "def": "const image::Color COLOR_GRAY = image::Color::from_rgb(127, 127, 127)"
                        },
                        "resize_map_pos": {
                            "type": "func",
                            "name": "resize_map_pos",
                            "doc": {
                                "brief": "map point position or rectangle position from one image size to another image size(resize)",
                                "param": {
                                    "int": "h_out target image height",
                                    "fit": "resize method, see maix.image.Fit",
                                    "x": "original point x, or rectagle left-top point's x",
                                    "y": "original point y, or rectagle left-top point's y",
                                    "w": "original rectagle width, can be -1 if not use this arg, default -1.",
                                    "h": "original rectagle height, can be -1 if not use this arg, default -1."
                                },
                                "return": "list type, [x, y] if map point, [x, y, w, h] if resize rectangle.",
                                "maixpy": "maix.image.resize_map_pos",
                                "py_doc": "map point position or rectangle position from one image size to another image size(resize)\n\nArgs:\n  - int: h_out target image height\n  - fit: resize method, see maix.image.Fit\n  - x: original point x, or rectagle left-top point's x\n  - y: original point y, or rectagle left-top point's y\n  - w: original rectagle width, can be -1 if not use this arg, default -1.\n  - h: original rectagle height, can be -1 if not use this arg, default -1.\n\n\nReturns: list type, [x, y] if map point, [x, y, w, h] if resize rectangle.\n"
                            },
                            "args": [
                                [
                                    "int",
                                    "w_in",
                                    null
                                ],
                                [
                                    "int",
                                    "h_in",
                                    null
                                ],
                                [
                                    "int",
                                    "w_out",
                                    null
                                ],
                                [
                                    "int",
                                    "h_out",
                                    null
                                ],
                                [
                                    "image::Fit",
                                    "fit",
                                    null
                                ],
                                [
                                    "int",
                                    "x",
                                    null
                                ],
                                [
                                    "int",
                                    "y",
                                    null
                                ],
                                [
                                    "int",
                                    "w",
                                    "-1"
                                ],
                                [
                                    "int",
                                    "h",
                                    "-1"
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> resize_map_pos(int w_in, int h_in, int w_out, int h_out, image::Fit fit, int x, int y, int w = -1, int h = -1)",
                            "overload": [
                                {
                                    "type": "func",
                                    "name": "resize_map_pos",
                                    "doc": {
                                        "brief": "map point position or rectangle position from this image size to another image size(resize)",
                                        "param": {
                                            "int": "h_out target image height",
                                            "fit": "resize method, see maix.image.Fit",
                                            "x": "original point x, or rectagle left-top point's x",
                                            "y": "original point y, or rectagle left-top point's y",
                                            "w": "original rectagle width, can be -1 if not use this arg, default -1.",
                                            "h": "original rectagle height, can be -1 if not use this arg, default -1."
                                        },
                                        "return": "list type, [x, y] if map point, [x, y, w, h] if resize rectangle.",
                                        "maixpy": "maix.image.resize_map_pos",
                                        "py_doc": "map point position or rectangle position from this image size to another image size(resize)\n\nArgs:\n  - int: h_out target image height\n  - fit: resize method, see maix.image.Fit\n  - x: original point x, or rectagle left-top point's x\n  - y: original point y, or rectagle left-top point's y\n  - w: original rectagle width, can be -1 if not use this arg, default -1.\n  - h: original rectagle height, can be -1 if not use this arg, default -1.\n\n\nReturns: list type, [x, y] if map point, [x, y, w, h] if resize rectangle.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "w_out",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h_out",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> resize_map_pos(int w_out, int h_out, image::Fit fit, int x, int y, int w = -1, int h = -1)"
                                }
                            ],
                            "py_def": "def resize_map_pos(w_in: int, h_in: int, w_out: int, h_out: int, fit: Fit, x: int, y: int, w: int = -1, h: int = -1) -> list[int]"
                        },
                        "resize_map_pos_reverse": {
                            "type": "func",
                            "name": "resize_map_pos_reverse",
                            "doc": {
                                "brief": "reverse resize_map_pos method, when we call image.resize method resiz image 'a' to image 'b', we want to known the original position on 'a' whith a knew point on 'b'",
                                "param": {
                                    "int": "h_out image height after resized",
                                    "fit": "resize method, see maix.image.Fit",
                                    "x": "point on resized image x, or rectagle left-top point's x",
                                    "y": "original point y, or rectagle left-top point's y",
                                    "w": "original rectagle width, can be -1 if not use this arg, default -1.",
                                    "h": "original rectagle height, can be -1 if not use this arg, default -1."
                                },
                                "return": "list type, [x, y] if map point, [x, y, w, h] if resize rectangle.",
                                "maixpy": "maix.image.resize_map_pos_reverse",
                                "py_doc": "reverse resize_map_pos method, when we call image.resize method resiz image 'a' to image 'b', we want to known the original position on 'a' whith a knew point on 'b'\n\nArgs:\n  - int: h_out image height after resized\n  - fit: resize method, see maix.image.Fit\n  - x: point on resized image x, or rectagle left-top point's x\n  - y: original point y, or rectagle left-top point's y\n  - w: original rectagle width, can be -1 if not use this arg, default -1.\n  - h: original rectagle height, can be -1 if not use this arg, default -1.\n\n\nReturns: list type, [x, y] if map point, [x, y, w, h] if resize rectangle.\n"
                            },
                            "args": [
                                [
                                    "int",
                                    "w_in",
                                    null
                                ],
                                [
                                    "int",
                                    "h_in",
                                    null
                                ],
                                [
                                    "int",
                                    "w_out",
                                    null
                                ],
                                [
                                    "int",
                                    "h_out",
                                    null
                                ],
                                [
                                    "image::Fit",
                                    "fit",
                                    null
                                ],
                                [
                                    "int",
                                    "x",
                                    null
                                ],
                                [
                                    "int",
                                    "y",
                                    null
                                ],
                                [
                                    "int",
                                    "w",
                                    "-1"
                                ],
                                [
                                    "int",
                                    "h",
                                    "-1"
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> resize_map_pos_reverse(int w_in, int h_in, int w_out, int h_out, image::Fit fit, int x, int y, int w = -1, int h = -1)",
                            "py_def": "def resize_map_pos_reverse(w_in: int, h_in: int, w_out: int, h_out: int, fit: Fit, x: int, y: int, w: int = -1, h: int = -1) -> list[int]"
                        },
                        "Image": {
                            "type": "class",
                            "name": "Image",
                            "doc": {
                                "brief": "Image class",
                                "maixpy": "maix.image.Image",
                                "py_doc": "Image class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Image",
                                    "doc": {
                                        "brief": "Image constructor",
                                        "param": {
                                            "width": "image width, should > 0",
                                            "height": "image height, should > 0",
                                            "format": "image format @see image::Format"
                                        },
                                        "maixpy": "maix.image.Image.__init__",
                                        "maixcdk": "maix.image.Image.Image",
                                        "py_doc": "Image constructor\n\nArgs:\n  - width: image width, should > 0\n  - height: image height, should > 0\n  - format: image format @see image::Format\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_RGB888"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Image(int width, int height, image::Format format = image::Format::FMT_RGB888)",
                                    "py_def": "def __init__(self, width: int, height: int, format: Format = ...) -> None"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get image's format",
                                        "see": "image.Format",
                                        "maixpy": "maix.image.Image.format",
                                        "py_doc": "Get image's format"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()",
                                    "py_def": "def format(self) -> Format"
                                },
                                "size": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get image's size, [width, height]",
                                        "maixpy": "maix.image.Image.size",
                                        "py_doc": "Get image's size, [width, height]"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size size()",
                                    "py_def": "def size(self) -> Size"
                                },
                                "data_size": {
                                    "type": "func",
                                    "name": "data_size",
                                    "doc": {
                                        "brief": "Get image's data size",
                                        "maixpy": "maix.image.Image.data_size",
                                        "py_doc": "Get image's data size"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int data_size()",
                                    "py_def": "def data_size(self) -> int"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get image's width",
                                        "maixpy": "maix.image.Image.width",
                                        "py_doc": "Get image's width"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get image's height",
                                        "maixpy": "maix.image.Image.height",
                                        "py_doc": "Get image's height"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                },
                                "data": {
                                    "type": "func",
                                    "name": "data",
                                    "doc": {
                                        "brief": "Get image's data pointer.\\nIn MaixPy is capsule object.",
                                        "maixpy": "maix.image.Image.data",
                                        "py_doc": "Get image's data pointer.\nIn MaixPy is capsule object."
                                    },
                                    "args": [],
                                    "ret_type": "void*",
                                    "static": false,
                                    "def": "void *data()",
                                    "py_def": "def data(self) -> capsule"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string method",
                                        "maixpy": "maix.image.Image.__str__",
                                        "py_doc": "To string method"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string method",
                                        "maixpy": "maix.image.Image.to_str",
                                        "py_doc": "To string method"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def to_str(self) -> str"
                                },
                                "get_pixel": {
                                    "type": "func",
                                    "name": "get_pixel",
                                    "doc": {
                                        "brief": "Get pixel of image",
                                        "param": {
                                            "x": "pixel's coordinate x. x must less than image's width",
                                            "y": "pixel's coordinate y. y must less than image's height",
                                            "rgbtuple": "switch return value method. rgbtuple decides whether to split the return or not. default is false."
                                        },
                                        "return": "pixel value,\nAccording to image format and rgbtuple, return different value:\nformat is FMT_RGB888, rgbtuple is true, return [R, G, B]; rgbtuple is false, return [RGB]\nforamt is FMT_BGR888, rgbtuple is true, return [B, G, R]; rgbtuple is false, return [BGR]\nformat is FMT_GRAYSCALE, return [GRAY];",
                                        "maixpy": "maix.image.Image.get_pixel",
                                        "py_doc": "Get pixel of image\n\nArgs:\n  - x: pixel's coordinate x. x must less than image's width\n  - y: pixel's coordinate y. y must less than image's height\n  - rgbtuple: switch return value method. rgbtuple decides whether to split the return or not. default is false.\n\n\nReturns: pixel value,\nAccording to image format and rgbtuple, return different value:\nformat is FMT_RGB888, rgbtuple is true, return [R, G, B]; rgbtuple is false, return [RGB]\nforamt is FMT_BGR888, rgbtuple is true, return [B, G, R]; rgbtuple is false, return [BGR]\nformat is FMT_GRAYSCALE, return [GRAY];\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "rgbtuple",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> get_pixel(int x, int y, bool rgbtuple = false)",
                                    "py_def": "def get_pixel(self, x: int, y: int, rgbtuple: bool = False) -> list[int]"
                                },
                                "set_pixel": {
                                    "type": "func",
                                    "name": "set_pixel",
                                    "doc": {
                                        "brief": "Set pixel of image",
                                        "param": {
                                            "x": "pixel's coordinate x. x must less than image's width",
                                            "y": "pixel's coordinate y. y must less than image's height",
                                            "pixel": "pixel value, according to image format and size of pixel, has different operation:\nformat is FMT_RGB888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [R, G, B]; if size is 3, will use pixel directly\nformat is FMT_BGR888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [B, G, R]; if size is 3, will use pixel directly\nformat is FMT_GRAYSCALE, pixel size must be 1, will use pixel directly"
                                        },
                                        "return": "error code, Err::ERR_NONE is ok, other is error",
                                        "maixpy": "maix.image.Image.set_pixel",
                                        "py_doc": "Set pixel of image\n\nArgs:\n  - x: pixel's coordinate x. x must less than image's width\n  - y: pixel's coordinate y. y must less than image's height\n  - pixel: pixel value, according to image format and size of pixel, has different operation:\nformat is FMT_RGB888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [R, G, B]; if size is 3, will use pixel directly\nformat is FMT_BGR888, pixel size must be 1 or 3, if size is 1, will split pixel[0] to [B, G, R]; if size is 3, will use pixel directly\nformat is FMT_GRAYSCALE, pixel size must be 1, will use pixel directly\n\n\nReturns: error code, Err::ERR_NONE is ok, other is error\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "pixel",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_pixel(int x, int y, std::vector<int> pixel)",
                                    "py_def": "def set_pixel(self, x: int, y: int, pixel: list[int]) -> maix.err.Err"
                                },
                                "to_tensor": {
                                    "type": "func",
                                    "name": "to_tensor",
                                    "doc": {
                                        "brief": "Convert Image object to tensor::Tensor object",
                                        "param": {
                                            "chw": "if true, the shape of tensor is [C, H, W], else [H, W, C]",
                                            "copy": "if true, will alloc memory for tensor data, else will use the memory of Image object"
                                        },
                                        "return": "tensor::Tensor object pointer, an allocated tensor object",
                                        "maixpy": "maix.image.Image.to_tensor",
                                        "py_doc": "Convert Image object to tensor::Tensor object\n\nArgs:\n  - chw: if true, the shape of tensor is [C, H, W], else [H, W, C]\n  - copy: if true, will alloc memory for tensor data, else will use the memory of Image object\n\n\nReturns: tensor::Tensor object pointer, an allocated tensor object\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "chw",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *to_tensor(bool chw = false, bool copy = true)",
                                    "py_def": "def to_tensor(self, chw: bool = False, copy: bool = True) -> maix.tensor.Tensor"
                                },
                                "to_bytes": {
                                    "type": "func",
                                    "name": "to_bytes",
                                    "doc": {
                                        "brief": "Get image's data and convert to array bytes",
                                        "param": {
                                            "copy": "if true, will alloc memory and copy data to new buffer,\nelse will use the memory of Image object, delete bytes object will not affect Image object\uff0c\nbut delete Image object will make bytes object invalid, it may cause program crash !!!!\nSo use this param carefully."
                                        },
                                        "return": "image's data bytes, need be delete by caller in C++.",
                                        "maixpy": "maix.image.Image.to_bytes",
                                        "py_doc": "Get image's data and convert to array bytes\n\nArgs:\n  - copy: if true, will alloc memory and copy data to new buffer,\nelse will use the memory of Image object, delete bytes object will not affect Image object\uff0c\nbut delete Image object will make bytes object invalid, it may cause program crash !!!!\nSo use this param carefully.\n\n\nReturns: image's data bytes, need be delete by caller in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *to_bytes(bool copy = true)",
                                    "py_def": "def to_bytes(*args, **kwargs)"
                                },
                                "to_format": {
                                    "type": "func",
                                    "name": "to_format",
                                    "doc": {
                                        "brief": "Convert image to specific format",
                                        "param": {
                                            "format": "format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE, JPEG."
                                        },
                                        "return": "new image object. Need be delete by caller in C++.",
                                        "throw": "err.Exception, if two images' format not support, **or already the format**, will raise exception",
                                        "maixpy": "maix.image.Image.to_format",
                                        "py_doc": "Convert image to specific format\n\nArgs:\n  - format: format want to convert to, @see image::Format, only support RGB888, BGR888, RGBA8888, BGRA8888, GRAYSCALE, JPEG.\n\n\nReturns: new image object. Need be delete by caller in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "const image::Format &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *to_format(const image::Format &format)",
                                    "py_def": "def to_format(self, format: Format) -> Image"
                                },
                                "to_jpeg": {
                                    "type": "func",
                                    "name": "to_jpeg",
                                    "doc": {
                                        "brief": "Convert image to jpeg",
                                        "param": {
                                            "quality": "the quality of jpg, default is 95. For MaixCAM supported range is (50, 100], if <= 50 will be fixed to 51."
                                        },
                                        "return": "new image object. Need be delete by caller in C++.",
                                        "throw": "err.Exception, if two images' format not support, **or already the format**, will raise exception",
                                        "maixpy": "maix.image.Image.to_jpeg",
                                        "py_doc": "Convert image to jpeg\n\nArgs:\n  - quality: the quality of jpg, default is 95. For MaixCAM supported range is (50, 100], if <= 50 will be fixed to 51.\n\n\nReturns: new image object. Need be delete by caller in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "quality",
                                            "95"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *to_jpeg(int quality = 95)",
                                    "py_def": "def to_jpeg(self, quality: int = 95) -> Image"
                                },
                                "draw_image": {
                                    "type": "func",
                                    "name": "draw_image",
                                    "doc": {
                                        "brief": "Draw image on this image",
                                        "param": {
                                            "x": "left top corner of image point's coordinate x",
                                            "y": "left top corner of image point's coordinate y",
                                            "img": "image object to draw, the caller's channel must <= the args' channel,\ne.g. caller is RGB888, args is RGBA8888, will throw exception, but caller is RGBA8888, args is RGB888 or RGBA8888 is ok"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_image",
                                        "py_doc": "Draw image on this image\n\nArgs:\n  - x: left top corner of image point's coordinate x\n  - y: left top corner of image point's coordinate y\n  - img: image object to draw, the caller's channel must <= the args' channel,\ne.g. caller is RGB888, args is RGBA8888, will throw exception, but caller is RGBA8888, args is RGB888 or RGBA8888 is ok\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_image(int x, int y, image::Image &img)",
                                    "py_def": "def draw_image(self, x: int, y: int, img: Image) -> Image"
                                },
                                "draw_rect": {
                                    "type": "func",
                                    "name": "draw_rect",
                                    "doc": {
                                        "brief": "Fill rectangle color to image",
                                        "param": {
                                            "x": "left top corner of rectangle point's coordinate x",
                                            "y": "left top corner of rectangle point's coordinate y",
                                            "w": "rectangle width",
                                            "h": "rectangle height",
                                            "color": "rectangle color",
                                            "thickness": "rectangle thickness(line width), by default(value is 1), -1 means fill rectangle"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_rect",
                                        "py_doc": "Fill rectangle color to image\n\nArgs:\n  - x: left top corner of rectangle point's coordinate x\n  - y: left top corner of rectangle point's coordinate y\n  - w: rectangle width\n  - h: rectangle height\n  - color: rectangle color\n  - thickness: rectangle thickness(line width), by default(value is 1), -1 means fill rectangle\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_rect(int x, int y, int w, int h, const image::Color &color, int thickness = 1)",
                                    "py_def": "def draw_rect(self, x: int, y: int, w: int, h: int, color: Color, thickness: int = 1) -> Image"
                                },
                                "draw_line": {
                                    "type": "func",
                                    "name": "draw_line",
                                    "doc": {
                                        "brief": "Draw line on image",
                                        "param": {
                                            "x1": "start point's coordinate x",
                                            "y1": "start point's coordinate y",
                                            "x2": "end point's coordinate x",
                                            "y2": "end point's coordinate y",
                                            "color": "line color @see image::Color",
                                            "thickness": "line thickness(line width), by default(value is 1)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_line",
                                        "py_doc": "Draw line on image\n\nArgs:\n  - x1: start point's coordinate x\n  - y1: start point's coordinate y\n  - x2: end point's coordinate x\n  - y2: end point's coordinate y\n  - color: line color @see image::Color\n  - thickness: line thickness(line width), by default(value is 1)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y2",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_line(int x1, int y1, int x2, int y2, const image::Color &color, int thickness = 1)",
                                    "py_def": "def draw_line(self, x1: int, y1: int, x2: int, y2: int, color: Color, thickness: int = 1) -> Image"
                                },
                                "draw_circle": {
                                    "type": "func",
                                    "name": "draw_circle",
                                    "doc": {
                                        "brief": "Draw circle on image",
                                        "param": {
                                            "x": "circle center point's coordinate x",
                                            "y": "circle center point's coordinate y",
                                            "radius": "circle radius",
                                            "color": "circle color @see image::Color",
                                            "thickness": "circle thickness(line width), default -1 means fill circle"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_circle",
                                        "py_doc": "Draw circle on image\n\nArgs:\n  - x: circle center point's coordinate x\n  - y: circle center point's coordinate y\n  - radius: circle radius\n  - color: circle color @see image::Color\n  - thickness: circle thickness(line width), default -1 means fill circle\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_circle(int x, int y, int radius, const image::Color &color, int thickness = 1)",
                                    "py_def": "def draw_circle(self, x: int, y: int, radius: int, color: Color, thickness: int = 1) -> Image"
                                },
                                "draw_ellipse": {
                                    "type": "func",
                                    "name": "draw_ellipse",
                                    "doc": {
                                        "brief": "Draw ellipse on image",
                                        "param": {
                                            "x": "ellipse center point's coordinate x",
                                            "y": "ellipse center point's coordinate y",
                                            "a": "ellipse major axis length",
                                            "b": "ellipse minor axis length",
                                            "angle": "ellipse rotation angle",
                                            "start_angle": "ellipse start angle",
                                            "end_angle": "ellipse end angle",
                                            "color": "ellipse color @see image::Color",
                                            "thickness": "ellipse thickness(line width), by default(value is 1), -1 means fill ellipse"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_ellipse",
                                        "py_doc": "Draw ellipse on image\n\nArgs:\n  - x: ellipse center point's coordinate x\n  - y: ellipse center point's coordinate y\n  - a: ellipse major axis length\n  - b: ellipse minor axis length\n  - angle: ellipse rotation angle\n  - start_angle: ellipse start angle\n  - end_angle: ellipse end angle\n  - color: ellipse color @see image::Color\n  - thickness: ellipse thickness(line width), by default(value is 1), -1 means fill ellipse\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "a",
                                            null
                                        ],
                                        [
                                            "int",
                                            "b",
                                            null
                                        ],
                                        [
                                            "float",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "float",
                                            "start_angle",
                                            null
                                        ],
                                        [
                                            "float",
                                            "end_angle",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_ellipse(int x, int y, int a, int b, float angle, float start_angle, float end_angle, const image::Color &color, int thickness = 1)",
                                    "py_def": "def draw_ellipse(self, x: int, y: int, a: int, b: int, angle: float, start_angle: float, end_angle: float, color: Color, thickness: int = 1) -> Image"
                                },
                                "draw_string": {
                                    "type": "func",
                                    "name": "draw_string",
                                    "doc": {
                                        "brief": "Draw text on image",
                                        "param": {
                                            "x": "text left top point's coordinate x",
                                            "y": "text left top point's coordinate y",
                                            "string": "text content",
                                            "color": "text color @see image::Color, default is white",
                                            "scale": "font scale, by default(value is 1)",
                                            "thickness": "text thickness(line width), if negative, the glyph is filled, by default(value is -1)",
                                            "wrap": "if true, will auto wrap text to next line if text width > image width, by default(value is true)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_string",
                                        "py_doc": "Draw text on image\n\nArgs:\n  - x: text left top point's coordinate x\n  - y: text left top point's coordinate y\n  - string: text content\n  - color: text color @see image::Color, default is white\n  - scale: font scale, by default(value is 1)\n  - thickness: text thickness(line width), if negative, the glyph is filled, by default(value is -1)\n  - wrap: if true, will auto wrap text to next line if text width > image width, by default(value is true)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "textstring",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            "image::COLOR_WHITE"
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "-1"
                                        ],
                                        [
                                            "bool",
                                            "wrap",
                                            "true"
                                        ],
                                        [
                                            "int",
                                            "wrap_space",
                                            "4"
                                        ],
                                        [
                                            "const std::string &",
                                            "font",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_string(int x, int y, const std::string &textstring, const image::Color &color = image::COLOR_WHITE, float scale = 1, int thickness = -1,\n                                bool wrap = true, int wrap_space = 4, const std::string &font = \"\")",
                                    "py_def": "def draw_string(self, x: int, y: int, textstring: str, color: Color = ..., scale: float = 1, thickness: int = -1, wrap: bool = True, wrap_space: int = 4, font: str = '') -> Image"
                                },
                                "draw_cross": {
                                    "type": "func",
                                    "name": "draw_cross",
                                    "doc": {
                                        "brief": "Draw cross on image",
                                        "param": {
                                            "x": "cross center point's coordinate x",
                                            "y": "cross center point's coordinate y",
                                            "color": "cross color @see image::Color",
                                            "size": "how long the lines of the cross extend, by default(value is 5). So the line length is `2 * size + thickness`",
                                            "thickness": "cross thickness(line width), by default(value is 1)"
                                        },
                                        "maixpy": "maix.image.Image.draw_cross",
                                        "py_doc": "Draw cross on image\n\nArgs:\n  - x: cross center point's coordinate x\n  - y: cross center point's coordinate y\n  - color: cross color @see image::Color\n  - size: how long the lines of the cross extend, by default(value is 5). So the line length is `2 * size + thickness`\n  - thickness: cross thickness(line width), by default(value is 1)\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "5"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_cross(int x, int y, const image::Color &color, int size = 5, int thickness = 1)",
                                    "py_def": "def draw_cross(self, x: int, y: int, color: Color, size: int = 5, thickness: int = 1) -> Image"
                                },
                                "draw_arrow": {
                                    "type": "func",
                                    "name": "draw_arrow",
                                    "doc": {
                                        "brief": "Draw arrow on image",
                                        "param": {
                                            "x0": "start coordinate of the arrow x0",
                                            "y0": "start coordinate of the arrow y0",
                                            "x1": "end coordinate of the arrow x1",
                                            "y1": "end coordinate of the arrow y1",
                                            "color": "cross color @see image::Color",
                                            "thickness": "cross thickness(line width), by default(value is 1)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_arrow",
                                        "py_doc": "Draw arrow on image\n\nArgs:\n  - x0: start coordinate of the arrow x0\n  - y0: start coordinate of the arrow y0\n  - x1: end coordinate of the arrow x1\n  - y1: end coordinate of the arrow y1\n  - color: cross color @see image::Color\n  - thickness: cross thickness(line width), by default(value is 1)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x0",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y0",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x1",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_arrow(int x0, int y0, int x1, int y1, const image::Color &color, int thickness = 1)",
                                    "py_def": "def draw_arrow(self, x0: int, y0: int, x1: int, y1: int, color: Color, thickness: int = 1) -> Image"
                                },
                                "draw_edges": {
                                    "type": "func",
                                    "name": "draw_edges",
                                    "doc": {
                                        "brief": "Draw edges on image",
                                        "param": {
                                            "corners": "edges, [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]",
                                            "color": "edges color @see image::Color",
                                            "size": "the circle of radius size. TODO: support in the feature",
                                            "thickness": "edges thickness(line width), by default(value is 1)",
                                            "fill": "if true, will fill edges, by default(value is false)"
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_edges",
                                        "py_doc": "Draw edges on image\n\nArgs:\n  - corners: edges, [[x0, y0], [x1, y1], [x2, y2], [x3, y3]]\n  - color: edges color @see image::Color\n  - size: the circle of radius size. TODO: support in the feature\n  - thickness: edges thickness(line width), by default(value is 1)\n  - fill: if true, will fill edges, by default(value is false)\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "corners",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ],
                                        [
                                            "bool",
                                            "fill",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_edges(std::vector<std::vector<int>> corners, const image::Color &color, int size = 0, int thickness = 1, bool fill = false)",
                                    "py_def": "def draw_edges(self, corners: list[list[int]], color: Color, size: int = 0, thickness: int = 1, fill: bool = False) -> Image"
                                },
                                "draw_keypoints": {
                                    "type": "func",
                                    "name": "draw_keypoints",
                                    "doc": {
                                        "brief": "Draw keypoints on image",
                                        "param": {
                                            "keypoints": "keypoints, [x1, y1, x2, y2...] or [x, y, rotation_andle_in_degrees, x2, y2, rotation_andle_in_degrees2](TODO: rotation_andle_in_degrees support in the feature)",
                                            "color": "keypoints color @see image::Color",
                                            "size": "size of keypoints(radius)",
                                            "thickness": "keypoints thickness(line width), by default(value is -1 means fill circle)",
                                            "line_thickness": "line thickness, default 0 means not draw lines, > 0 will draw lines connect points."
                                        },
                                        "return": "this image object self",
                                        "maixpy": "maix.image.Image.draw_keypoints",
                                        "py_doc": "Draw keypoints on image\n\nArgs:\n  - keypoints: keypoints, [x1, y1, x2, y2...] or [x, y, rotation_andle_in_degrees, x2, y2, rotation_andle_in_degrees2](TODO: rotation_andle_in_degrees support in the feature)\n  - color: keypoints color @see image::Color\n  - size: size of keypoints(radius)\n  - thickness: keypoints thickness(line width), by default(value is -1 means fill circle)\n  - line_thickness: line thickness, default 0 means not draw lines, > 0 will draw lines connect points.\n\n\nReturns: this image object self\n"
                                    },
                                    "args": [
                                        [
                                            "const std::vector<int> &",
                                            "keypoints",
                                            null
                                        ],
                                        [
                                            "const image::Color &",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "4"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "line_thickness",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *draw_keypoints(const std::vector<int> &keypoints, const image::Color &color, int size = 4, int thickness = -1, int line_thickness = 0)",
                                    "py_def": "def draw_keypoints(self, keypoints: list[int], color: Color, size: int = 4, thickness: int = -1, line_thickness: int = 0) -> Image"
                                },
                                "resize": {
                                    "type": "func",
                                    "name": "resize",
                                    "doc": {
                                        "brief": "Resize image, will create a new resized image object",
                                        "param": {
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "object_fit": "fill, contain, cover, by default is fill",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "Always return a new resized image object even size not change, So in C++ you should take care of the return value to avoid memory leak.\nAnd it's better to judge whether the size has changed before calling this function to make the program more efficient.\ne.g.\nif img->width() != width || img->height() != height:\nimg = img->resize(width, height);",
                                        "maixpy": "maix.image.Image.resize",
                                        "py_doc": "Resize image, will create a new resized image object\n\nArgs:\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - object_fit: fill, contain, cover, by default is fill\n  - method: resize method, by default is bilinear\n\n\nReturns: Always return a new resized image object even size not change, So in C++ you should take care of the return value to avoid memory leak.\nAnd it's better to judge whether the size has changed before calling this function to make the program more efficient.\ne.g.\nif img->width() != width || img->height() != height:\nimg = img->resize(width, height);\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "object_fit",
                                            "image::Fit::FIT_FILL"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::NEAREST"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *resize(int width, int height, image::Fit object_fit = image::Fit::FIT_FILL, image::ResizeMethod method = image::ResizeMethod::NEAREST)",
                                    "py_def": "def resize(self, width: int, height: int, object_fit: Fit = ..., method: ResizeMethod = ...) -> Image"
                                },
                                "affine": {
                                    "type": "func",
                                    "name": "affine",
                                    "doc": {
                                        "brief": "Affine transform image, will create a new transformed image object",
                                        "param": {
                                            "src_points": "three source points, [x1, y1, x2, y2, x3, y3]",
                                            "dst_points": "three destination points, [x1, y1, x2, y2, x3, y3]",
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "new transformed image object",
                                        "maixpy": "maix.image.Image.affine",
                                        "py_doc": "Affine transform image, will create a new transformed image object\n\nArgs:\n  - src_points: three source points, [x1, y1, x2, y2, x3, y3]\n  - dst_points: three destination points, [x1, y1, x2, y2, x3, y3]\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - method: resize method, by default is bilinear\n\n\nReturns: new transformed image object\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "src_points",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "dst_points",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::BILINEAR"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *affine(std::vector<int> src_points, std::vector<int> dst_points, int width = -1, int height = -1, image::ResizeMethod method = image::ResizeMethod::BILINEAR)",
                                    "py_def": "def affine(self, src_points: list[int], dst_points: list[int], width: int = -1, height: int = -1, method: ResizeMethod = ...) -> Image"
                                },
                                "copy": {
                                    "type": "func",
                                    "name": "copy",
                                    "doc": {
                                        "brief": "Copy image, will create a new copied image object",
                                        "return": "new copied image object",
                                        "maixpy": "maix.image.Image.copy",
                                        "py_doc": "Copy image, will create a new copied image object\n\nReturns: new copied image object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *copy()",
                                    "py_def": "def copy(self) -> Image"
                                },
                                "crop": {
                                    "type": "func",
                                    "name": "crop",
                                    "doc": {
                                        "brief": "Crop image, will create a new cropped image object",
                                        "param": {
                                            "x": "left top corner of crop rectangle point's coordinate x",
                                            "y": "left top corner of crop rectangle point's coordinate y",
                                            "w": "crop rectangle width",
                                            "h": "crop rectangle height"
                                        },
                                        "return": "new cropped image object",
                                        "maixpy": "maix.image.Image.crop",
                                        "py_doc": "Crop image, will create a new cropped image object\n\nArgs:\n  - x: left top corner of crop rectangle point's coordinate x\n  - y: left top corner of crop rectangle point's coordinate y\n  - w: crop rectangle width\n  - h: crop rectangle height\n\n\nReturns: new cropped image object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *crop(int x, int y, int w, int h)",
                                    "py_def": "def crop(self, x: int, y: int, w: int, h: int) -> Image"
                                },
                                "rotate": {
                                    "type": "func",
                                    "name": "rotate",
                                    "doc": {
                                        "brief": "Rotate image, will create a new rotated image object",
                                        "param": {
                                            "angle": "anti-clock wise rotate angle, if angle is 90 or 270, and width or height is -1, will swap width and height, or will throw exception",
                                            "width": "new width, if value is -1, will use height to calculate aspect ratio",
                                            "height": "new height, if value is -1, will use width to calculate aspect ratio",
                                            "method": "resize method, by default is bilinear"
                                        },
                                        "return": "new rotated image object",
                                        "maixpy": "maix.image.Image.rotate",
                                        "py_doc": "Rotate image, will create a new rotated image object\n\nArgs:\n  - angle: anti-clock wise rotate angle, if angle is 90 or 270, and width or height is -1, will swap width and height, or will throw exception\n  - width: new width, if value is -1, will use height to calculate aspect ratio\n  - height: new height, if value is -1, will use width to calculate aspect ratio\n  - method: resize method, by default is bilinear\n\n\nReturns: new rotated image object\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "angle",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::ResizeMethod",
                                            "method",
                                            "image::ResizeMethod::BILINEAR"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *rotate(float angle, int width = -1, int height = -1, image::ResizeMethod method = image::ResizeMethod::BILINEAR)",
                                    "py_def": "def rotate(self, angle: float, width: int = -1, height: int = -1, method: ResizeMethod = ...) -> Image"
                                },
                                "mean_pool": {
                                    "type": "func",
                                    "name": "mean_pool",
                                    "doc": {
                                        "brief": "Finds the mean of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.",
                                        "param": {
                                            "x_div": "The width of the squares.",
                                            "y_div": "The height of the squares.",
                                            "copy": "Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the mean of each square; If false, returns the modified image composed of the mean of each square."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mean_pool",
                                        "py_doc": "Finds the mean of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.\n\nArgs:\n  - x_div: The width of the squares.\n  - y_div: The height of the squares.\n  - copy: Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the mean of each square; If false, returns the modified image composed of the mean of each square.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x_div",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y_div",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mean_pool(int x_div, int y_div, bool copy = false)",
                                    "py_def": "def mean_pool(self, x_div: int, y_div: int, copy: bool = False) -> Image"
                                },
                                "midpoint_pool": {
                                    "type": "func",
                                    "name": "midpoint_pool",
                                    "doc": {
                                        "brief": "Finds the midpoint of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.",
                                        "param": {
                                            "x_div": "The width of the squares.",
                                            "y_div": "The height of the squares.",
                                            "bias": "The bias of the midpoint. default is 0.5.\nmidpoint value is equal to (max * bias + min * (1 - bias))",
                                            "copy": "Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the midpoint of each square; If false, returns the modified image composed of the midpoint of each square."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.midpoint_pool",
                                        "py_doc": "Finds the midpoint of x_div * y_div squares in the image and returns the modified image composed of the mean of each square.\n\nArgs:\n  - x_div: The width of the squares.\n  - y_div: The height of the squares.\n  - bias: The bias of the midpoint. default is 0.5.\nmidpoint value is equal to (max * bias + min * (1 - bias))\n  - copy: Select whether to return a new image or modify the original image. default is false.\nIf true, returns a new image composed of the midpoint of each square; If false, returns the modified image composed of the midpoint of each square.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x_div",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y_div",
                                            null
                                        ],
                                        [
                                            "double",
                                            "bias",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *midpoint_pool(int x_div, int y_div, double bias = 0.5, bool copy = false)",
                                    "py_def": "def midpoint_pool(self, x_div: int, y_div: int, bias: float = 0.5, copy: bool = False) -> Image"
                                },
                                "compress": {
                                    "type": "func",
                                    "name": "compress",
                                    "doc": {
                                        "brief": "JPEG compresses the image in place, the same as to_jpeg functioin, it's recommend to use to_jpeg instead.",
                                        "param": {
                                            "quality": "The quality of the compressed image. default is 95."
                                        },
                                        "return": "Returns the compressed JPEG image",
                                        "maixpy": "maix.image.Image.compress",
                                        "py_doc": "JPEG compresses the image in place, the same as to_jpeg functioin, it's recommend to use to_jpeg instead.\n\nArgs:\n  - quality: The quality of the compressed image. default is 95.\n\n\nReturns: Returns the compressed JPEG image\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "quality",
                                            "95"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *compress(int quality = 95)",
                                    "py_def": "def compress(self, quality: int = 95) -> Image"
                                },
                                "clear": {
                                    "type": "func",
                                    "name": "clear",
                                    "doc": {
                                        "brief": "Sets all pixels in the image to zero",
                                        "param": {
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.clear",
                                        "py_doc": "Sets all pixels in the image to zero\n\nArgs:\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *clear(image::Image *mask = nullptr)",
                                    "py_def": "def clear(self, mask: Image = None) -> Image"
                                },
                                "mask_rectange": {
                                    "type": "func",
                                    "name": "mask_rectange",
                                    "doc": {
                                        "brief": "Zeros a rectangular part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the top left corner of the rectangle.",
                                            "y": "The y coordinate of the top left corner of the rectangle.",
                                            "w": "The width of the rectangle.",
                                            "h": "The height of the rectangle."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_rectange",
                                        "py_doc": "Zeros a rectangular part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the top left corner of the rectangle.\n  - y: The y coordinate of the top left corner of the rectangle.\n  - w: The width of the rectangle.\n  - h: The height of the rectangle.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_rectange(int x = -1, int y = -1, int w = -1, int h = -1)",
                                    "py_def": "def mask_rectange(self, x: int = -1, y: int = -1, w: int = -1, h: int = -1) -> Image"
                                },
                                "mask_circle": {
                                    "type": "func",
                                    "name": "mask_circle",
                                    "doc": {
                                        "brief": "Zeros a circular part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the center of the circle.",
                                            "y": "The y coordinate of the center of the circle.",
                                            "radius": "The radius of the circle."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_circle",
                                        "py_doc": "Zeros a circular part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the center of the circle.\n  - y: The y coordinate of the center of the circle.\n  - radius: The radius of the circle.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_circle(int x = -1, int y = -1, int radius = -1)",
                                    "py_def": "def mask_circle(self, x: int = -1, y: int = -1, radius: int = -1) -> Image"
                                },
                                "mask_ellipse": {
                                    "type": "func",
                                    "name": "mask_ellipse",
                                    "doc": {
                                        "brief": "Zeros a ellipse part of the image. If no arguments are supplied this method zeros the center of the image.",
                                        "param": {
                                            "x": "The x coordinate of the center of the ellipse.",
                                            "y": "The y coordinate of the center of the ellipse.",
                                            "radius_x": "The radius of the ellipse in the x direction.",
                                            "radius_y": "The radius of the ellipse in the y direction.",
                                            "rotation_angle_in_degrees": "The rotation angle of the ellipse in degrees."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mask_ellipse",
                                        "py_doc": "Zeros a ellipse part of the image. If no arguments are supplied this method zeros the center of the image.\n\nArgs:\n  - x: The x coordinate of the center of the ellipse.\n  - y: The y coordinate of the center of the ellipse.\n  - radius_x: The radius of the ellipse in the x direction.\n  - radius_y: The radius of the ellipse in the y direction.\n  - rotation_angle_in_degrees: The rotation angle of the ellipse in degrees.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius_x",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "radius_y",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "rotation_angle_in_degrees",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mask_ellipse(int x = -1, int y = -1, int radius_x = -1, int radius_y = -1, float rotation_angle_in_degrees = 0)",
                                    "py_def": "def mask_ellipse(self, x: int = -1, y: int = -1, radius_x: int = -1, radius_y: int = -1, rotation_angle_in_degrees: float = 0) -> Image"
                                },
                                "binary": {
                                    "type": "func",
                                    "name": "binary",
                                    "doc": {
                                        "brief": "Sets all pixels in the image to black or white depending on if the pixel is inside of a threshold in the threshold list thresholds or not.",
                                        "note": "For GRAYSCALE format, Lmin and Lmax range is [0, 255]. For RGB888 format, Lmin and Lmax range is [0, 100].",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the thresholds will be inverted before the operation. default is false.",
                                            "zero": "If zero is true, the image will be set the pixels within the threshold to 0, other pixels remain unchanged. If zero is false, the image will be set to black or white. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.",
                                            "to_bitmap": "If true, the image will be converted to a bitmap image before thresholding. default is false. TODO: support in the feature",
                                            "copy": "Select whether to return a new image or modify the original image. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.binary",
                                        "py_doc": "Sets all pixels in the image to black or white depending on if the pixel is inside of a threshold in the threshold list thresholds or not.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the thresholds will be inverted before the operation. default is false.\n  - zero: If zero is true, the image will be set the pixels within the threshold to 0, other pixels remain unchanged. If zero is false, the image will be set to black or white. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n  - to_bitmap: If true, the image will be converted to a bitmap image before thresholding. default is false. TODO: support in the feature\n  - copy: Select whether to return a new image or modify the original image. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "zero",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "to_bitmap",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *binary(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, bool zero = false, image::Image *mask = nullptr, bool to_bitmap = false, bool copy = false)",
                                    "py_def": "def binary(self, thresholds: list[list[int]] = [], invert: bool = False, zero: bool = False, mask: Image = None, to_bitmap: bool = False, copy: bool = False) -> Image"
                                },
                                "invert": {
                                    "type": "func",
                                    "name": "invert",
                                    "doc": {
                                        "brief": "Inverts the image in place.",
                                        "return": "Returns the image after the operation is completed",
                                        "maixpy": "maix.image.Image.invert",
                                        "py_doc": "Inverts the image in place.\n\nReturns: Returns the image after the operation is completed\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *invert()",
                                    "py_def": "def invert(self) -> Image"
                                },
                                "b_and": {
                                    "type": "func",
                                    "name": "b_and",
                                    "doc": {
                                        "brief": "Performs a bitwise and operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_and",
                                        "py_doc": "Performs a bitwise and operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_and(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_and(self, other: Image, mask: Image = None) -> Image"
                                },
                                "b_nand": {
                                    "type": "func",
                                    "name": "b_nand",
                                    "doc": {
                                        "brief": "Performs a bitwise nand operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_nand",
                                        "py_doc": "Performs a bitwise nand operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_nand(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_nand(self, other: Image, mask: Image = None) -> Image"
                                },
                                "b_or": {
                                    "type": "func",
                                    "name": "b_or",
                                    "doc": {
                                        "brief": "Performs a bitwise or operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_or",
                                        "py_doc": "Performs a bitwise or operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_or(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_or(self, other: Image, mask: Image = None) -> Image"
                                },
                                "b_nor": {
                                    "type": "func",
                                    "name": "b_nor",
                                    "doc": {
                                        "brief": "Performs a bitwise nor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_nor",
                                        "py_doc": "Performs a bitwise nor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_nor(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_nor(self, other: Image, mask: Image = None) -> Image"
                                },
                                "b_xor": {
                                    "type": "func",
                                    "name": "b_xor",
                                    "doc": {
                                        "brief": "Performs a bitwise xor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_xor",
                                        "py_doc": "Performs a bitwise xor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_xor(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_xor(self, other: Image, mask: Image = None) -> Image"
                                },
                                "b_xnor": {
                                    "type": "func",
                                    "name": "b_xnor",
                                    "doc": {
                                        "brief": "Performs a bitwise xnor operation between the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.        TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.b_xnor",
                                        "py_doc": "Performs a bitwise xnor operation between the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.        TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *b_xnor(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def b_xnor(self, other: Image, mask: Image = None) -> Image"
                                },
                                "awb": {
                                    "type": "func",
                                    "name": "awb",
                                    "doc": {
                                        "brief": "Performs an auto white balance operation on the image. TODO: support in the feature",
                                        "param": {
                                            "max": "if True uses the white-patch algorithm instead. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.awb",
                                        "py_doc": "Performs an auto white balance operation on the image. TODO: support in the feature\n\nArgs:\n  - max: if True uses the white-patch algorithm instead. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "max",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *awb(bool max = false)",
                                    "py_def": "def awb(self, max: bool = False) -> Image"
                                },
                                "ccm": {
                                    "type": "func",
                                    "name": "ccm",
                                    "doc": {
                                        "brief": "Multiples the passed (3x3) or (4x3) floating-point color-correction-matrix with the image.\\nnote: Grayscale format is not support.",
                                        "param": {
                                            "matrix": "The color correction matrix to use. 3x3 or 4x3 matrix.\nWeights may either be positive or negative, and the sum of each column in the 3x3 matrix should generally be 1.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n}\nWhere the last row of the 4x3 matrix is an offset per color channel. If you add an offset you may wish to make the\nweights sum to less than 1 to account for the offset.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n0, 0, 0,\n}"
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.ccm",
                                        "py_doc": "Multiples the passed (3x3) or (4x3) floating-point color-correction-matrix with the image.\nnote: Grayscale format is not support.\n\nArgs:\n  - matrix: The color correction matrix to use. 3x3 or 4x3 matrix.\nWeights may either be positive or negative, and the sum of each column in the 3x3 matrix should generally be 1.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n}\nWhere the last row of the 4x3 matrix is an offset per color channel. If you add an offset you may wish to make the\nweights sum to less than 1 to account for the offset.\nexample:\n{\n1, 0, 0,\n0, 1, 0,\n0, 0, 1,\n0, 0, 0,\n}\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<float> &",
                                            "matrix",
                                            null
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *ccm(std::vector<float> &matrix)",
                                    "py_def": "def ccm(self, matrix: list[float]) -> Image"
                                },
                                "gamma": {
                                    "type": "func",
                                    "name": "gamma",
                                    "doc": {
                                        "brief": "Quickly changes the image gamma, contrast, and brightness. Create a array whose size is usually 255,\\nand use the parameters gamma, contrast, and brightness to calculate the value of the array, and then map the\\nimage pixel value through the value of the array.\\nThe calculation method for array is: array[array_idx] = (powf((array_idx / 255.0), (1 / gamma)) * contrast + brightness) * scale,\\n`powf` is a function used to calculate floating point power.\\n`array` is the array used for mapping.\\n`array_idx` is the index of the array, the maximum value is determined according to the image format, usually 255.\\n`scale` is a constant, the value is determined by the image format, usually 255.\\nMapping method:\\nAssume that a pixel value in the image is 128, then map the pixel value to the value of array[128]\\nUsers can adjust the value of the array through the gamma, contrast, and brightness parameters.",
                                        "param": {
                                            "gamma": "The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.",
                                            "contrast": "The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.",
                                            "brightness": "The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gamma",
                                        "py_doc": "Quickly changes the image gamma, contrast, and brightness. Create a array whose size is usually 255,\nand use the parameters gamma, contrast, and brightness to calculate the value of the array, and then map the\nimage pixel value through the value of the array.\nThe calculation method for array is: array[array_idx] = (powf((array_idx / 255.0), (1 / gamma)) * contrast + brightness) * scale,\n`powf` is a function used to calculate floating point power.\n`array` is the array used for mapping.\n`array_idx` is the index of the array, the maximum value is determined according to the image format, usually 255.\n`scale` is a constant, the value is determined by the image format, usually 255.\nMapping method:\nAssume that a pixel value in the image is 128, then map the pixel value to the value of array[128]\nUsers can adjust the value of the array through the gamma, contrast, and brightness parameters.\n\nArgs:\n  - gamma: The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.\n  - contrast: The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.\n  - brightness: The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "gamma",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "contrast",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "brightness",
                                            "0.0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gamma(double gamma = 1.0, double contrast = 1.0, double brightness = 0.0)",
                                    "py_def": "def gamma(self, gamma: float = 1.0, contrast: float = 1.0, brightness: float = 0.0) -> Image"
                                },
                                "gamma_corr": {
                                    "type": "func",
                                    "name": "gamma_corr",
                                    "doc": {
                                        "brief": "Alias for Image.gamma.",
                                        "param": {
                                            "gamma": "The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.",
                                            "contrast": "The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.",
                                            "brightness": "The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gamma_corr",
                                        "py_doc": "Alias for Image.gamma.\n\nArgs:\n  - gamma: The contrast gamma greater than 1.0 makes the image darker in a non-linear manner while less than 1.0 makes the image brighter. default is 1.0.\n  - contrast: The contrast value greater than 1.0 makes the image brighter in a linear manner while less than 1.0 makes the image darker. default is 1.0.\n  - brightness: The brightness value greater than 0.0 makes the image brighter in a constant manner while less than 0.0 makes the image darker. default is 0.0.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "gamma",
                                            null
                                        ],
                                        [
                                            "double",
                                            "contrast",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "brightness",
                                            "0.0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gamma_corr(double gamma, double contrast = 1.0, double brightness = 0.0)",
                                    "py_def": "def gamma_corr(self, gamma: float, contrast: float = 1.0, brightness: float = 0.0) -> Image"
                                },
                                "negate": {
                                    "type": "func",
                                    "name": "negate",
                                    "doc": {
                                        "brief": "Flips (numerically inverts) all pixels values in an image",
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.negate",
                                        "py_doc": "Flips (numerically inverts) all pixels values in an image\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *negate()",
                                    "py_def": "def negate(self) -> Image"
                                },
                                "replace": {
                                    "type": "func",
                                    "name": "replace",
                                    "doc": {
                                        "brief": "Replaces all pixels in the image with the corresponding pixels in the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "hmirror": "If true, the image will be horizontally mirrored before the operation. default is false.",
                                            "vflip": "If true, the image will be vertically flipped before the operation. default is false.",
                                            "transpose": "If true, the image can be used to rotate 90 degrees or 270 degrees.\nhmirror = false, vflip = false, transpose = false, the image will not be rotated.\nhmirror = false, vflip = true, transpose = true, the image will be rotated 90 degrees.\nhmirror = true, vflip = true, transpose = false, the image will be rotated 180 degrees.\nhmirror = true, vflip = false, transpose = true, the image will be rotated 270 degrees.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.replace",
                                        "py_doc": "Replaces all pixels in the image with the corresponding pixels in the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - hmirror: If true, the image will be horizontally mirrored before the operation. default is false.\n  - vflip: If true, the image will be vertically flipped before the operation. default is false.\n  - transpose: If true, the image can be used to rotate 90 degrees or 270 degrees.\nhmirror = false, vflip = false, transpose = false, the image will not be rotated.\nhmirror = false, vflip = true, transpose = true, the image will be rotated 90 degrees.\nhmirror = true, vflip = true, transpose = false, the image will be rotated 180 degrees.\nhmirror = true, vflip = false, transpose = true, the image will be rotated 270 degrees.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "hmirror",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "vflip",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "transpose",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *replace(image::Image *other = nullptr, bool hmirror = false, bool vflip = false, bool transpose = false, image::Image *mask = nullptr)",
                                    "py_def": "def replace(self, other: Image = None, hmirror: bool = False, vflip: bool = False, transpose: bool = False, mask: Image = None) -> Image"
                                },
                                "set": {
                                    "type": "func",
                                    "name": "set",
                                    "doc": {
                                        "brief": "Alias for Image::replace.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "hmirror": "If true, the image will be horizontally mirrored before the operation. default is false.",
                                            "vflip": "If true, the image will be vertically flipped before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.set",
                                        "py_doc": "Alias for Image::replace.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - hmirror: If true, the image will be horizontally mirrored before the operation. default is false.\n  - vflip: If true, the image will be vertically flipped before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "hmirror",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "vflip",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "transpose",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *set(image::Image *other, bool hmirror = false, bool vflip = false, bool transpose = false, image::Image *mask = nullptr)",
                                    "py_def": "def set(self, other: Image, hmirror: bool = False, vflip: bool = False, transpose: bool = False, mask: Image = None) -> Image"
                                },
                                "add": {
                                    "type": "func",
                                    "name": "add",
                                    "doc": {
                                        "brief": "Adds the other image to the image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.add",
                                        "py_doc": "Adds the other image to the image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *add(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def add(self, other: Image, mask: Image = None) -> Image"
                                },
                                "sub": {
                                    "type": "func",
                                    "name": "sub",
                                    "doc": {
                                        "brief": "Subtracts the other image from the image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "reverse": "If true, the image will be reversed before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.sub",
                                        "py_doc": "Subtracts the other image from the image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - reverse: If true, the image will be reversed before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *sub(image::Image *other, bool reverse = false, image::Image *mask = nullptr)",
                                    "py_def": "def sub(self, other: Image, reverse: bool = False, mask: Image = None) -> Image"
                                },
                                "mul": {
                                    "type": "func",
                                    "name": "mul",
                                    "doc": {
                                        "brief": "Multiplies the image by the other image.\\nNote: This method is meant for image blending and cannot multiply the pixels in the image by a scalar like 2.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "invert": "If true, the image will be change the multiplication operation from a*b to 1/((1/a)*(1/b)).\nIn particular, this lightens the image instead of darkening it (e.g. multiply versus burn operations). default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mul",
                                        "py_doc": "Multiplies the image by the other image.\nNote: This method is meant for image blending and cannot multiply the pixels in the image by a scalar like 2.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - invert: If true, the image will be change the multiplication operation from a*b to 1/((1/a)*(1/b)).\nIn particular, this lightens the image instead of darkening it (e.g. multiply versus burn operations). default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mul(image::Image *other, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def mul(self, other: Image, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "div": {
                                    "type": "func",
                                    "name": "div",
                                    "doc": {
                                        "brief": "Divides the image by the other image.\\nThis method is meant for image blending and cannot divide the pixels in the image by a scalar like 2.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.    TODO: support path?",
                                            "invert": "If true, the image will be change the division direction from a/b to b/a. default is false.",
                                            "mod": "If true, the image will be change the division operation to the modulus operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.div",
                                        "py_doc": "Divides the image by the other image.\nThis method is meant for image blending and cannot divide the pixels in the image by a scalar like 2.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.    TODO: support path?\n  - invert: If true, the image will be change the division direction from a/b to b/a. default is false.\n  - mod: If true, the image will be change the division operation to the modulus operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "mod",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *div(image::Image *other, bool invert = false, bool mod = false, image::Image *mask = nullptr)",
                                    "py_def": "def div(self, other: Image, invert: bool = False, mod: bool = False, mask: Image = None) -> Image"
                                },
                                "min": {
                                    "type": "func",
                                    "name": "min",
                                    "doc": {
                                        "brief": "Caculate the minimum of each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.min",
                                        "py_doc": "Caculate the minimum of each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *min(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def min(self, other: Image, mask: Image = None) -> Image"
                                },
                                "max": {
                                    "type": "func",
                                    "name": "max",
                                    "doc": {
                                        "brief": "Caculate the maximum of each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.max",
                                        "py_doc": "Caculate the maximum of each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *max(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def max(self, other: Image, mask: Image = None) -> Image"
                                },
                                "difference": {
                                    "type": "func",
                                    "name": "difference",
                                    "doc": {
                                        "brief": "Caculate the absolute value of the difference between each pixel in the image and the other image.",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.difference",
                                        "py_doc": "Caculate the absolute value of the difference between each pixel in the image and the other image.\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *difference(image::Image *other, image::Image *mask = nullptr)",
                                    "py_def": "def difference(self, other: Image, mask: Image = None) -> Image"
                                },
                                "blend": {
                                    "type": "func",
                                    "name": "blend",
                                    "doc": {
                                        "brief": "Blends the image with the other image.\\nres = alpha * this_img / 256 + (256 - alpha) * other_img / 256",
                                        "param": {
                                            "other": "The other image should be an image and should be the same size as the image being operated on.",
                                            "alpha": "The alpha value of the blend, the value range is [0, 256],default is 128.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.blend",
                                        "py_doc": "Blends the image with the other image.\nres = alpha * this_img / 256 + (256 - alpha) * other_img / 256\n\nArgs:\n  - other: The other image should be an image and should be the same size as the image being operated on.\n  - alpha: The alpha value of the blend, the value range is [0, 256],default is 128.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "other",
                                            null
                                        ],
                                        [
                                            "int",
                                            "alpha",
                                            "128"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *blend(image::Image *other, int alpha = 128, image::Image *mask = nullptr)",
                                    "py_def": "def blend(self, other: Image, alpha: int = 128, mask: Image = None) -> Image"
                                },
                                "histeq": {
                                    "type": "func",
                                    "name": "histeq",
                                    "doc": {
                                        "brief": "Runs the histogram equalization algorithm on the image.",
                                        "param": {
                                            "adaptive": "If true, an adaptive histogram equalization method will be run on the image instead which as generally better results than non-adaptive histogram qualization but a longer run time. default is false.",
                                            "clip_limit": "Provides a way to limit the contrast of the adaptive histogram qualization. Use a small value for this, like 10, to produce good histogram equalized contrast limited images. default is -1.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.histeq",
                                        "py_doc": "Runs the histogram equalization algorithm on the image.\n\nArgs:\n  - adaptive: If true, an adaptive histogram equalization method will be run on the image instead which as generally better results than non-adaptive histogram qualization but a longer run time. default is false.\n  - clip_limit: Provides a way to limit the contrast of the adaptive histogram qualization. Use a small value for this, like 10, to produce good histogram equalized contrast limited images. default is -1.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "adaptive",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "clip_limit",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *histeq(bool adaptive = false, int clip_limit = -1, image::Image *mask = nullptr)",
                                    "py_def": "def histeq(self, adaptive: bool = False, clip_limit: int = -1, mask: Image = None) -> Image"
                                },
                                "mean": {
                                    "type": "func",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Standard mean blurring filter using a box filter.\\nThe parameters offset and invert are valid when threshold is True.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mean",
                                        "py_doc": "Standard mean blurring filter using a box filter.\nThe parameters offset and invert are valid when threshold is True.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mean(int size, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def mean(self, size: int, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "median": {
                                    "type": "func",
                                    "name": "median",
                                    "doc": {
                                        "brief": "Runs the median filter on the image. The median filter is the best filter for smoothing surfaces while preserving edges but it is very slow.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "percentile": "This parameter controls the percentile of the value used in the kernel. You can set this to 0 for a min filter, 0.25 for a lower quartile filter, 0.75 for an upper quartile filter, and 1.0 for a max filter. default is 0.5.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.median",
                                        "py_doc": "Runs the median filter on the image. The median filter is the best filter for smoothing surfaces while preserving edges but it is very slow.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - percentile: This parameter controls the percentile of the value used in the kernel. You can set this to 0 for a min filter, 0.25 for a lower quartile filter, 0.75 for an upper quartile filter, and 1.0 for a max filter. default is 0.5.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "percentile",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *median(int size, double percentile = 0.5, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def median(self, size: int, percentile: float = 0.5, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "mode": {
                                    "type": "func",
                                    "name": "mode",
                                    "doc": {
                                        "brief": "Runs the mode filter on the image by replacing each pixel with the mode of their neighbors.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.mode",
                                        "py_doc": "Runs the mode filter on the image by replacing each pixel with the mode of their neighbors.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *mode(int size, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def mode(self, size: int, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "midpoint": {
                                    "type": "func",
                                    "name": "midpoint",
                                    "doc": {
                                        "brief": "Runs the midpoint filter on the image.This filter finds the midpoint (max * bias + min * (1 - bias)) of each pixel neighborhood in the image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "bias": "The bias of the midpoint. default is 0.5.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.midpoint",
                                        "py_doc": "Runs the midpoint filter on the image.This filter finds the midpoint (max * bias + min * (1 - bias)) of each pixel neighborhood in the image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - bias: The bias of the midpoint. default is 0.5.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "bias",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *midpoint(int size, double bias = 0.5, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def midpoint(self, size: int, bias: float = 0.5, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "morph": {
                                    "type": "func",
                                    "name": "morph",
                                    "doc": {
                                        "brief": "Convolves the image by a filter kernel. This allows you to do general purpose convolutions on an image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "kernel": "The kernel used for convolution. The kernel should be a list of lists of numbers. The kernel should be the same size as the actual kernel size.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.morph",
                                        "py_doc": "Convolves the image by a filter kernel. This allows you to do general purpose convolutions on an image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - kernel: The kernel used for convolution. The kernel should be a list of lists of numbers. The kernel should be the same size as the actual kernel size.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "kernel",
                                            null
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *morph(int size, std::vector<int> kernel, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def morph(self, size: int, kernel: list[int], mul: float = -1, add: float = 0.0, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "gaussian": {
                                    "type": "func",
                                    "name": "gaussian",
                                    "doc": {
                                        "brief": "Convolves the image by a smoothing guassian kernel.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "unsharp": "If true, this method will perform an unsharp mask operation instead of gaussian filtering operation, this improves the clarity of image edges. default is false.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.gaussian",
                                        "py_doc": "Convolves the image by a smoothing guassian kernel.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - unsharp: If true, this method will perform an unsharp mask operation instead of gaussian filtering operation, this improves the clarity of image edges. default is false.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "unsharp",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *gaussian(int size, bool unsharp = false, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def gaussian(self, size: int, unsharp: bool = False, mul: float = -1, add: float = 0.0, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "laplacian": {
                                    "type": "func",
                                    "name": "laplacian",
                                    "doc": {
                                        "brief": "Convolves the image by a edge detecting laplacian kernel.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "sharpen": "If True, this method will sharpen the image instead of an unthresholded edge detection image. Then increase the kernel size to improve image clarity. default is false.",
                                            "mul": "This parameter is used to multiply the convolved pixel results. default is auto.",
                                            "add": "This parameter is the value to be added to each convolution pixel result. default is 0.0.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.laplacian",
                                        "py_doc": "Convolves the image by a edge detecting laplacian kernel.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - sharpen: If True, this method will sharpen the image instead of an unthresholded edge detection image. Then increase the kernel size to improve image clarity. default is false.\n  - mul: This parameter is used to multiply the convolved pixel results. default is auto.\n  - add: This parameter is the value to be added to each convolution pixel result. default is 0.0.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "sharpen",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "mul",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "add",
                                            "0.0"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *laplacian(int size, bool sharpen = false, float mul = -1, float add = 0.0, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def laplacian(self, size: int, sharpen: bool = False, mul: float = -1, add: float = 0.0, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "bilateral": {
                                    "type": "func",
                                    "name": "bilateral",
                                    "doc": {
                                        "brief": "Convolves the image by a bilateral filter.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "color_sigma": "Controls how closely colors are matched using the bilateral filter. default is 0.1.",
                                            "space_sigma": "Controls how closely pixels space-wise are blurred with each other. default is 1.",
                                            "threshold": "If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.",
                                            "offset": "The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.bilateral",
                                        "py_doc": "Convolves the image by a bilateral filter.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - color_sigma: Controls how closely colors are matched using the bilateral filter. default is 0.1.\n  - space_sigma: Controls how closely pixels space-wise are blurred with each other. default is 1.\n  - threshold: If true, which will enable adaptive thresholding of the image which sets pixels to white or black based on a pixel\u2019s brightness in relation to the brightness of the kernel of pixels around them.\ndefault is false.\n  - offset: The larger the offset value, the lower brightness pixels on the original image will be set to white. default is 0.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "double",
                                            "color_sigma",
                                            "0.1"
                                        ],
                                        [
                                            "double",
                                            "space_sigma",
                                            "1"
                                        ],
                                        [
                                            "bool",
                                            "threshold",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "offset",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *bilateral(int size, double color_sigma = 0.1, double space_sigma = 1, bool threshold = false, int offset = 0, bool invert = false, image::Image *mask = nullptr)",
                                    "py_def": "def bilateral(self, size: int, color_sigma: float = 0.1, space_sigma: float = 1, threshold: bool = False, offset: int = 0, invert: bool = False, mask: Image = None) -> Image"
                                },
                                "linpolar": {
                                    "type": "func",
                                    "name": "linpolar",
                                    "doc": {
                                        "brief": "Re-project\u2019s and image from cartessian coordinates to linear polar coordinates.",
                                        "param": {
                                            "reverse": "If true, the image will be reverse polar transformed. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.linpolar",
                                        "py_doc": "Re-project\u2019s and image from cartessian coordinates to linear polar coordinates.\n\nArgs:\n  - reverse: If true, the image will be reverse polar transformed. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *linpolar(bool reverse = false)",
                                    "py_def": "def linpolar(self, reverse: bool = False) -> Image"
                                },
                                "logpolar": {
                                    "type": "func",
                                    "name": "logpolar",
                                    "doc": {
                                        "brief": "Re-project\u2019s and image from cartessian coordinates to log polar coordinates.",
                                        "param": {
                                            "reverse": "If true, the image will be reverse polar transformed. default is false."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.logpolar",
                                        "py_doc": "Re-project\u2019s and image from cartessian coordinates to log polar coordinates.\n\nArgs:\n  - reverse: If true, the image will be reverse polar transformed. default is false.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "reverse",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *logpolar(bool reverse = false)",
                                    "py_def": "def logpolar(self, reverse: bool = False) -> Image"
                                },
                                "lens_corr": {
                                    "type": "func",
                                    "name": "lens_corr",
                                    "doc": {
                                        "brief": "Performs a lens correction operation on the image. TODO: support in the feature",
                                        "param": {
                                            "strength": "The strength of the lens correction. default is 1.8.",
                                            "zoom": "The zoom of the lens correction. default is 1.0.",
                                            "x_corr": "The x correction of the lens correction. default is 0.0.",
                                            "y_corr": "The y correction of the lens correction. default is 0.0."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.lens_corr",
                                        "py_doc": "Performs a lens correction operation on the image. TODO: support in the feature\n\nArgs:\n  - strength: The strength of the lens correction. default is 1.8.\n  - zoom: The zoom of the lens correction. default is 1.0.\n  - x_corr: The x correction of the lens correction. default is 0.0.\n  - y_corr: The y correction of the lens correction. default is 0.0.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "strength",
                                            "1.8"
                                        ],
                                        [
                                            "double",
                                            "zoom",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "x_corr",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "y_corr",
                                            "0.0"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *lens_corr(double strength = 1.8, double zoom = 1.0, double x_corr = 0.0, double y_corr = 0.0)",
                                    "py_def": "def lens_corr(self, strength: float = 1.8, zoom: float = 1.0, x_corr: float = 0.0, y_corr: float = 0.0) -> Image"
                                },
                                "rotation_corr": {
                                    "type": "func",
                                    "name": "rotation_corr",
                                    "doc": {
                                        "brief": "Performs a rotation correction operation on the image. TODO: support in the feature",
                                        "param": {
                                            "x_rotation": "The x rotation of the rotation correction. default is 0.0.",
                                            "y_rotation": "The y rotation of the rotation correction. default is 0.0.",
                                            "z_rotation": "The z rotation of the rotation correction. default is 0.0.",
                                            "x_translation": "The x translation of the rotation correction. default is 0.0.",
                                            "y_translation": "The y translation of the rotation correction. default is 0.0.",
                                            "zoom": "The zoom of the rotation correction. default is 1.0.",
                                            "fov": "The fov of the rotation correction. default is 60.0.",
                                            "corners": "The corners of the rotation correction. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.rotation_corr",
                                        "py_doc": "Performs a rotation correction operation on the image. TODO: support in the feature\n\nArgs:\n  - x_rotation: The x rotation of the rotation correction. default is 0.0.\n  - y_rotation: The y rotation of the rotation correction. default is 0.0.\n  - z_rotation: The z rotation of the rotation correction. default is 0.0.\n  - x_translation: The x translation of the rotation correction. default is 0.0.\n  - y_translation: The y translation of the rotation correction. default is 0.0.\n  - zoom: The zoom of the rotation correction. default is 1.0.\n  - fov: The fov of the rotation correction. default is 60.0.\n  - corners: The corners of the rotation correction. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "x_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "y_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "z_rotation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "x_translation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "y_translation",
                                            "0.0"
                                        ],
                                        [
                                            "double",
                                            "zoom",
                                            "1.0"
                                        ],
                                        [
                                            "double",
                                            "fov",
                                            "60.0"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "corners",
                                            "std::vector<float>()"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *rotation_corr(double x_rotation = 0.0, double y_rotation = 0.0, double z_rotation = 0.0, double x_translation = 0.0, double y_translation = 0.0, double zoom = 1.0, double fov = 60.0, std::vector<float> corners = std::vector<float>())",
                                    "py_def": "def rotation_corr(self, x_rotation: float = 0.0, y_rotation: float = 0.0, z_rotation: float = 0.0, x_translation: float = 0.0, y_translation: float = 0.0, zoom: float = 1.0, fov: float = 60.0, corners: list[float] = []) -> Image"
                                },
                                "get_histogram": {
                                    "type": "func",
                                    "name": "get_histogram",
                                    "doc": {
                                        "brief": "Computes the normalized histogram on all color channels and returns a image::Histogram object.",
                                        "note": "For GRAYSCALE format, Lmin and Lmax range is [0, 255]. For RGB888 format, Lmin and Lmax range is [0, 100].",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the thresholds will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "bins": "The number of bins to use for the histogram.\nIn GRAYSCALE format, setting range is [2, 256], default is 100.\nIn RGB888 format, setting range is [2, 100], default is 100.",
                                            "l_bins": "The number of bins to use for the l channel of the histogram. Only valid in RGB888 format.\nIf an invalid value is set, bins will be used instead. The setting range is [2, 100], default is 100.",
                                            "a_bins": "The number of bins to use for the a channel of the histogram.\nOnly valid in RGB888 format.The setting range is [2, 256],  default is 256.",
                                            "b_bins": "The number of bins to use for the b channel of the histogram.\nOnly valid in RGB888 format. The setting range is [2, 256], default is 256.",
                                            "difference": "difference may be set to an image object to cause this method to operate on the difference image between the current image and the difference image object.\ndefault is None."
                                        },
                                        "return": "Returns image::Histogram object",
                                        "maixpy": "maix.image.Image.get_histogram",
                                        "py_doc": "Computes the normalized histogram on all color channels and returns a image::Histogram object.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the thresholds will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - bins: The number of bins to use for the histogram.\nIn GRAYSCALE format, setting range is [2, 256], default is 100.\nIn RGB888 format, setting range is [2, 100], default is 100.\n  - l_bins: The number of bins to use for the l channel of the histogram. Only valid in RGB888 format.\nIf an invalid value is set, bins will be used instead. The setting range is [2, 100], default is 100.\n  - a_bins: The number of bins to use for the a channel of the histogram.\nOnly valid in RGB888 format.The setting range is [2, 256],  default is 256.\n  - b_bins: The number of bins to use for the b channel of the histogram.\nOnly valid in RGB888 format. The setting range is [2, 256], default is 256.\n  - difference: difference may be set to an image object to cause this method to operate on the difference image between the current image and the difference image object.\ndefault is None.\n\n\nReturns: Returns image::Histogram object\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "l_bins",
                                            "100"
                                        ],
                                        [
                                            "int",
                                            "a_bins",
                                            "256"
                                        ],
                                        [
                                            "int",
                                            "b_bins",
                                            "256"
                                        ],
                                        [
                                            "image::Image *",
                                            "difference",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Histogram",
                                    "static": false,
                                    "def": "image::Histogram get_histogram(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int bins = -1, int l_bins = 100, int a_bins = 256, int b_bins = 256, image::Image *difference = nullptr)",
                                    "py_def": "def get_histogram(self, thresholds: list[list[int]] = [], invert: bool = False, roi: list[int] = [], bins: int = -1, l_bins: int = 100, a_bins: int = 256, b_bins: int = 256, difference: Image = None) -> Histogram"
                                },
                                "get_statistics": {
                                    "type": "func",
                                    "name": "get_statistics",
                                    "doc": {
                                        "brief": "Gets the statistics of the image. TODO: support in the feature",
                                        "note": "For GRAYSCALE format, Lmin and Lmax range is [0, 255]. For RGB888 format, Lmin and Lmax range is [0, 100].",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "bins": "The number of bins to use for the statistics. default is -1.",
                                            "l_bins": "The number of bins to use for the l channel of the statistics. default is -1.",
                                            "a_bins": "The number of bins to use for the a channel of the statistics. default is -1.",
                                            "b_bins": "The number of bins to use for the b channel of the statistics. default is -1.",
                                            "difference": "The difference image to use for the statistics. default is None."
                                        },
                                        "return": "Returns the statistics of the image",
                                        "maixpy": "maix.image.Image.get_statistics",
                                        "py_doc": "Gets the statistics of the image. TODO: support in the feature\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - bins: The number of bins to use for the statistics. default is -1.\n  - l_bins: The number of bins to use for the l channel of the statistics. default is -1.\n  - a_bins: The number of bins to use for the a channel of the statistics. default is -1.\n  - b_bins: The number of bins to use for the b channel of the statistics. default is -1.\n  - difference: The difference image to use for the statistics. default is None.\n\n\nReturns: Returns the statistics of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "l_bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "a_bins",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "b_bins",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "difference",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Statistics",
                                    "static": false,
                                    "def": "image::Statistics get_statistics(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int bins = -1, int l_bins = -1, int a_bins = -1, int b_bins = -1, image::Image *difference = nullptr)",
                                    "py_def": "def get_statistics(self, thresholds: list[list[int]] = [], invert: bool = False, roi: list[int] = [], bins: int = -1, l_bins: int = -1, a_bins: int = -1, b_bins: int = -1, difference: Image = None) -> Statistics"
                                },
                                "get_regression": {
                                    "type": "func",
                                    "name": "get_regression",
                                    "doc": {
                                        "brief": "Gets the regression of the image.",
                                        "note": "For GRAYSCALE format, Lmin and Lmax range is [0, 255]. For RGB888 format, Lmin and Lmax range is [0, 100].",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "The x stride to use for the regression. default is 2.",
                                            "y_stride": "The y stride to use for the regression. default is 1.",
                                            "area_threshold": "The area threshold to use for the regression. default is 10.",
                                            "pixels_threshold": "The pixels threshold to use for the regression. default is 10.",
                                            "robust": "If true, the regression will be robust. default is false."
                                        },
                                        "return": "Returns the regression of the image",
                                        "maixpy": "maix.image.Image.get_regression",
                                        "py_doc": "Gets the regression of the image.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: The x stride to use for the regression. default is 2.\n  - y_stride: The y stride to use for the regression. default is 1.\n  - area_threshold: The area threshold to use for the regression. default is 10.\n  - pixels_threshold: The pixels threshold to use for the regression. default is 10.\n  - robust: If true, the regression will be robust. default is false.\n\n\nReturns: Returns the regression of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "area_threshold",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "pixels_threshold",
                                            "10"
                                        ],
                                        [
                                            "bool",
                                            "robust",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> get_regression(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int area_threshold = 10, int pixels_threshold = 10, bool robust = false)",
                                    "py_def": "def get_regression(self, thresholds: list[list[int]] = [], invert: bool = False, roi: list[int] = [], x_stride: int = 2, y_stride: int = 1, area_threshold: int = 10, pixels_threshold: int = 10, robust: bool = False) -> list[Line]"
                                },
                                "save": {
                                    "type": "func",
                                    "name": "save",
                                    "doc": {
                                        "brief": "Save image to file",
                                        "param": {
                                            "path": "file path",
                                            "quality": "image quality, by default(value is 95), support jpeg and png format"
                                        },
                                        "return": "error code, err::ERR_NONE is ok, other is error",
                                        "maixpy": "maix.image.Image.save",
                                        "py_doc": "Save image to file\n\nArgs:\n  - path: file path\n  - quality: image quality, by default(value is 95), support jpeg and png format\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                                    },
                                    "args": [
                                        [
                                            "const char *",
                                            "path",
                                            null
                                        ],
                                        [
                                            "int",
                                            "quality",
                                            "95"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err save(const char *path, int quality = 95)",
                                    "py_def": "def save(self, path: str, quality: int = 95) -> maix.err.Err"
                                },
                                "flood_fill": {
                                    "type": "func",
                                    "name": "flood_fill",
                                    "doc": {
                                        "brief": "Flood fills a region of the image starting from location x, y.",
                                        "param": {
                                            "x": "The x coordinate of the seed point.",
                                            "y": "The y coordinate of the seed point.",
                                            "seed_threshold": "The seed_threshold value controls how different any pixel in the fill area may be from the original starting pixel. default is 0.05.",
                                            "floating_threshold": "The floating_threshold value controls how different any pixel in the fill area may be from any neighbor pixels. default is 0.05.",
                                            "color": "The color to fill the region with. default is white.",
                                            "invert": "If true, the image will be inverted before the operation. default is false.",
                                            "clear_background": "If true, the background will be cleared before the operation. default is false.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None. FIXME: the mask image works abnormally"
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.flood_fill",
                                        "py_doc": "Flood fills a region of the image starting from location x, y.\n\nArgs:\n  - x: The x coordinate of the seed point.\n  - y: The y coordinate of the seed point.\n  - seed_threshold: The seed_threshold value controls how different any pixel in the fill area may be from the original starting pixel. default is 0.05.\n  - floating_threshold: The floating_threshold value controls how different any pixel in the fill area may be from any neighbor pixels. default is 0.05.\n  - color: The color to fill the region with. default is white.\n  - invert: If true, the image will be inverted before the operation. default is false.\n  - clear_background: If true, the background will be cleared before the operation. default is false.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None. FIXME: the mask image works abnormally\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "float",
                                            "seed_threshold",
                                            "0.05"
                                        ],
                                        [
                                            "float",
                                            "floating_threshold",
                                            "0.05"
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            "image::COLOR_WHITE"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "clear_background",
                                            "false"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *flood_fill(int x, int y, float seed_threshold = 0.05, float floating_threshold = 0.05, image::Color color = image::COLOR_WHITE, bool invert = false, bool clear_background = false, image::Image *mask = nullptr)",
                                    "py_def": "def flood_fill(self, x: int, y: int, seed_threshold: float = 0.05, floating_threshold: float = 0.05, color: Color = ..., invert: bool = False, clear_background: bool = False, mask: Image = None) -> Image"
                                },
                                "erode": {
                                    "type": "func",
                                    "name": "erode",
                                    "doc": {
                                        "brief": "Erodes the image in place.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "The number of pixels in the kernel that are not 0. If it is less than or equal to the threshold, set the center pixel to black. default is (kernel_size - 1).",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.erode",
                                        "py_doc": "Erodes the image in place.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: The number of pixels in the kernel that are not 0. If it is less than or equal to the threshold, set the center pixel to black. default is (kernel_size - 1).\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "-1"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *erode(int size, int threshold = -1, image::Image *mask = nullptr)",
                                    "py_def": "def erode(self, size: int, threshold: int = -1, mask: Image = None) -> Image"
                                },
                                "dilate": {
                                    "type": "func",
                                    "name": "dilate",
                                    "doc": {
                                        "brief": "Dilates the image in place.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "The number of pixels in the kernel that are not 0. If it is greater than or equal to the threshold, set the center pixel to white. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.dilate",
                                        "py_doc": "Dilates the image in place.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: The number of pixels in the kernel that are not 0. If it is greater than or equal to the threshold, set the center pixel to white. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *dilate(int size, int threshold = 0, image::Image *mask = nullptr)",
                                    "py_def": "def dilate(self, size: int, threshold: int = 0, mask: Image = None) -> Image"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Performs erosion and dilation on an image in order.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.open",
                                        "py_doc": "Performs erosion and dilation on an image in order.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *open(int size, int threshold = 0, image::Image *mask = nullptr)",
                                    "py_def": "def open(self, size: int, threshold: int = 0, mask: Image = None) -> Image"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Performs dilation and erosion on an image in order.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.close",
                                        "py_doc": "Performs dilation and erosion on an image in order.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for erosion and dilation, the actual threshold for erosion is (kernel_size - 1 - threshold), the actual threshold for dialation is threshold. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *close(int size, int threshold = 0, image::Image *mask = nullptr)",
                                    "py_def": "def close(self, size: int, threshold: int = 0, mask: Image = None) -> Image"
                                },
                                "top_hat": {
                                    "type": "func",
                                    "name": "top_hat",
                                    "doc": {
                                        "brief": "Returns the image difference of the image and Image.open()\u2019ed image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for open method. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.top_hat",
                                        "py_doc": "Returns the image difference of the image and Image.open()\u2019ed image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for open method. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *top_hat(int size, int threshold = 0, image::Image *mask = nullptr)",
                                    "py_def": "def top_hat(self, size: int, threshold: int = 0, mask: Image = None) -> Image"
                                },
                                "black_hat": {
                                    "type": "func",
                                    "name": "black_hat",
                                    "doc": {
                                        "brief": "Returns the image difference of the image and Image.close()\u2019ed image.",
                                        "param": {
                                            "size": "Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).",
                                            "threshold": "As the threshold for close method. default is 0.",
                                            "mask": "Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None."
                                        },
                                        "return": "Returns the image after the operation is completed.",
                                        "maixpy": "maix.image.Image.black_hat",
                                        "py_doc": "Returns the image difference of the image and Image.close()\u2019ed image.\n\nArgs:\n  - size: Kernel size. The actual kernel size is ((size * 2) + 1) * ((size * 2) + 1). Use 1(3x3 kernel), 2(5x5 kernel).\n  - threshold: As the threshold for close method. default is 0.\n  - mask: Mask is another image to use as a pixel level mask for the operation. The mask should be an image with just black or white pixels and should be the same size as the image being operated on.\nOnly pixels set in the mask are modified. default is None.\n\n\nReturns: Returns the image after the operation is completed.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "0"
                                        ],
                                        [
                                            "image::Image *",
                                            "mask",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *black_hat(int size, int threshold = 0, image::Image *mask = nullptr)",
                                    "py_def": "def black_hat(self, size: int, threshold: int = 0, mask: Image = None) -> Image"
                                },
                                "find_blobs": {
                                    "type": "func",
                                    "name": "find_blobs",
                                    "doc": {
                                        "brief": "Finds all blobs in the image and returns a list of image.Blob class which describe each Blob.\\nPlease see the image.Blob object more more information.",
                                        "note": "For GRAYSCALE format, Lmin and Lmax range is [0, 255]. For RGB888 format, Lmin and Lmax range is [0, 100].",
                                        "param": {
                                            "thresholds": "You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.",
                                            "invert": "if true, will invert thresholds before find blobs, default is false",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "area_threshold": "area threshold, if the blob area is smaller than area_threshold, the blob is not returned, default is 10",
                                            "pixels_threshold": "pixels threshold, if the blob pixels is smaller than area_threshold, the blob is not returned,, default is 10.\nwhen x_stride and y_stride is equal to 1, pixels_threshold is equivalent to area_threshold",
                                            "merge": "if True merges all not filtered out blobs whos bounding rectangles intersect each other. default is false",
                                            "margin": "margin can be used to increase or decrease the size of the bounding rectangles for blobs during the intersection test.\nFor example, with a margin of 1 blobs whos bounding rectangles are 1 pixel away from each other will be merged. default is 0",
                                            "x_hist_bins_max": "if set to non-zero populates a histogram buffer in each blob object with an x_histogram projection of all columns in the object. This value then sets the number of bins for that projection.",
                                            "y_hist_bins_max": "if set to non-zero populates a histogram buffer in each blob object with an y_histogram projection of all rows in the object. This value then sets the number of bins for that projection."
                                        },
                                        "return": "Return the blob when found blobs, format is (blob1, blob2, ...), you can use blob class methods to do more operations.",
                                        "maixpy": "maix.image.Image.find_blobs",
                                        "py_doc": "Finds all blobs in the image and returns a list of image.Blob class which describe each Blob.\nPlease see the image.Blob object more more information.\n\nArgs:\n  - thresholds: You can define multiple thresholds.\nFor GRAYSCALE format, you can use {{Lmin, Lmax}, ...} to define one or more thresholds.\nFor RGB888 format, you can use {{Lmin, Lmax, Amin, Amax, Bmin, Bmax}, ...} to define one or more thresholds.\nWhere the upper case L,A,B represent the L,A,B channels of the LAB image format, and min, max represent the minimum and maximum values of the corresponding channels.\n  - invert: if true, will invert thresholds before find blobs, default is false\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - area_threshold: area threshold, if the blob area is smaller than area_threshold, the blob is not returned, default is 10\n  - pixels_threshold: pixels threshold, if the blob pixels is smaller than area_threshold, the blob is not returned,, default is 10.\nwhen x_stride and y_stride is equal to 1, pixels_threshold is equivalent to area_threshold\n  - merge: if True merges all not filtered out blobs whos bounding rectangles intersect each other. default is false\n  - margin: margin can be used to increase or decrease the size of the bounding rectangles for blobs during the intersection test.\nFor example, with a margin of 1 blobs whos bounding rectangles are 1 pixel away from each other will be merged. default is 0\n  - x_hist_bins_max: if set to non-zero populates a histogram buffer in each blob object with an x_histogram projection of all columns in the object. This value then sets the number of bins for that projection.\n  - y_hist_bins_max: if set to non-zero populates a histogram buffer in each blob object with an y_histogram projection of all rows in the object. This value then sets the number of bins for that projection.\n\n\nReturns: Return the blob when found blobs, format is (blob1, blob2, ...), you can use blob class methods to do more operations.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<std::vector<int>>",
                                            "thresholds",
                                            "std::vector<std::vector<int>>()"
                                        ],
                                        [
                                            "bool",
                                            "invert",
                                            "false"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "area_threshold",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "pixels_threshold",
                                            "10"
                                        ],
                                        [
                                            "bool",
                                            "merge",
                                            "false"
                                        ],
                                        [
                                            "int",
                                            "margin",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "x_hist_bins_max",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y_hist_bins_max",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Blob>",
                                    "static": false,
                                    "def": "std::vector<image::Blob> find_blobs(std::vector<std::vector<int>> thresholds = std::vector<std::vector<int>>(), bool invert = false, std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int area_threshold = 10, int pixels_threshold = 10, bool merge = false, int margin = 0, int x_hist_bins_max = 0, int y_hist_bins_max = 0)",
                                    "py_def": "def find_blobs(self, thresholds: list[list[int]] = [], invert: bool = False, roi: list[int] = [], x_stride: int = 2, y_stride: int = 1, area_threshold: int = 10, pixels_threshold: int = 10, merge: bool = False, margin: int = 0, x_hist_bins_max: int = 0, y_hist_bins_max: int = 0) -> list[Blob]"
                                },
                                "find_lines": {
                                    "type": "func",
                                    "name": "find_lines",
                                    "doc": {
                                        "brief": "Find lines in image",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "threshold": "threshold threshold controls what lines are detected from the hough transform. Only lines with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent. default is 1000.",
                                            "theta_margin": "theta_margin controls the merging of detected lines. default is 25.",
                                            "rho_margin": "rho_margin controls the merging of detected lines. default is 25."
                                        },
                                        "return": "Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_lines",
                                        "py_doc": "Find lines in image\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - threshold: threshold threshold controls what lines are detected from the hough transform. Only lines with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent. default is 1000.\n  - theta_margin: theta_margin controls the merging of detected lines. default is 25.\n  - rho_margin: rho_margin controls the merging of detected lines. default is 25.\n\n\nReturns: Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "double",
                                            "threshold",
                                            "1000"
                                        ],
                                        [
                                            "double",
                                            "theta_margin",
                                            "25"
                                        ],
                                        [
                                            "double",
                                            "rho_margin",
                                            "25"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> find_lines(std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, double threshold = 1000, double theta_margin = 25, double rho_margin = 25)",
                                    "py_def": "def find_lines(self, roi: list[int] = [], x_stride: int = 2, y_stride: int = 1, threshold: float = 1000, theta_margin: float = 25, rho_margin: float = 25) -> list[Line]"
                                },
                                "find_line_segments": {
                                    "type": "func",
                                    "name": "find_line_segments",
                                    "doc": {
                                        "brief": "Finds all line segments in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "merge_distance": "The maximum distance between two lines to merge them. default is 0.",
                                            "max_theta_difference": "The maximum difference between two lines to merge them. default is 15."
                                        },
                                        "return": "Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_line_segments",
                                        "py_doc": "Finds all line segments in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - merge_distance: The maximum distance between two lines to merge them. default is 0.\n  - max_theta_difference: The maximum difference between two lines to merge them. default is 15.\n\n\nReturns: Return the line when found lines, format is (line1, line2, ...), you can use line class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "merge_distance",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "max_theta_difference",
                                            "15"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Line>",
                                    "static": false,
                                    "def": "std::vector<image::Line> find_line_segments(std::vector<int> roi = std::vector<int>(), int merge_distance = 0, int max_theta_difference = 15)",
                                    "py_def": "def find_line_segments(self, roi: list[int] = [], merge_distance: int = 0, max_theta_difference: int = 15) -> list[Line]"
                                },
                                "find_circles": {
                                    "type": "func",
                                    "name": "find_circles",
                                    "doc": {
                                        "brief": "Find circles in image",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "x_stride": "x stride is the number of x pixels to skip when doing the hough transform. default is 2",
                                            "y_stride": "y_stride is the number of y pixels to skip when doing the hough transform. default is 1",
                                            "threshold": "threshold controls what circles are detected from the hough transform. Only circles with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent.",
                                            "x_margin": "x_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "y_margin": "y_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "r_margin": "r_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10",
                                            "r_min": "r_min controls the minimum circle radius detected. Increase this to speed up the algorithm. default is 2",
                                            "r_max": "r_max controls the maximum circle radius detected. Decrease this to speed up the algorithm. default is min(roi.w / 2, roi.h / 2)",
                                            "r_step": "r_step controls how to step the radius detection by. default is 2."
                                        },
                                        "return": "Return the circle when found circles, format is (circle1, circle2, ...), you can use circle class methods to do more operations",
                                        "maixpy": "maix.image.Image.find_circles",
                                        "py_doc": "Find circles in image\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - x_stride: x stride is the number of x pixels to skip when doing the hough transform. default is 2\n  - y_stride: y_stride is the number of y pixels to skip when doing the hough transform. default is 1\n  - threshold: threshold controls what circles are detected from the hough transform. Only circles with a magnitude greater than or equal to threshold are returned.\nThe right value of threshold for your application is image dependent.\n  - x_margin: x_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - y_margin: y_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - r_margin: r_margin controls the merging of detected circles. Circles which are x_margin, y_margin, and r_margin pixels apart are merged. default is 10\n  - r_min: r_min controls the minimum circle radius detected. Increase this to speed up the algorithm. default is 2\n  - r_max: r_max controls the maximum circle radius detected. Decrease this to speed up the algorithm. default is min(roi.w / 2, roi.h / 2)\n  - r_step: r_step controls how to step the radius detection by. default is 2.\n\n\nReturns: Return the circle when found circles, format is (circle1, circle2, ...), you can use circle class methods to do more operations\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "x_stride",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "y_stride",
                                            "1"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "2000"
                                        ],
                                        [
                                            "int",
                                            "x_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "y_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "r_margin",
                                            "10"
                                        ],
                                        [
                                            "int",
                                            "r_min",
                                            "2"
                                        ],
                                        [
                                            "int",
                                            "r_max",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "r_step",
                                            "2"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Circle>",
                                    "static": false,
                                    "def": "std::vector<image::Circle> find_circles(std::vector<int> roi = std::vector<int>(), int x_stride = 2, int y_stride = 1, int threshold = 2000, int x_margin = 10, int y_margin = 10, int r_margin = 10, int r_min = 2, int r_max = -1, int r_step = 2)",
                                    "py_def": "def find_circles(self, roi: list[int] = [], x_stride: int = 2, y_stride: int = 1, threshold: int = 2000, x_margin: int = 10, y_margin: int = 10, r_margin: int = 10, r_min: int = 2, r_max: int = -1, r_step: int = 2) -> list[Circle]"
                                },
                                "find_rects": {
                                    "type": "func",
                                    "name": "find_rects",
                                    "doc": {
                                        "brief": "Finds all rects in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the rects. default is 10000."
                                        },
                                        "return": "Returns the rects of the image",
                                        "maixpy": "maix.image.Image.find_rects",
                                        "py_doc": "Finds all rects in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the rects. default is 10000.\n\n\nReturns: Returns the rects of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "10000"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::Rect>",
                                    "static": false,
                                    "def": "std::vector<image::Rect> find_rects(std::vector<int> roi = std::vector<int>(), int threshold = 10000)",
                                    "py_def": "def find_rects(self, roi: list[int] = [], threshold: int = 10000) -> list[Rect]"
                                },
                                "find_qrcodes": {
                                    "type": "func",
                                    "name": "find_qrcodes",
                                    "doc": {
                                        "brief": "Finds all qrcodes in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the qrcodes of the image",
                                        "maixpy": "maix.image.Image.find_qrcodes",
                                        "py_doc": "Finds all qrcodes in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the qrcodes of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::QRCode>",
                                    "static": false,
                                    "def": "std::vector<image::QRCode> find_qrcodes(std::vector<int> roi = std::vector<int>())",
                                    "py_def": "def find_qrcodes(self, roi: list[int] = []) -> list[QRCode]"
                                },
                                "find_apriltags": {
                                    "type": "func",
                                    "name": "find_apriltags",
                                    "doc": {
                                        "brief": "Finds all apriltags in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "families": "The families to use for the apriltags. default is TAG36H11.",
                                            "fx": "The camera X focal length in pixels, default is -1.",
                                            "fy": "The camera Y focal length in pixels, default is -1.",
                                            "cx": "The camera X center in pixels, default is image.width / 2.",
                                            "cy": "The camera Y center in pixels, default is image.height / 2."
                                        },
                                        "return": "Returns the apriltags of the image",
                                        "maixpy": "maix.image.Image.find_apriltags",
                                        "py_doc": "Finds all apriltags in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - families: The families to use for the apriltags. default is TAG36H11.\n  - fx: The camera X focal length in pixels, default is -1.\n  - fy: The camera Y focal length in pixels, default is -1.\n  - cx: The camera X center in pixels, default is image.width / 2.\n  - cy: The camera Y center in pixels, default is image.height / 2.\n\n\nReturns: Returns the apriltags of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "image::ApriltagFamilies",
                                            "families",
                                            "image::ApriltagFamilies::TAG36H11"
                                        ],
                                        [
                                            "float",
                                            "fx",
                                            "-1"
                                        ],
                                        [
                                            "float",
                                            "fy",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "cx",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "cy",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::AprilTag>",
                                    "static": false,
                                    "def": "std::vector<image::AprilTag> find_apriltags(std::vector<int> roi = std::vector<int>(), image::ApriltagFamilies families = image::ApriltagFamilies::TAG36H11, float fx = -1, float fy = -1, int cx = -1, int cy = -1)",
                                    "py_def": "def find_apriltags(self, roi: list[int] = [], families: ApriltagFamilies = ..., fx: float = -1, fy: float = -1, cx: int = -1, cy: int = -1) -> list[AprilTag]"
                                },
                                "find_datamatrices": {
                                    "type": "func",
                                    "name": "find_datamatrices",
                                    "doc": {
                                        "brief": "Finds all datamatrices in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "effort": "Controls how much time to spend trying to find data matrix matches. default is 200."
                                        },
                                        "return": "Returns the datamatrices of the image",
                                        "maixpy": "maix.image.Image.find_datamatrices",
                                        "py_doc": "Finds all datamatrices in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - effort: Controls how much time to spend trying to find data matrix matches. default is 200.\n\n\nReturns: Returns the datamatrices of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "effort",
                                            "200"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::DataMatrix>",
                                    "static": false,
                                    "def": "std::vector<image::DataMatrix> find_datamatrices(std::vector<int> roi = std::vector<int>(), int effort = 200)",
                                    "py_def": "def find_datamatrices(self, roi: list[int] = [], effort: int = 200) -> list[DataMatrix]"
                                },
                                "find_barcodes": {
                                    "type": "func",
                                    "name": "find_barcodes",
                                    "doc": {
                                        "brief": "Finds all barcodes in the image.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the barcodes of the image",
                                        "maixpy": "maix.image.Image.find_barcodes",
                                        "py_doc": "Finds all barcodes in the image.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the barcodes of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<image::BarCode>",
                                    "static": false,
                                    "def": "std::vector<image::BarCode> find_barcodes(std::vector<int> roi = std::vector<int>())",
                                    "py_def": "def find_barcodes(self, roi: list[int] = []) -> list[BarCode]"
                                },
                                "find_displacement": {
                                    "type": "func",
                                    "name": "find_displacement",
                                    "doc": {
                                        "brief": "Finds the displacement between the image and the template.    TODO: support in the feature\\nnote: this method must be used on power-of-2 image sizes",
                                        "param": {
                                            "template_image": "The template image.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "template_roi": "The region-of-interest rectangle (x, y, w, h) to work in. If not specified, it is equal to the image rectangle.",
                                            "logpolar": "If true, it will instead find rotation and scale changes between the two images. default is false."
                                        },
                                        "return": "Returns the displacement of the image",
                                        "maixpy": "maix.image.Image.find_displacement",
                                        "py_doc": "Finds the displacement between the image and the template.    TODO: support in the feature\nnote: this method must be used on power-of-2 image sizes\n\nArgs:\n  - template_image: The template image.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - template_roi: The region-of-interest rectangle (x, y, w, h) to work in. If not specified, it is equal to the image rectangle.\n  - logpolar: If true, it will instead find rotation and scale changes between the two images. default is false.\n\n\nReturns: Returns the displacement of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "template_image",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "template_roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "bool",
                                            "logpolar",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::Displacement",
                                    "static": false,
                                    "def": "image::Displacement find_displacement(image::Image &template_image, std::vector<int> roi = std::vector<int>(), std::vector<int> template_roi = std::vector<int>(), bool logpolar = false)",
                                    "py_def": "def find_displacement(self, template_image: Image, roi: list[int] = [], template_roi: list[int] = [], logpolar: bool = False) -> Displacement"
                                },
                                "find_template": {
                                    "type": "func",
                                    "name": "find_template",
                                    "doc": {
                                        "brief": "Finds the template in the image.",
                                        "param": {
                                            "template_image": "The template image.",
                                            "threshold": "Threshold is floating point number (0.0-1.0) where a higher threshold prevents false positives while lowering the detection rate while a lower threshold does the opposite.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image. Only valid in SEARCH_EX mode.",
                                            "step": "The step size to use for the template. default is 2. Only valid in SEARCH_EX mode",
                                            "search": "The search method to use for the template. default is SEARCH_EX."
                                        },
                                        "return": "Returns a bounding box tuple (x, y, w, h) for the matching location otherwise None.",
                                        "maixpy": "maix.image.Image.find_template",
                                        "py_doc": "Finds the template in the image.\n\nArgs:\n  - template_image: The template image.\n  - threshold: Threshold is floating point number (0.0-1.0) where a higher threshold prevents false positives while lowering the detection rate while a lower threshold does the opposite.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image. Only valid in SEARCH_EX mode.\n  - step: The step size to use for the template. default is 2. Only valid in SEARCH_EX mode\n  - search: The search method to use for the template. default is SEARCH_EX.\n\n\nReturns: Returns a bounding box tuple (x, y, w, h) for the matching location otherwise None.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "template_image",
                                            null
                                        ],
                                        [
                                            "float",
                                            "threshold",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "step",
                                            "2"
                                        ],
                                        [
                                            "image::TemplateMatch",
                                            "search",
                                            "image::TemplateMatch::SEARCH_EX"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> find_template(image::Image &template_image, float threshold, std::vector<int> roi = std::vector<int>(), int step = 2, image::TemplateMatch search = image::TemplateMatch::SEARCH_EX)",
                                    "py_def": "def find_template(self, template_image: Image, threshold: float, roi: list[int] = [], step: int = 2, search: TemplateMatch = ...) -> list[int]"
                                },
                                "find_features": {
                                    "type": "func",
                                    "name": "find_features",
                                    "doc": {
                                        "brief": "Finds the features in the image.  TODO: support in the feature",
                                        "param": {
                                            "cascade": "The cascade to use for the features. default is CASCADE_FRONTALFACE_ALT.",
                                            "threshold": "The threshold to use for the features. default is 0.5.",
                                            "scale": "The scale to use for the features. default is 1.5.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the features of the image",
                                        "maixpy": "maix.image.Image.find_features",
                                        "py_doc": "Finds the features in the image.  TODO: support in the feature\n\nArgs:\n  - cascade: The cascade to use for the features. default is CASCADE_FRONTALFACE_ALT.\n  - threshold: The threshold to use for the features. default is 0.5.\n  - scale: The scale to use for the features. default is 1.5.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the features of the image\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "cascade",
                                            null
                                        ],
                                        [
                                            "float",
                                            "threshold",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            "1.5"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> find_features(int cascade, float threshold = 0.5, float scale = 1.5, std::vector<int> roi = std::vector<int>())",
                                    "py_def": "def find_features(self, cascade: int, threshold: float = 0.5, scale: float = 1.5, roi: list[int] = []) -> list[int]"
                                },
                                "find_lbp": {
                                    "type": "func",
                                    "name": "find_lbp",
                                    "doc": {
                                        "brief": "Finds the lbp in the image. TODO: support in the feature.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image."
                                        },
                                        "return": "Returns the lbp of the image",
                                        "maixpy": "maix.image.Image.find_lbp",
                                        "py_doc": "Finds the lbp in the image. TODO: support in the feature.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n\n\nReturns: Returns the lbp of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "image::LBPKeyPoint",
                                    "static": false,
                                    "def": "image::LBPKeyPoint find_lbp(std::vector<int> roi = std::vector<int>())",
                                    "py_def": "def find_lbp(self, roi: list[int] = []) -> LBPKeyPoint"
                                },
                                "find_keypoints": {
                                    "type": "func",
                                    "name": "find_keypoints",
                                    "doc": {
                                        "brief": "Finds the keypoints in the image. TODO: support in the feature.",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the keypoints. default is 20.",
                                            "normalized": "If true, the image will be normalized before the operation. default is false.",
                                            "scale_factor": "The scale factor to use for the keypoints. default is 1.5.",
                                            "max_keypoints": "The maximum number of keypoints to use for the keypoints. default is 100.",
                                            "corner_detector": "The corner detector to use for the keypoints. default is CORNER_AGAST."
                                        },
                                        "return": "Returns the keypoints of the image",
                                        "maixpy": "maix.image.Image.find_keypoints",
                                        "py_doc": "Finds the keypoints in the image. TODO: support in the feature.\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the keypoints. default is 20.\n  - normalized: If true, the image will be normalized before the operation. default is false.\n  - scale_factor: The scale factor to use for the keypoints. default is 1.5.\n  - max_keypoints: The maximum number of keypoints to use for the keypoints. default is 100.\n  - corner_detector: The corner detector to use for the keypoints. default is CORNER_AGAST.\n\n\nReturns: Returns the keypoints of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "20"
                                        ],
                                        [
                                            "bool",
                                            "normalized",
                                            "false"
                                        ],
                                        [
                                            "float",
                                            "scale_factor",
                                            "1.5"
                                        ],
                                        [
                                            "int",
                                            "max_keypoints",
                                            "100"
                                        ],
                                        [
                                            "image::CornerDetector",
                                            "corner_detector",
                                            "image::CornerDetector::CORNER_AGAST"
                                        ]
                                    ],
                                    "ret_type": "image::ORBKeyPoint",
                                    "static": false,
                                    "def": "image::ORBKeyPoint find_keypoints(std::vector<int> roi = std::vector<int>(), int threshold = 20, bool normalized = false, float scale_factor = 1.5, int max_keypoints = 100, image::CornerDetector corner_detector = image::CornerDetector::CORNER_AGAST)",
                                    "py_def": "def find_keypoints(self, roi: list[int] = [], threshold: int = 20, normalized: bool = False, scale_factor: float = 1.5, max_keypoints: int = 100, corner_detector: CornerDetector = ...) -> ORBKeyPoint"
                                },
                                "find_edges": {
                                    "type": "func",
                                    "name": "find_edges",
                                    "doc": {
                                        "brief": "Finds the edges in the image.",
                                        "param": {
                                            "edge_type": "The edge type to use for the edges. default is EDGE_CANNY.",
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "threshold": "The threshold to use for the edges. default is 20."
                                        },
                                        "return": "Returns the edges of the image",
                                        "maixpy": "maix.image.Image.find_edges",
                                        "py_doc": "Finds the edges in the image.\n\nArgs:\n  - edge_type: The edge type to use for the edges. default is EDGE_CANNY.\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - threshold: The threshold to use for the edges. default is 20.\n\n\nReturns: Returns the edges of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::EdgeDetector",
                                            "edge_type",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "threshold",
                                            "std::vector<int>({100, 200})"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image* find_edges(image::EdgeDetector edge_type, std::vector<int> roi = std::vector<int>(), std::vector<int> threshold = std::vector<int>({100, 200}))",
                                    "py_def": "def find_edges(self, edge_type: EdgeDetector, roi: list[int] = [], threshold: list[int] = [100, 200]) -> Image"
                                },
                                "find_hog": {
                                    "type": "func",
                                    "name": "find_hog",
                                    "doc": {
                                        "brief": "Finds the hog in the image.   TODO: support in the feature",
                                        "param": {
                                            "roi": "The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.",
                                            "size": "The size to use for the hog. default is 8."
                                        },
                                        "return": "Returns the hog of the image",
                                        "maixpy": "maix.image.Image.find_hog",
                                        "py_doc": "Finds the hog in the image.   TODO: support in the feature\n\nArgs:\n  - roi: The region of interest, input in the format of (x, y, w, h), x and y are the coordinates of the upper left corner, w and h are the width and height of roi.\ndefault is None, means whole image.\n  - size: The size to use for the hog. default is 8.\n\n\nReturns: Returns the hog of the image\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image* find_hog(std::vector<int> roi = std::vector<int>(), int size = 8)",
                                    "py_def": "def find_hog(self, roi: list[int] = [], size: int = 8) -> Image"
                                },
                                "match_lbp_descriptor": {
                                    "type": "func",
                                    "name": "match_lbp_descriptor",
                                    "doc": {
                                        "brief": "Matches the lbp descriptor of the image.  TODO: support in the feature",
                                        "param": {
                                            "desc1": "The descriptor to use for the match.",
                                            "desc2": "The descriptor to use for the match."
                                        },
                                        "return": "Returns the match of the image",
                                        "maixpy": "maix.image.Image.match_lbp_descriptor",
                                        "py_doc": "Matches the lbp descriptor of the image.  TODO: support in the feature\n\nArgs:\n  - desc1: The descriptor to use for the match.\n  - desc2: The descriptor to use for the match.\n\n\nReturns: Returns the match of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::LBPKeyPoint &",
                                            "desc1",
                                            null
                                        ],
                                        [
                                            "image::LBPKeyPoint &",
                                            "desc2",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int match_lbp_descriptor(image::LBPKeyPoint &desc1, image::LBPKeyPoint &desc2)",
                                    "py_def": "def match_lbp_descriptor(self, desc1: LBPKeyPoint, desc2: LBPKeyPoint) -> int"
                                },
                                "match_orb_descriptor": {
                                    "type": "func",
                                    "name": "match_orb_descriptor",
                                    "doc": {
                                        "brief": "Matches the orb descriptor of the image. TODO: support in the feature",
                                        "param": {
                                            "desc1": "The descriptor to use for the match.",
                                            "desc2": "The descriptor to use for the match.",
                                            "threshold": "The threshold to use for the match. default is 95.",
                                            "filter_outliers": "If true, the image will be filter_outliers before the operation. default is false."
                                        },
                                        "return": "Returns the match of the image",
                                        "maixpy": "maix.image.Image.match_orb_descriptor",
                                        "py_doc": "Matches the orb descriptor of the image. TODO: support in the feature\n\nArgs:\n  - desc1: The descriptor to use for the match.\n  - desc2: The descriptor to use for the match.\n  - threshold: The threshold to use for the match. default is 95.\n  - filter_outliers: If true, the image will be filter_outliers before the operation. default is false.\n\n\nReturns: Returns the match of the image\n"
                                    },
                                    "args": [
                                        [
                                            "image::ORBKeyPoint &",
                                            "desc1",
                                            null
                                        ],
                                        [
                                            "image::ORBKeyPoint &",
                                            "desc2",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "95"
                                        ],
                                        [
                                            "bool",
                                            "filter_outliers",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "image::KPTMatch",
                                    "static": false,
                                    "def": "image::KPTMatch match_orb_descriptor(image::ORBKeyPoint &desc1, image::ORBKeyPoint &desc2, int threshold = 95, bool filter_outliers = false)",
                                    "py_def": "def match_orb_descriptor(self, desc1: ORBKeyPoint, desc2: ORBKeyPoint, threshold: int = 95, filter_outliers: bool = False) -> KPTMatch"
                                }
                            },
                            "def": "class Image"
                        },
                        "load": {
                            "type": "func",
                            "name": "load",
                            "doc": {
                                "brief": "Load image from file, and convert to Image object",
                                "param": {
                                    "path": "image file path",
                                    "format": "read as this format, if not match, will convert to this format, by default is RGB888"
                                },
                                "return": "Image object, if load failed, will return None(nullptr in C++), so you should care about it.",
                                "maixpy": "maix.image.load",
                                "py_doc": "Load image from file, and convert to Image object\n\nArgs:\n  - path: image file path\n  - format: read as this format, if not match, will convert to this format, by default is RGB888\n\n\nReturns: Image object, if load failed, will return None(nullptr in C++), so you should care about it.\n"
                            },
                            "args": [
                                [
                                    "const char *",
                                    "path",
                                    null
                                ],
                                [
                                    "image::Format",
                                    "format",
                                    "image::Format::FMT_RGB888"
                                ]
                            ],
                            "ret_type": "image::Image*",
                            "static": false,
                            "def": "image::Image *load(const char *path, image::Format format = image::Format::FMT_RGB888)",
                            "py_def": "def load(path: str, format: Format = ...) -> Image"
                        },
                        "from_bytes": {
                            "type": "func",
                            "name": "from_bytes",
                            "doc": {
                                "brief": "Create image from bytes",
                                "param": {
                                    "width": "image width",
                                    "height": "image height",
                                    "format": "image format",
                                    "data": "image data, if data is None, will malloc memory for image data\nIf the image is in jpeg format, data must be filled in.",
                                    "copy": "if true and data is not None, will copy data to new buffer, else will use data directly. default is true to avoid memory leak.\nUse it carefully!!!"
                                },
                                "return": "Image object",
                                "maixpy": "maix.image.from_bytes",
                                "py_doc": "Create image from bytes\n\nArgs:\n  - width: image width\n  - height: image height\n  - format: image format\n  - data: image data, if data is None, will malloc memory for image data\nIf the image is in jpeg format, data must be filled in.\n  - copy: if true and data is not None, will copy data to new buffer, else will use data directly. default is true to avoid memory leak.\nUse it carefully!!!\n\n\nReturns: Image object\n"
                            },
                            "args": [
                                [
                                    "int",
                                    "width",
                                    null
                                ],
                                [
                                    "int",
                                    "height",
                                    null
                                ],
                                [
                                    "image::Format",
                                    "format",
                                    null
                                ],
                                [
                                    "Bytes *",
                                    "data",
                                    null
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "image::Image*",
                            "static": false,
                            "def": "image::Image *from_bytes(int width, int height, image::Format format, Bytes *data, bool copy = true)",
                            "py_def": "def from_bytes(width: int, height: int, format: Format, data: maix.Bytes(bytes), copy: bool = True) -> Image"
                        },
                        "load_font": {
                            "type": "func",
                            "name": "load_font",
                            "doc": {
                                "brief": "Load font from file",
                                "param": {
                                    "name": "font name, used to identify font",
                                    "path": "font file path, support ttf, ttc, otf",
                                    "size": "font size, font height, by default is 16"
                                },
                                "return": "error code, err::ERR_NONE is ok, other is error",
                                "maixpy": "maix.image.load_font",
                                "py_doc": "Load font from file\n\nArgs:\n  - name: font name, used to identify font\n  - path: font file path, support ttf, ttc, otf\n  - size: font size, font height, by default is 16\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "name",
                                    null
                                ],
                                [
                                    "const char *",
                                    "path",
                                    null
                                ],
                                [
                                    "int",
                                    "size",
                                    "16"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err load_font(const std::string &name, const char *path, int size = 16)",
                            "py_def": "def load_font(name: str, path: str, size: int = 16) -> maix.err.Err"
                        },
                        "set_default_font": {
                            "type": "func",
                            "name": "set_default_font",
                            "doc": {
                                "brief": "Set default font, if not call this method, default is hershey_plain",
                                "param": {
                                    "name": "font name, supported names can be get by fonts()"
                                },
                                "return": "error code, err::ERR_NONE is ok, other is error",
                                "maixpy": "maix.image.set_default_font",
                                "py_doc": "Set default font, if not call this method, default is hershey_plain\n\nArgs:\n  - name: font name, supported names can be get by fonts()\n\n\nReturns: error code, err::ERR_NONE is ok, other is error\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "name",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_default_font(const std::string &name)"
                        },
                        "fonts": {
                            "type": "func",
                            "name": "fonts",
                            "doc": {
                                "brief": "Get all loaded fonts",
                                "return": "all loaded fonts, string list type",
                                "maixpy": "maix.image.fonts",
                                "py_doc": "Get all loaded fonts\n\nReturns: all loaded fonts, string list type\n"
                            },
                            "args": [],
                            "ret_type": "std::vector<std::string>*",
                            "static": false,
                            "def": "std::vector<std::string> *fonts()",
                            "py_def": "def fonts() -> list[str]"
                        },
                        "string_size": {
                            "type": "func",
                            "name": "string_size",
                            "doc": {
                                "brief": "Get text rendered width and height",
                                "param": {
                                    "string": "text content",
                                    "scale": "font scale, by default(value is 1)",
                                    "thickness": "text thickness(line width), by default(value is 1)"
                                },
                                "return": "text rendered width and height, [width, height]",
                                "maixpy": "maix.image.string_size",
                                "py_doc": "Get text rendered width and height\n\nArgs:\n  - string: text content\n  - scale: font scale, by default(value is 1)\n  - thickness: text thickness(line width), by default(value is 1)\n\n\nReturns: text rendered width and height, [width, height]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "string",
                                    null
                                ],
                                [
                                    "float",
                                    "scale",
                                    "1"
                                ],
                                [
                                    "int",
                                    "thickness",
                                    "1"
                                ],
                                [
                                    "const std::string &",
                                    "font",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "image::Size",
                            "static": false,
                            "def": "image::Size string_size(std::string string, float scale = 1, int thickness = 1, const std::string &font = \"\")",
                            "py_def": "def string_size(string: str, scale: float = 1, thickness: int = 1, font: str = '') -> Size"
                        },
                        "cv2image": {
                            "type": "func",
                            "name": "cv2image",
                            "doc": {
                                "brief": "OpenCV Mat(numpy array object) to Image object",
                                "param": {
                                    "array": "numpy array object, must be a 3-dim or 2-dim continuous array with shape hwc or hw",
                                    "bgr": "if set bgr, the return image will be marked as BGR888 or BGRA8888 format, grayscale will ignore this arg.",
                                    "copy": "if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return img of this func, or will cause program crash."
                                },
                                "return": "Image object",
                                "maixpy": "maix.image.cv2image",
                                "py_doc": "OpenCV Mat(numpy array object) to Image object\n\nArgs:\n  - array: numpy array object, must be a 3-dim or 2-dim continuous array with shape hwc or hw\n  - bgr: if set bgr, the return image will be marked as BGR888 or BGRA8888 format, grayscale will ignore this arg.\n  - copy: if true, will alloc new buffer and copy data, else will directly use array's data buffer, default true.\nUse this arg carefully, when set to false, ther array MUST keep alive until we don't use the return img of this func, or will cause program crash.\n\n\nReturns: Image object\n"
                            },
                            "args": [
                                [
                                    "py::array_t<uint8_t, py::array::c_style>",
                                    "array",
                                    null
                                ],
                                [
                                    "bool",
                                    "bgr",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "image::Image*",
                            "static": false,
                            "def": "image::Image *cv2image(py::array_t<uint8_t, py::array::c_style> array, bool bgr = true, bool copy = true)",
                            "py_def": "def cv2image(array: numpy.ndarray[numpy.uint8], bgr: bool = True, copy: bool = True) -> Image"
                        },
                        "image2cv": {
                            "type": "func",
                            "name": "image2cv",
                            "doc": {
                                "brief": "Image object to OpenCV Mat(numpy array object)",
                                "param": {
                                    "img": "Image object, maix.image.Image type.",
                                    "ensure_bgr": "auto convert to BGR888 or BGRA8888 if img format is not BGR or BGRA, if set to false, will not auto convert and directly use img's data, default true.",
                                    "copy": "Whether alloc new image and copy data or not, if ensure_bgr and img is not bgr or bgra format, always copy,\nif not copy, array object will directly use img's data buffer, will faster but change array will affect img's data, default true."
                                },
                                "attention": "take care of ensure_bgr and copy param.",
                                "return": "numpy array object",
                                "maixpy": "maix.image.image2cv",
                                "py_doc": "Image object to OpenCV Mat(numpy array object)\n\nArgs:\n  - img: Image object, maix.image.Image type.\n  - ensure_bgr: auto convert to BGR888 or BGRA8888 if img format is not BGR or BGRA, if set to false, will not auto convert and directly use img's data, default true.\n  - copy: Whether alloc new image and copy data or not, if ensure_bgr and img is not bgr or bgra format, always copy,\nif not copy, array object will directly use img's data buffer, will faster but change array will affect img's data, default true.\n\n\nReturns: numpy array object\n"
                            },
                            "args": [
                                [
                                    "image::Image *",
                                    "img",
                                    null
                                ],
                                [
                                    "bool",
                                    "ensure_bgr",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "copy",
                                    "true"
                                ]
                            ],
                            "ret_type": "py::array_t<uint8_t, py::array::c_style>",
                            "static": false,
                            "def": "py::array_t<uint8_t, py::array::c_style> image2cv(image::Image *img, bool ensure_bgr = true, bool copy = true)",
                            "py_def": "def image2cv(img: Image, ensure_bgr: bool = True, copy: bool = True) -> numpy.ndarray[numpy.uint8]"
                        }
                    },
                    "auto_add": true
                },
                "camera": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.camera module, access camera device and get image from it",
                        "maixpy": "maix.camera",
                        "py_doc": "maix.camera module, access camera device and get image from it"
                    },
                    "members": {
                        "list_devices": {
                            "type": "func",
                            "name": "list_devices",
                            "doc": {
                                "brief": "List all supported camera devices.",
                                "return": "Returns the path to the camera device.",
                                "maixpy": "maix.camera.list_devices",
                                "py_doc": "List all supported camera devices.\n\nReturns: Returns the path to the camera device.\n"
                            },
                            "args": [],
                            "ret_type": "std::vector<std::string>",
                            "static": false,
                            "def": "std::vector<std::string> list_devices()",
                            "py_def": "def list_devices() -> list[str]"
                        },
                        "set_regs_enable": {
                            "type": "func",
                            "name": "set_regs_enable",
                            "doc": {
                                "brief": "Enable set camera registers, default is false, if set to true, will not set camera registers, you can manually set registers by write_reg API.",
                                "param": {
                                    "enable": "enable/disable set camera registers"
                                },
                                "maixpy": "maix.camera.set_regs_enable",
                                "py_doc": "Enable set camera registers, default is false, if set to true, will not set camera registers, you can manually set registers by write_reg API.\n\nArgs:\n  - enable: enable/disable set camera registers\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "enable",
                                    "true"
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_regs_enable(bool enable = true)",
                            "py_def": "def set_regs_enable(enable: bool = True) -> None"
                        },
                        "Camera": {
                            "type": "class",
                            "name": "Camera",
                            "doc": {
                                "brief": "Camera class",
                                "maixpy": "maix.camera.Camera",
                                "py_doc": "Camera class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Camera",
                                    "doc": {
                                        "brief": "Construct a new Camera object.\\nMaximum resolution support 2560x1440.",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default is image.Format.FMT_RGB888",
                                            "device": "camera device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.",
                                            "open": "If true, camera will automatically call open() after creation. default is true.",
                                            "raw": "If true, you can use read_raw() to capture the raw image output from the sensor."
                                        },
                                        "maixpy": "maix.camera.Camera.__init__",
                                        "maixcdk": "maix.camera.Camera.Camera",
                                        "py_doc": "Construct a new Camera object.\nMaximum resolution support 2560x1440.\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default is image.Format.FMT_RGB888\n  - device: camera device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n  - open: If true, camera will automatically call open() after creation. default is true.\n  - raw: If true, you can use read_raw() to capture the raw image output from the sensor.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "const char *",
                                            "device",
                                            "nullptr"
                                        ],
                                        [
                                            "double",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "3"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ],
                                        [
                                            "bool",
                                            "raw",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Camera(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, const char *device = nullptr, double fps = -1, int buff_num = 3, bool open = true, bool raw = false)",
                                    "py_def": "def __init__(self, width: int = -1, height: int = -1, format: maix.image.Format = ..., device: str = None, fps: float = -1, buff_num: int = 3, open: bool = True, raw: bool = False) -> None"
                                },
                                "get_ch_nums": {
                                    "type": "func",
                                    "name": "get_ch_nums",
                                    "doc": {
                                        "brief": "Get the number of channels supported by the camera.",
                                        "return": "Returns the maximum number of channels.",
                                        "maixpy": "maix.camera.Camera.get_ch_nums",
                                        "py_doc": "Get the number of channels supported by the camera.\n\nReturns: Returns the maximum number of channels.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_ch_nums()",
                                    "py_def": "def get_ch_nums(self) -> int"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Open camera and run",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default same as the constructor's format argument",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory."
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.open",
                                        "py_doc": "Open camera and run\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default same as the constructor's format argument\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_INVALID"
                                        ],
                                        [
                                            "double",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(int width = -1, int height = -1, image::Format format = image::FMT_INVALID, double fps = -1, int buff_num = -1)",
                                    "py_def": "def open(self, width: int = -1, height: int = -1, format: maix.image.Format = ..., fps: float = -1, buff_num: int = -1) -> maix.err.Err"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "Get one frame image from camera buffer, must call open method before read.\\nIf open method not called, will call it automatically, if open failed, will throw exception!\\nSo call open method before read is recommended.",
                                        "param": {
                                            "buff": "buffer to store image data, if buff is nullptr, will alloc memory automatically.\nIn MaixPy, default to None, you can create a image.Image object, then pass img.data() to buff.",
                                            "block": "block read, default is true, means block util read image successfully,\nif set to false, will return nullptr if no image in buffer",
                                            "block_ms": "block read timeout"
                                        },
                                        "return": "image::Image object, if failed, return nullptr, you should delete if manually in C++",
                                        "maixpy": "maix.camera.Camera.read",
                                        "py_doc": "Get one frame image from camera buffer, must call open method before read.\nIf open method not called, will call it automatically, if open failed, will throw exception!\nSo call open method before read is recommended.\n\nArgs:\n  - buff: buffer to store image data, if buff is nullptr, will alloc memory automatically.\nIn MaixPy, default to None, you can create a image.Image object, then pass img.data() to buff.\n  - block: block read, default is true, means block util read image successfully,\nif set to false, will return nullptr if no image in buffer\n  - block_ms: block read timeout\n\n\nReturns: image::Image object, if failed, return nullptr, you should delete if manually in C++\n"
                                    },
                                    "args": [
                                        [
                                            "void *",
                                            "buff",
                                            "nullptr"
                                        ],
                                        [
                                            "size_t",
                                            "buff_size",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "block",
                                            "true"
                                        ],
                                        [
                                            "int",
                                            "block_ms",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *read(void *buff = nullptr, size_t buff_size = 0, bool block = true, int block_ms = -1)",
                                    "py_def": "def read(self, buff: capsule = None, buff_size: int = 0, block: bool = True, block_ms: int = -1) -> maix.image.Image"
                                },
                                "read_raw": {
                                    "type": "func",
                                    "name": "read_raw",
                                    "doc": {
                                        "brief": "Read the raw image and obtain the width, height, and format of the raw image through the returned Image object.",
                                        "note": "The raw image is in a Bayer format, and its width and height are affected by the driver. Modifying the size and format is generally not allowed.",
                                        "return": "image::Image object, if failed, return nullptr, you should delete if manually in C++",
                                        "maixpy": "maix.camera.Camera.read_raw",
                                        "py_doc": "Read the raw image and obtain the width, height, and format of the raw image through the returned Image object.\n\nReturns: image::Image object, if failed, return nullptr, you should delete if manually in C++\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *read_raw()",
                                    "py_def": "def read_raw(self) -> maix.image.Image"
                                },
                                "clear_buff": {
                                    "type": "func",
                                    "name": "clear_buff",
                                    "doc": {
                                        "brief": "Clear buff to ensure the next read image is the latest image",
                                        "maixpy": "maix.camera.Camera.clear_buff",
                                        "py_doc": "Clear buff to ensure the next read image is the latest image"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void clear_buff()",
                                    "py_def": "def clear_buff(self) -> None"
                                },
                                "skip_frames": {
                                    "type": "func",
                                    "name": "skip_frames",
                                    "doc": {
                                        "brief": "Read some frames and drop, this is usually used avoid read not stable image when camera just opened.",
                                        "param": {
                                            "num": "number of frames to read and drop"
                                        },
                                        "maixpy": "maix.camera.Camera.skip_frames",
                                        "py_doc": "Read some frames and drop, this is usually used avoid read not stable image when camera just opened.\n\nArgs:\n  - num: number of frames to read and drop\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "num",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void skip_frames(int num)",
                                    "py_def": "def skip_frames(self, num: int) -> None"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Close camera",
                                        "maixpy": "maix.camera.Camera.close",
                                        "py_doc": "Close camera"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void close()",
                                    "py_def": "def close(self) -> None"
                                },
                                "add_channel": {
                                    "type": "func",
                                    "name": "add_channel",
                                    "doc": {
                                        "brief": "Add a new channel and return a new Camera object, you can use close() to close this channel.",
                                        "param": {
                                            "width": "camera width, default is -1, means auto, mostly means max width of camera support",
                                            "height": "camera height, default is -1, means auto, mostly means max height of camera support",
                                            "format": "camera output format, default is RGB888",
                                            "fps": "camera fps, default is -1, means auto, mostly means max fps of camera support",
                                            "buff_num": "camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.",
                                            "open": "If true, camera will automatically call open() after creation. default is true."
                                        },
                                        "return": "new Camera object",
                                        "maixpy": "maix.camera.Camera.add_channel",
                                        "py_doc": "Add a new channel and return a new Camera object, you can use close() to close this channel.\n\nArgs:\n  - width: camera width, default is -1, means auto, mostly means max width of camera support\n  - height: camera height, default is -1, means auto, mostly means max height of camera support\n  - format: camera output format, default is RGB888\n  - fps: camera fps, default is -1, means auto, mostly means max fps of camera support\n  - buff_num: camera buffer number, default is 3, means 3 buffer, one used by user, one used for cache the next frame,\nmore than one buffer will accelerate image read speed, but will cost more memory.\n  - open: If true, camera will automatically call open() after creation. default is true.\n\n\nReturns: new Camera object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "double",
                                            "fps",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "buff_num",
                                            "3"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "camera::Camera*",
                                    "static": false,
                                    "def": "camera::Camera *add_channel(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, double fps = -1, int buff_num = 3, bool open = true)",
                                    "py_def": "def add_channel(self, width: int = -1, height: int = -1, format: maix.image.Format = ..., fps: float = -1, buff_num: int = 3, open: bool = True) -> Camera"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check if camera is opened",
                                        "return": "true if camera is opened, false if not",
                                        "maixpy": "maix.camera.Camera.is_opened",
                                        "py_doc": "Check if camera is opened\n\nReturns: true if camera is opened, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()",
                                    "py_def": "def is_opened(self) -> bool"
                                },
                                "is_closed": {
                                    "type": "func",
                                    "name": "is_closed",
                                    "doc": {
                                        "brief": "check camera device is closed or not",
                                        "return": "closed or not, bool type",
                                        "maixpy": "maix.camera.Camera.is_closed",
                                        "py_doc": "check camera device is closed or not\n\nReturns: closed or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_closed()",
                                    "py_def": "def is_closed(self) -> bool"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get camera width",
                                        "return": "camera width",
                                        "maixpy": "maix.camera.Camera.width",
                                        "py_doc": "Get camera width\n\nReturns: camera width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get camera height",
                                        "return": "camera height",
                                        "maixpy": "maix.camera.Camera.height",
                                        "py_doc": "Get camera height\n\nReturns: camera height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                },
                                "fps": {
                                    "type": "func",
                                    "name": "fps",
                                    "doc": {
                                        "brief": "Get camera fps",
                                        "return": "camera fps",
                                        "maixpy": "maix.camera.Camera.fps",
                                        "py_doc": "Get camera fps\n\nReturns: camera fps\n"
                                    },
                                    "args": [],
                                    "ret_type": "double",
                                    "static": false,
                                    "def": "double fps()",
                                    "py_def": "def fps(self) -> float"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get camera output format",
                                        "return": "camera output format, image::Format object",
                                        "maixpy": "maix.camera.Camera.format",
                                        "py_doc": "Get camera output format\n\nReturns: camera output format, image::Format object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()",
                                    "py_def": "def format(self) -> maix.image.Format"
                                },
                                "buff_num": {
                                    "type": "func",
                                    "name": "buff_num",
                                    "doc": {
                                        "brief": "Get camera buffer number",
                                        "return": "camera buffer number",
                                        "maixpy": "maix.camera.Camera.buff_num",
                                        "py_doc": "Get camera buffer number\n\nReturns: camera buffer number\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int buff_num()",
                                    "py_def": "def buff_num(self) -> int"
                                },
                                "hmirror": {
                                    "type": "func",
                                    "name": "hmirror",
                                    "doc": {
                                        "brief": "Set/Get camera horizontal mirror",
                                        "return": "camera horizontal mirror",
                                        "maixpy": "maix.camera.Camera.hmirror",
                                        "py_doc": "Set/Get camera horizontal mirror\n\nReturns: camera horizontal mirror\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int hmirror(int value = -1)",
                                    "py_def": "def hmirror(self, value: int = -1) -> int"
                                },
                                "vflip": {
                                    "type": "func",
                                    "name": "vflip",
                                    "doc": {
                                        "brief": "Set/Get camera vertical flip",
                                        "return": "camera vertical flip",
                                        "maixpy": "maix.camera.Camera.vflip",
                                        "py_doc": "Set/Get camera vertical flip\n\nReturns: camera vertical flip\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int vflip(int value = -1)",
                                    "py_def": "def vflip(self, value: int = -1) -> int"
                                },
                                "device": {
                                    "type": "func",
                                    "name": "device",
                                    "doc": {
                                        "brief": "Get camera device path",
                                        "return": "camera device path",
                                        "maixpy": "maix.camera.Camera.device",
                                        "py_doc": "Get camera device path\n\nReturns: camera device path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string device()",
                                    "py_def": "def device(self) -> str"
                                },
                                "write_reg": {
                                    "type": "func",
                                    "name": "write_reg",
                                    "doc": {
                                        "brief": "Write camera register",
                                        "param": {
                                            "addr": "register address",
                                            "data": "register data",
                                            "bit_width": "register data bit width, default is 8"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.write_reg",
                                        "py_doc": "Write camera register\n\nArgs:\n  - addr: register address\n  - data: register data\n  - bit_width: register data bit width, default is 8\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "int",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "bit_width",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err write_reg(int addr, int data, int bit_width = 8)",
                                    "py_def": "def write_reg(self, addr: int, data: int, bit_width: int = 8) -> maix.err.Err"
                                },
                                "read_reg": {
                                    "type": "func",
                                    "name": "read_reg",
                                    "doc": {
                                        "brief": "Read camera register",
                                        "param": {
                                            "addr": "register address",
                                            "bit_width": "register data bit width, default is 8"
                                        },
                                        "return": "register data, -1 means failed",
                                        "maixpy": "maix.camera.Camera.read_reg",
                                        "py_doc": "Read camera register\n\nArgs:\n  - addr: register address\n  - bit_width: register data bit width, default is 8\n\n\nReturns: register data, -1 means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "int",
                                            "bit_width",
                                            "8"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int read_reg(int addr, int bit_width = 8)",
                                    "py_def": "def read_reg(self, addr: int, bit_width: int = 8) -> int"
                                },
                                "show_colorbar": {
                                    "type": "func",
                                    "name": "show_colorbar",
                                    "doc": {
                                        "brief": "Camera output color bar image for test",
                                        "param": {
                                            "enable": "enable/disable color bar"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.show_colorbar",
                                        "py_doc": "Camera output color bar image for test\n\nArgs:\n  - enable: enable/disable color bar\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "enable",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err show_colorbar(bool enable)",
                                    "py_def": "def show_colorbar(self, enable: bool) -> maix.err.Err"
                                },
                                "get_channel": {
                                    "type": "func",
                                    "name": "get_channel",
                                    "doc": {
                                        "brief": "Get channel of camera",
                                        "return": "channel number",
                                        "maixpy": "maix.camera.Camera.get_channel",
                                        "py_doc": "Get channel of camera\n\nReturns: channel number\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_channel()",
                                    "py_def": "def get_channel(self) -> int"
                                },
                                "set_resolution": {
                                    "type": "func",
                                    "name": "set_resolution",
                                    "doc": {
                                        "brief": "Set camera resolution",
                                        "param": {
                                            "width": "new width",
                                            "height": "new height"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.set_resolution",
                                        "py_doc": "Set camera resolution\n\nArgs:\n  - width: new width\n  - height: new height\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_resolution(int width, int height)",
                                    "py_def": "def set_resolution(self, width: int, height: int) -> maix.err.Err"
                                },
                                "set_fps": {
                                    "type": "func",
                                    "name": "set_fps",
                                    "doc": {
                                        "brief": "Set camera fps",
                                        "param": {
                                            "fps": "new fps"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.camera.Camera.set_fps",
                                        "py_doc": "Set camera fps\n\nArgs:\n  - fps: new fps\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "fps",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_fps(double fps)",
                                    "py_def": "def set_fps(self, fps: float) -> maix.err.Err"
                                },
                                "exposure": {
                                    "type": "func",
                                    "name": "exposure",
                                    "doc": {
                                        "brief": "Set/Get camera exposure",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "exposure time. unit: us\nIf value == -1, return exposure time.\nIf value != 0, set and return exposure time."
                                        },
                                        "return": "camera exposure time",
                                        "maixpy": "maix.camera.Camera.exposure",
                                        "py_doc": "Set/Get camera exposure\n\nArgs:\n  - value: exposure time. unit: us\nIf value == -1, return exposure time.\nIf value != 0, set and return exposure time.\n\n\nReturns: camera exposure time\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int exposure(int value = -1)",
                                    "py_def": "def exposure(self, value: int = -1) -> int"
                                },
                                "gain": {
                                    "type": "func",
                                    "name": "gain",
                                    "doc": {
                                        "brief": "Set/Get camera gain",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "camera gain.\nIf value == -1, returns camera gain.\nIf value != 0, set and return camera gain."
                                        },
                                        "return": "camera gain",
                                        "maixpy": "maix.camera.Camera.gain",
                                        "py_doc": "Set/Get camera gain\n\nArgs:\n  - value: camera gain.\nIf value == -1, returns camera gain.\nIf value != 0, set and return camera gain.\n\n\nReturns: camera gain\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int gain(int value = -1)",
                                    "py_def": "def gain(self, value: int = -1) -> int"
                                },
                                "luma": {
                                    "type": "func",
                                    "name": "luma",
                                    "doc": {
                                        "brief": "Set/Get camera luma",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "luma value, range is [0, 100]\nIf value == -1, returns luma value.\nIf value != 0, set and return luma value."
                                        },
                                        "return": "returns luma value",
                                        "maixpy": "maix.camera.Camera.luma",
                                        "py_doc": "Set/Get camera luma\n\nArgs:\n  - value: luma value, range is [0, 100]\nIf value == -1, returns luma value.\nIf value != 0, set and return luma value.\n\n\nReturns: returns luma value\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int luma(int value = -1)",
                                    "py_def": "def luma(self, value: int = -1) -> int"
                                },
                                "constrast": {
                                    "type": "func",
                                    "name": "constrast",
                                    "doc": {
                                        "brief": "Set/Get camera constrast",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "constrast value, range is [0, 100]\nIf value == -1, returns constrast value.\nIf value != 0, set and return constrast value."
                                        },
                                        "return": "returns constrast value",
                                        "maixpy": "maix.camera.Camera.constrast",
                                        "py_doc": "Set/Get camera constrast\n\nArgs:\n  - value: constrast value, range is [0, 100]\nIf value == -1, returns constrast value.\nIf value != 0, set and return constrast value.\n\n\nReturns: returns constrast value\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int constrast(int value = -1)",
                                    "py_def": "def constrast(self, value: int = -1) -> int"
                                },
                                "saturation": {
                                    "type": "func",
                                    "name": "saturation",
                                    "doc": {
                                        "brief": "Set/Get camera saturation",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "saturation value, range is [0, 100]\nIf value == -1, returns saturation value.\nIf value != 0, set and return saturation value."
                                        },
                                        "return": "returns saturation value",
                                        "maixpy": "maix.camera.Camera.saturation",
                                        "py_doc": "Set/Get camera saturation\n\nArgs:\n  - value: saturation value, range is [0, 100]\nIf value == -1, returns saturation value.\nIf value != 0, set and return saturation value.\n\n\nReturns: returns saturation value\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int saturation(int value = -1)",
                                    "py_def": "def saturation(self, value: int = -1) -> int"
                                },
                                "awb_mode": {
                                    "type": "func",
                                    "name": "awb_mode",
                                    "doc": {
                                        "brief": "Set/Get white balance mode (deprecated interface)",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.\nThis interface may be deprecated in the future, and there may be incompatibilities in the definition of the parameters of the new interface",
                                        "param": {
                                            "value": "value = 0, means set white balance to auto mode, value = 1, means set white balance to manual mode, default is auto mode."
                                        },
                                        "return": "returns awb mode",
                                        "maixpy": "maix.camera.Camera.awb_mode",
                                        "py_doc": "Set/Get white balance mode (deprecated interface)\n\nArgs:\n  - value: value = 0, means set white balance to auto mode, value = 1, means set white balance to manual mode, default is auto mode.\n\n\nReturns: returns awb mode\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int awb_mode(int value = -1)",
                                    "py_def": "def awb_mode(self, value: int = -1) -> int"
                                },
                                "set_awb": {
                                    "type": "func",
                                    "name": "set_awb",
                                    "doc": {
                                        "brief": "Set/Get white balance mode",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.",
                                        "param": {
                                            "value": "value = 0, means set white balance to manual mode, value = 1, means set white balance to auto mode, default is auto mode."
                                        },
                                        "return": "returns awb mode",
                                        "maixpy": "maix.camera.Camera.set_awb",
                                        "py_doc": "Set/Get white balance mode\n\nArgs:\n  - value: value = 0, means set white balance to manual mode, value = 1, means set white balance to auto mode, default is auto mode.\n\n\nReturns: returns awb mode\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "mode",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int set_awb(int mode = -1)",
                                    "py_def": "def set_awb(self, mode: int = -1) -> int"
                                },
                                "exp_mode": {
                                    "type": "func",
                                    "name": "exp_mode",
                                    "doc": {
                                        "brief": "Set/Get exposure mode (deprecated interface)",
                                        "attention": "This method will affect the isp and thus the image, so please be careful with it.\nThis interface may be deprecated in the future, and there may be incompatibilities in the definition of the parameters of the new interface",
                                        "param": {
                                            "value": "value = 0, means set exposure to auto mode, value = 1, means set exposure to manual mode, default is auto mode."
                                        },
                                        "return": "returns exposure mode",
                                        "maixpy": "maix.camera.Camera.exp_mode",
                                        "py_doc": "Set/Get exposure mode (deprecated interface)\n\nArgs:\n  - value: value = 0, means set exposure to auto mode, value = 1, means set exposure to manual mode, default is auto mode.\n\n\nReturns: returns exposure mode\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int exp_mode(int value = -1)",
                                    "py_def": "def exp_mode(self, value: int = -1) -> int"
                                },
                                "set_windowing": {
                                    "type": "func",
                                    "name": "set_windowing",
                                    "doc": {
                                        "brief": "Set window size of camera",
                                        "param": {
                                            "roi": "Support two input formats, [x,y,w,h] set the coordinates and size of the window;\n[w,h] set the size of the window, when the window is centred."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.camera.Camera.set_windowing",
                                        "py_doc": "Set window size of camera\n\nArgs:\n  - roi: Support two input formats, [x,y,w,h] set the coordinates and size of the window;\n[w,h] set the size of the window, when the window is centred.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "roi",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_windowing(std::vector<int> roi)",
                                    "py_def": "def set_windowing(self, roi: list[int]) -> maix.err.Err"
                                }
                            },
                            "def": "class Camera"
                        }
                    },
                    "auto_add": false
                },
                "display": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.display module, control display device and show image on it",
                        "maixpy": "maix.display",
                        "py_doc": "maix.display module, control display device and show image on it"
                    },
                    "members": {
                        "Display": {
                            "type": "class",
                            "name": "Display",
                            "doc": {
                                "brief": "Display class",
                                "maixpy": "maix.display.Display",
                                "py_doc": "Display class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Display",
                                    "doc": {
                                        "brief": "Construct a new Display object",
                                        "param": {
                                            "width": "display width, by default(value is -1) means auto detect,\nif width > max device supported width, will auto set to max device supported width",
                                            "height": "display height, by default(value is -1) means auto detect,\nif height > max device supported height, will auto set to max device supported height",
                                            "device": "display device name, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "open": "If true, display will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.display.Display.__init__",
                                        "maixcdk": "maix.display.Display.Display",
                                        "py_doc": "Construct a new Display object\n\nArgs:\n  - width: display width, by default(value is -1) means auto detect,\nif width > max device supported width, will auto set to max device supported width\n  - height: display height, by default(value is -1) means auto detect,\nif height > max device supported height, will auto set to max device supported height\n  - device: display device name, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - open: If true, display will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_RGB888"
                                        ],
                                        [
                                            "const char *",
                                            "device",
                                            "nullptr"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Display(int width = -1, int height = -1, image::Format format = image::FMT_RGB888, const char *device = nullptr, bool open = true)",
                                    "py_def": "def __init__(self, width: int = -1, height: int = -1, format: maix.image.Format = ..., device: str = None, open: bool = True) -> None"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get display width",
                                        "return": "width",
                                        "maixpy": "maix.display.Display.width",
                                        "py_doc": "Get display width\n\nReturns: width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get display height",
                                        "param": {
                                            "ch": "channel to get, by default(value is 0) means the first channel"
                                        },
                                        "return": "height",
                                        "maixpy": "maix.display.Display.height",
                                        "py_doc": "Get display height\n\nArgs:\n  - ch: channel to get, by default(value is 0) means the first channel\n\n\nReturns: height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                },
                                "size": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get display size",
                                        "param": {
                                            "ch": "channel to get, by default(value is 0) means the first channel"
                                        },
                                        "return": "size A list type in MaixPy, [width, height]",
                                        "maixpy": "maix.display.Display.size",
                                        "py_doc": "Get display size\n\nArgs:\n  - ch: channel to get, by default(value is 0) means the first channel\n\n\nReturns: size A list type in MaixPy, [width, height]\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> size()",
                                    "py_def": "def size(self) -> list[int]"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get display format",
                                        "return": "format",
                                        "maixpy": "maix.display.Display.format",
                                        "py_doc": "Get display format\n\nReturns: format\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format format()",
                                    "py_def": "def format(self) -> maix.image.Format"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "open display device, if already opened, will return err.ERR_NONE.",
                                        "param": {
                                            "width": "display width, default is -1, means auto, mostly means max width of display support",
                                            "height": "display height, default is -1, means auto, mostly means max height of display support",
                                            "format": "display output format, default is RGB888"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.open",
                                        "py_doc": "open display device, if already opened, will return err.ERR_NONE.\n\nArgs:\n  - width: display width, default is -1, means auto, mostly means max width of display support\n  - height: display height, default is -1, means auto, mostly means max height of display support\n  - format: display output format, default is RGB888\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_INVALID"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(int width = -1, int height = -1, image::Format format = image::FMT_INVALID)",
                                    "py_def": "def open(self, width: int = -1, height: int = -1, format: maix.image.Format = ...) -> maix.err.Err"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "close display device",
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.close",
                                        "py_doc": "close display device\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err close()",
                                    "py_def": "def close(self) -> maix.err.Err"
                                },
                                "add_channel": {
                                    "type": "func",
                                    "name": "add_channel",
                                    "doc": {
                                        "brief": "Add a new channel and return a new Display object, you can use close() to close this channel.",
                                        "attention": "If a new disp channel is created, it is recommended to set fit=image::FIT_COVER or fit=image::FIT_FILL when running show for the main channel,\notherwise the display of the new disp channel may be abnormal.",
                                        "param": {
                                            "width": "display width, default is -1, means auto, mostly means max width of display support. Maximum width must not exceed the main channel.",
                                            "height": "display height, default is -1, means auto, mostly means max height of display support. Maximum height must not exceed the main channel.",
                                            "format": "display output format, default is FMT_BGRA8888",
                                            "open": "If true, display will automatically call open() after creation. default is true."
                                        },
                                        "return": "new Display object",
                                        "maixpy": "maix.display.Display.add_channel",
                                        "py_doc": "Add a new channel and return a new Display object, you can use close() to close this channel.\n\nArgs:\n  - width: display width, default is -1, means auto, mostly means max width of display support. Maximum width must not exceed the main channel.\n  - height: display height, default is -1, means auto, mostly means max height of display support. Maximum height must not exceed the main channel.\n  - format: display output format, default is FMT_BGRA8888\n  - open: If true, display will automatically call open() after creation. default is true.\n\n\nReturns: new Display object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "width",
                                            "-1"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "-1"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::FMT_BGRA8888"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "display::Display*",
                                    "static": false,
                                    "def": "display::Display *add_channel(int width = -1, int height = -1, image::Format format = image::FMT_BGRA8888, bool open = true)",
                                    "py_def": "def add_channel(self, width: int = -1, height: int = -1, format: maix.image.Format = ..., open: bool = True) -> Display"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "check display device is opened or not",
                                        "return": "opened or not, bool type",
                                        "maixpy": "maix.display.Display.is_opened",
                                        "py_doc": "check display device is opened or not\n\nReturns: opened or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()",
                                    "py_def": "def is_opened(self) -> bool"
                                },
                                "is_closed": {
                                    "type": "func",
                                    "name": "is_closed",
                                    "doc": {
                                        "brief": "check display device is closed or not",
                                        "return": "closed or not, bool type",
                                        "maixpy": "maix.display.Display.is_closed",
                                        "py_doc": "check display device is closed or not\n\nReturns: closed or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_closed()",
                                    "py_def": "def is_closed(self) -> bool"
                                },
                                "show": {
                                    "type": "func",
                                    "name": "show",
                                    "doc": {
                                        "brief": "show image on display device, and will also send to MaixVision work station if connected.",
                                        "param": {
                                            "img": "image to show, image.Image object,\nif the size of image smaller than display size, will show in the center of display;\nif the size of image bigger than display size, will auto resize to display size and keep ratio, fill blank with black color.",
                                            "fit": "image in screen fit mode, by default(value is image.FIT_CONTAIN), @see image.Fit for more details\ne.g. image.FIT_CONTAIN means resize image to fit display size and keep ratio, fill blank with black color."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.display.Display.show",
                                        "py_doc": "show image on display device, and will also send to MaixVision work station if connected.\n\nArgs:\n  - img: image to show, image.Image object,\nif the size of image smaller than display size, will show in the center of display;\nif the size of image bigger than display size, will auto resize to display size and keep ratio, fill blank with black color.\n  - fit: image in screen fit mode, by default(value is image.FIT_CONTAIN), @see image.Fit for more details\ne.g. image.FIT_CONTAIN means resize image to fit display size and keep ratio, fill blank with black color.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err show(image::Image &img, image::Fit fit = image::FIT_CONTAIN)",
                                    "py_def": "def show(self, img: maix.image.Image, fit: maix.image.Fit = ...) -> maix.err.Err"
                                },
                                "device": {
                                    "type": "func",
                                    "name": "device",
                                    "doc": {
                                        "brief": "Get display device path",
                                        "return": "display device path",
                                        "maixpy": "maix.display.Display.device",
                                        "py_doc": "Get display device path\n\nReturns: display device path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string device()",
                                    "py_def": "def device(self) -> str"
                                },
                                "set_backlight": {
                                    "type": "func",
                                    "name": "set_backlight",
                                    "doc": {
                                        "brief": "Set display backlight",
                                        "param": {
                                            "value": "backlight value, float type, range is [0, 100]"
                                        },
                                        "maixpy": "maix.display.Display.set_backlight",
                                        "py_doc": "Set display backlight\n\nArgs:\n  - value: backlight value, float type, range is [0, 100]\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "value",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_backlight(float value)",
                                    "py_def": "def set_backlight(self, value: float) -> None"
                                },
                                "get_backlight": {
                                    "type": "func",
                                    "name": "get_backlight",
                                    "doc": {
                                        "brief": "Get display backlight",
                                        "return": "value backlight value, float type, range is [0, 100]",
                                        "maixpy": "maix.display.Display.get_backlight",
                                        "py_doc": "Get display backlight\n\nReturns: value backlight value, float type, range is [0, 100]\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float get_backlight()",
                                    "py_def": "def get_backlight(self) -> float"
                                },
                                "set_hmirror": {
                                    "type": "func",
                                    "name": "set_hmirror",
                                    "doc": {
                                        "brief": "Set display mirror",
                                        "param": {
                                            "en": "enable/disable mirror"
                                        },
                                        "maixpy": "maix.display.Display.set_hmirror",
                                        "py_doc": "Set display mirror\n\nArgs:\n  - en: enable/disable mirror\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "en",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_hmirror(bool en)",
                                    "py_def": "def set_hmirror(self, en: bool) -> maix.err.Err"
                                },
                                "set_vflip": {
                                    "type": "func",
                                    "name": "set_vflip",
                                    "doc": {
                                        "brief": "Set display flip",
                                        "param": {
                                            "en": "enable/disable flip"
                                        },
                                        "maixpy": "maix.display.Display.set_vflip",
                                        "py_doc": "Set display flip\n\nArgs:\n  - en: enable/disable flip\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "en",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_vflip(bool en)",
                                    "py_def": "def set_vflip(self, en: bool) -> maix.err.Err"
                                }
                            },
                            "def": "class Display"
                        },
                        "send_to_maixvision": {
                            "type": "func",
                            "name": "send_to_maixvision",
                            "doc": {
                                "brief": "Send image to MaixVision work station if connected.\\nIf you want to debug your program an don't want to initialize display, use this method.",
                                "param": {
                                    "img": "image to send, image.Image object"
                                },
                                "maixpy": "maix.display.send_to_maixvision",
                                "py_doc": "Send image to MaixVision work station if connected.\nIf you want to debug your program an don't want to initialize display, use this method.\n\nArgs:\n  - img: image to send, image.Image object\n"
                            },
                            "args": [
                                [
                                    "image::Image &",
                                    "img",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void send_to_maixvision(image::Image &img)",
                            "py_def": "def send_to_maixvision(img: maix.image.Image) -> None"
                        }
                    },
                    "auto_add": false
                },
                "ext_dev": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.ext_dev module"
                    },
                    "members": {
                        "imu": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.ext_dev.imu module"
                            },
                            "members": {
                                "Mode": {
                                    "type": "enum",
                                    "name": "class",
                                    "doc": {
                                        "brief": "imu mode",
                                        "maixpy": "maix.ext_dev.imu.Mode",
                                        "py_doc": "imu mode"
                                    },
                                    "values": [
                                        [
                                            "ACC_ONLY",
                                            "0",
                                            ""
                                        ],
                                        [
                                            "GYRO_ONLY",
                                            "",
                                            ""
                                        ],
                                        [
                                            "DUAL",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum class Mode {\n    ACC_ONLY = 0,\n    GYRO_ONLY,\n    DUAL\n}"
                                },
                                "AccScale": {
                                    "type": "enum",
                                    "name": "class",
                                    "doc": {
                                        "brief": "imu acc scale",
                                        "maixpy": "maix.ext_dev.imu.AccScale",
                                        "py_doc": "imu acc scale"
                                    },
                                    "values": [
                                        [
                                            "ACC_SCALE_2G",
                                            "0",
                                            ""
                                        ],
                                        [
                                            "ACC_SCALE_4G",
                                            "",
                                            ""
                                        ],
                                        [
                                            "ACC_SCALE_8G",
                                            "",
                                            ""
                                        ],
                                        [
                                            "ACC_SCALE_16G",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum class AccScale {\n    ACC_SCALE_2G = 0,\n    ACC_SCALE_4G,\n    ACC_SCALE_8G,\n    ACC_SCALE_16G\n}"
                                },
                                "AccOdr": {
                                    "type": "enum",
                                    "name": "class",
                                    "doc": {
                                        "brief": "imu acc output data rate",
                                        "maixpy": "maix.ext_dev.imu.AccOdr",
                                        "py_doc": "imu acc output data rate"
                                    },
                                    "values": [
                                        [
                                            "ACC_ODR_8000",
                                            "",
                                            "Accelerometer ODR set to 8000 Hz."
                                        ],
                                        [
                                            "ACC_ODR_4000",
                                            "",
                                            "Accelerometer ODR set to 4000 Hz."
                                        ],
                                        [
                                            "ACC_ODR_2000",
                                            "",
                                            "Accelerometer ODR set to 2000 Hz."
                                        ],
                                        [
                                            "ACC_ODR_1000",
                                            "",
                                            "Accelerometer ODR set to 1000 Hz."
                                        ],
                                        [
                                            "ACC_ODR_500",
                                            "",
                                            "Accelerometer ODR set to 500 Hz."
                                        ],
                                        [
                                            "ACC_ODR_250",
                                            "",
                                            "Accelerometer ODR set to 250 Hz."
                                        ],
                                        [
                                            "ACC_ODR_125",
                                            "",
                                            "Accelerometer ODR set to 125 Hz."
                                        ],
                                        [
                                            "ACC_ODR_62_5",
                                            "",
                                            "Accelerometer ODR set to 62.5 Hz."
                                        ],
                                        [
                                            "ACC_ODR_31_25",
                                            "",
                                            "Accelerometer ODR set to 31.25 Hz."
                                        ],
                                        [
                                            "ACC_ODR_128",
                                            "12",
                                            "Accelerometer ODR set to 128 Hz."
                                        ],
                                        [
                                            "ACC_ODR_21",
                                            "",
                                            "Accelerometer ODR set to 21 Hz."
                                        ],
                                        [
                                            "ACC_ODR_11",
                                            "",
                                            "Accelerometer ODR set to 11 Hz."
                                        ],
                                        [
                                            "ACC_ODR_3",
                                            "",
                                            "Accelerometer ODR set to 3 Hz."
                                        ]
                                    ],
                                    "def": "enum class AccOdr {\n    ACC_ODR_8000,      // Accelerometer ODR set to 8000 Hz.\n    ACC_ODR_4000,      // Accelerometer ODR set to 4000 Hz.\n    ACC_ODR_2000,      // Accelerometer ODR set to 2000 Hz.\n    ACC_ODR_1000,      // Accelerometer ODR set to 1000 Hz.\n    ACC_ODR_500,       // Accelerometer ODR set to 500 Hz.\n    ACC_ODR_250,       // Accelerometer ODR set to 250 Hz.\n    ACC_ODR_125,       // Accelerometer ODR set to 125 Hz.\n    ACC_ODR_62_5,      // Accelerometer ODR set to 62.5 Hz.\n    ACC_ODR_31_25,     // Accelerometer ODR set to 31.25 Hz.\n    ACC_ODR_128 = 12,  // Accelerometer ODR set to 128 Hz.\n    ACC_ODR_21,        // Accelerometer ODR set to 21 Hz.\n    ACC_ODR_11,        // Accelerometer ODR set to 11 Hz.\n    ACC_ODR_3,         // Accelerometer ODR set to 3 Hz.\n}"
                                },
                                "GyroScale": {
                                    "type": "enum",
                                    "name": "class",
                                    "doc": {
                                        "brief": "imu gyro scale",
                                        "maixpy": "maix.ext_dev.imu.GyroScale",
                                        "py_doc": "imu gyro scale"
                                    },
                                    "values": [
                                        [
                                            "GYRO_SCALE_16DPS",
                                            "0",
                                            "Gyroscope scale set to \u00b116 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_32DPS",
                                            "",
                                            "Gyroscope scale set to \u00b132 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_64DPS",
                                            "",
                                            "Gyroscope scale set to \u00b164 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_128DPS",
                                            "",
                                            "Gyroscope scale set to \u00b1128 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_256DPS",
                                            "",
                                            "Gyroscope scale set to \u00b1256 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_512DPS",
                                            "",
                                            "Gyroscope scale set to \u00b1512 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_1024DPS",
                                            "",
                                            "Gyroscope scale set to \u00b11024 degrees per second."
                                        ],
                                        [
                                            "GYRO_SCALE_2048DPS",
                                            "",
                                            "Gyroscope scale set to \u00b12048 degrees per second."
                                        ]
                                    ],
                                    "def": "enum class GyroScale {\n    GYRO_SCALE_16DPS = 0,       // Gyroscope scale set to \u00b116 degrees per second.\n    GYRO_SCALE_32DPS,            // Gyroscope scale set to \u00b132 degrees per second.\n    GYRO_SCALE_64DPS,            // Gyroscope scale set to \u00b164 degrees per second.\n    GYRO_SCALE_128DPS,           // Gyroscope scale set to \u00b1128 degrees per second.\n    GYRO_SCALE_256DPS,           // Gyroscope scale set to \u00b1256 degrees per second.\n    GYRO_SCALE_512DPS,           // Gyroscope scale set to \u00b1512 degrees per second.\n    GYRO_SCALE_1024DPS,          // Gyroscope scale set to \u00b11024 degrees per second.\n    GYRO_SCALE_2048DPS,          // Gyroscope scale set to \u00b12048 degrees per second.\n}"
                                },
                                "GyroOdr": {
                                    "type": "enum",
                                    "name": "class",
                                    "doc": {
                                        "brief": "imu gyro output data rate",
                                        "maixpy": "maix.ext_dev.imu.GyroOdr",
                                        "py_doc": "imu gyro output data rate"
                                    },
                                    "values": [
                                        [
                                            "GYRO_ODR_8000",
                                            "",
                                            "Gyroscope ODR set to 8000 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_4000",
                                            "",
                                            "Gyroscope ODR set to 4000 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_2000",
                                            "",
                                            "Gyroscope ODR set to 2000 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_1000",
                                            "",
                                            "Gyroscope ODR set to 1000 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_500",
                                            "",
                                            "Gyroscope ODR set to 500 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_250",
                                            "",
                                            "Gyroscope ODR set to 250 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_125",
                                            "",
                                            "Gyroscope ODR set to 125 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_62_5",
                                            "",
                                            "Gyroscope ODR set to 62.5 Hz."
                                        ],
                                        [
                                            "GYRO_ODR_31_25",
                                            "",
                                            "Gyroscope ODR set to 31.25 Hz."
                                        ]
                                    ],
                                    "def": "enum class GyroOdr {\n    GYRO_ODR_8000,     // Gyroscope ODR set to 8000 Hz.\n    GYRO_ODR_4000,     // Gyroscope ODR set to 4000 Hz.\n    GYRO_ODR_2000,     // Gyroscope ODR set to 2000 Hz.\n    GYRO_ODR_1000,     // Gyroscope ODR set to 1000 Hz.\n    GYRO_ODR_500,      // Gyroscope ODR set to 500 Hz.\n    GYRO_ODR_250,      // Gyroscope ODR set to 250 Hz.\n    GYRO_ODR_125,      // Gyroscope ODR set to 125 Hz.\n    GYRO_ODR_62_5,     // Gyroscope ODR set to 62.5 Hz.\n    GYRO_ODR_31_25,    // Gyroscope ODR set to 31.25 Hz.\n}"
                                },
                                "IMU": {
                                    "type": "class",
                                    "name": "IMU",
                                    "doc": {
                                        "brief": "QMI8656 driver class",
                                        "maixpy": "maix.ext_dev.imu.IMU",
                                        "py_doc": "QMI8656 driver class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "IMU",
                                            "doc": {
                                                "brief": "Construct a new IMU object, will open IMU",
                                                "param": {
                                                    "driver": "driver name, only support \"qmi8656\"",
                                                    "i2c_bus": "i2c bus number. Automatically selects the on-board imu when -1 is passed in.",
                                                    "addr": "IMU i2c addr.",
                                                    "freq": "IMU freq",
                                                    "mode": "IMU Mode: ACC_ONLY/GYRO_ONLY/DUAL",
                                                    "acc_scale": "acc scale, see @imu::AccScale",
                                                    "acc_odr": "acc output data rate, see @imu::AccOdr",
                                                    "gyro_scale": "gyro scale, see @imu::GyroScale",
                                                    "gyro_odr": "gyro output data rate, see @imu::GyroOdr",
                                                    "block": "block or non-block, defalut is true"
                                                },
                                                "maixpy": "maix.ext_dev.imu.IMU.__init__",
                                                "py_doc": "Construct a new IMU object, will open IMU\n\nArgs:\n  - driver: driver name, only support \"qmi8656\"\n  - i2c_bus: i2c bus number. Automatically selects the on-board imu when -1 is passed in.\n  - addr: IMU i2c addr.\n  - freq: IMU freq\n  - mode: IMU Mode: ACC_ONLY/GYRO_ONLY/DUAL\n  - acc_scale: acc scale, see @imu::AccScale\n  - acc_odr: acc output data rate, see @imu::AccOdr\n  - gyro_scale: gyro scale, see @imu::GyroScale\n  - gyro_odr: gyro output data rate, see @imu::GyroOdr\n  - block: block or non-block, defalut is true\n"
                                            },
                                            "args": [
                                                [
                                                    "std::string",
                                                    "driver",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "i2c_bus",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "addr",
                                                    "0x6B"
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "400000"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::Mode",
                                                    "mode",
                                                    "maix::ext_dev::imu::Mode::DUAL"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::AccScale",
                                                    "acc_scale",
                                                    "maix::ext_dev::imu::AccScale::ACC_SCALE_2G"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::AccOdr",
                                                    "acc_odr",
                                                    "maix::ext_dev::imu::AccOdr::ACC_ODR_8000"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::GyroScale",
                                                    "gyro_scale",
                                                    "maix::ext_dev::imu::GyroScale::GYRO_SCALE_16DPS"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::GyroOdr",
                                                    "gyro_odr",
                                                    "maix::ext_dev::imu::GyroOdr::GYRO_ODR_8000"
                                                ],
                                                [
                                                    "bool",
                                                    "block",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "IMU(std::string driver, int i2c_bus=-1, int addr=0x6B, int freq=400000,\n            maix::ext_dev::imu::Mode mode=maix::ext_dev::imu::Mode::DUAL,\n            maix::ext_dev::imu::AccScale acc_scale=maix::ext_dev::imu::AccScale::ACC_SCALE_2G,\n            maix::ext_dev::imu::AccOdr acc_odr=maix::ext_dev::imu::AccOdr::ACC_ODR_8000,\n            maix::ext_dev::imu::GyroScale gyro_scale=maix::ext_dev::imu::GyroScale::GYRO_SCALE_16DPS,\n            maix::ext_dev::imu::GyroOdr gyro_odr=maix::ext_dev::imu::GyroOdr::GYRO_ODR_8000,\n            bool block=true)",
                                            "py_def": "def __init__(self, driver: str, i2c_bus: int = -1, addr: int = 107, freq: int = 400000, mode: Mode = ..., acc_scale: AccScale = ..., acc_odr: AccOdr = ..., gyro_scale: GyroScale = ..., gyro_odr: GyroOdr = ..., block: bool = True) -> None"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Read data from IMU.",
                                                "return": "list type. If only one of the outputs is initialized, only [x,y,z] of that output will be returned.\nIf all outputs are initialized, [acc_x, acc_y, acc_z, gyro_x, gyro_y, gyro_z] is returned.",
                                                "maixpy": "maix.ext_dev.imu.IMU.read",
                                                "py_doc": "Read data from IMU.\n\nReturns: list type. If only one of the outputs is initialized, only [x,y,z] of that output will be returned.\nIf all outputs are initialized, [acc_x, acc_y, acc_z, gyro_x, gyro_y, gyro_z] is returned.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<float>",
                                            "static": false,
                                            "def": "std::vector<float> read()",
                                            "py_def": "def read(self) -> list[float]"
                                        },
                                        "calculate_calibration": {
                                            "type": "func",
                                            "name": "calculate_calibration",
                                            "doc": {
                                                "brief": "Caculate calibration, save calibration data to /maixapp/shart/imu_calibration",
                                                "param": {
                                                    "time_ms": "caculate max time, unit:ms"
                                                },
                                                "return": "err::Err",
                                                "maixpy": "maix.ext_dev.imu.IMU.calculate_calibration",
                                                "py_doc": "Caculate calibration, save calibration data to /maixapp/shart/imu_calibration\n\nArgs:\n  - time_ms: caculate max time, unit:ms\n\n\nReturns: err::Err\n"
                                            },
                                            "args": [
                                                [
                                                    "uint64_t",
                                                    "time_ms",
                                                    "30 * 1000"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err calculate_calibration(uint64_t time_ms = 30 * 1000)",
                                            "py_def": "def calculate_calibration(self, time_ms: int = 30000) -> maix.err.Err"
                                        },
                                        "get_calibration": {
                                            "type": "func",
                                            "name": "get_calibration",
                                            "doc": {
                                                "brief": "Get calibration data",
                                                "return": "return an array, format is [acc_x_bias, acc_y_bias, acc_z_bias, gyro_x_bias, gyro_y_bias, gyro_z_bias]\nIf the calibration file cannot be found, an empty array will be returned.",
                                                "maixpy": "maix.ext_dev.imu.IMU.get_calibration",
                                                "py_doc": "Get calibration data\n\nReturns: return an array, format is [acc_x_bias, acc_y_bias, acc_z_bias, gyro_x_bias, gyro_y_bias, gyro_z_bias]\nIf the calibration file cannot be found, an empty array will be returned.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<double>",
                                            "static": false,
                                            "def": "std::vector<double> get_calibration()",
                                            "py_def": "def get_calibration(self) -> list[float]"
                                        }
                                    },
                                    "def": "class IMU"
                                },
                                "Gcsv": {
                                    "type": "class",
                                    "name": "Gcsv",
                                    "doc": {
                                        "brief": "Gcsv class",
                                        "maixpy": "maix.ext_dev.imu.Gcsv",
                                        "py_doc": "Gcsv class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Gcsv",
                                            "doc": {
                                                "brief": "Construct a new IMU object",
                                                "maixpy": "maix.ext_dev.imu.Gcsv.__init__",
                                                "py_doc": "Construct a new IMU object"
                                            },
                                            "args": [],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Gcsv()",
                                            "py_def": "def __init__(self) -> None"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open a file",
                                                "param": {
                                                    "path": "the path where data will be saved",
                                                    "tscale": "time scale, default is 0.001",
                                                    "gscale": "gyroscope scale factor, default is 1, unit:g",
                                                    "ascale": "accelerometer scale factor, default is 1, unit:radians/second",
                                                    "mscale": "magnetometer scale factor, default is 1(unused)",
                                                    "version": "version number, default is \"1.3\"",
                                                    "id": "identifier for the IMU, default is \"imu\"",
                                                    "orientation": "sensor orientation, default is \"YxZ\""
                                                },
                                                "return": "error code",
                                                "maixpy": "maix.ext_dev.imu.Gcsv.open",
                                                "py_doc": "Open a file\n\nArgs:\n  - path: the path where data will be saved\n  - tscale: time scale, default is 0.001\n  - gscale: gyroscope scale factor, default is 1, unit:g\n  - ascale: accelerometer scale factor, default is 1, unit:radians/second\n  - mscale: magnetometer scale factor, default is 1(unused)\n  - version: version number, default is \"1.3\"\n  - id: identifier for the IMU, default is \"imu\"\n  - orientation: sensor orientation, default is \"YxZ\"\n\n\nReturns: error code\n"
                                            },
                                            "args": [
                                                [
                                                    "std::string",
                                                    "path",
                                                    null
                                                ],
                                                [
                                                    "double",
                                                    "tscale",
                                                    "0.001"
                                                ],
                                                [
                                                    "double",
                                                    "gscale",
                                                    "1"
                                                ],
                                                [
                                                    "double",
                                                    "ascale",
                                                    "1"
                                                ],
                                                [
                                                    "double",
                                                    "mscale",
                                                    "1"
                                                ],
                                                [
                                                    "std::string",
                                                    "version",
                                                    "\"1.3\""
                                                ],
                                                [
                                                    "std::string",
                                                    "id",
                                                    "\"imu\""
                                                ],
                                                [
                                                    "std::string",
                                                    "orientation",
                                                    "\"YxZ\""
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open(std::string path, double tscale = 0.001, double gscale = 1, double ascale = 1, double mscale = 1, std::string version = \"1.3\", std::string id = \"imu\", std::string orientation = \"YxZ\")",
                                            "py_def": "def open(self, path: str, tscale: float = 0.001, gscale: float = 1, ascale: float = 1, mscale: float = 1, version: str = '1.3', id: str = 'imu', orientation: str = 'YxZ') -> maix.err.Err"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close file",
                                                "return": "error code",
                                                "maixpy": "maix.ext_dev.imu.Gcsv.close",
                                                "py_doc": "Close file\n\nReturns: error code\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()",
                                            "py_def": "def close(self) -> maix.err.Err"
                                        },
                                        "is_opened": {
                                            "type": "func",
                                            "name": "is_opened",
                                            "doc": {
                                                "brief": "Check if the object is already open",
                                                "return": "true, opened; false, not opened",
                                                "maixpy": "maix.ext_dev.imu.Gcsv.is_opened",
                                                "py_doc": "Check if the object is already open\n\nReturns: true, opened; false, not opened\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_opened()",
                                            "py_def": "def is_opened(self) -> bool"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "Write imu data to gcsv file",
                                                "param": {
                                                    "t": "Timestamp of the current data. The actual value is equal to t * tscale. unit:s",
                                                    "gyro": "Gyroscope data must be an array consisting of x, y, and z-axis data. The actual value is equal to gyro * gscale. unit:g",
                                                    "acc": "Acceleration data must be an array consisting of x, y, and z-axis data. The actual value is equal to acc * ascale.unit:radians/second",
                                                    "mag": "Magnetic data must be an array consisting of x, y, and z-axis data. Currently not supported."
                                                },
                                                "maixpy": "maix.ext_dev.imu.Gcsv.write",
                                                "py_doc": "Write imu data to gcsv file\n\nArgs:\n  - t: Timestamp of the current data. The actual value is equal to t * tscale. unit:s\n  - gyro: Gyroscope data must be an array consisting of x, y, and z-axis data. The actual value is equal to gyro * gscale. unit:g\n  - acc: Acceleration data must be an array consisting of x, y, and z-axis data. The actual value is equal to acc * ascale.unit:radians/second\n  - mag: Magnetic data must be an array consisting of x, y, and z-axis data. Currently not supported.\n"
                                            },
                                            "args": [
                                                [
                                                    "double",
                                                    "timestamp",
                                                    null
                                                ],
                                                [
                                                    "std::vector<double>",
                                                    "gyro",
                                                    null
                                                ],
                                                [
                                                    "std::vector<double>",
                                                    "acc",
                                                    null
                                                ],
                                                [
                                                    "std::vector<double>",
                                                    "mag",
                                                    "std::vector<double>()"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err write(double timestamp, std::vector<double> gyro, std::vector<double> acc, std::vector<double> mag = std::vector<double>())",
                                            "py_def": "def write(self, timestamp: float, gyro: list[float], acc: list[float], mag: list[float] = []) -> maix.err.Err"
                                        }
                                    },
                                    "def": "class Gcsv"
                                }
                            },
                            "auto_add": true
                        },
                        "qmi8658": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.ext_dev.qmi8658 module"
                            },
                            "members": {
                                "QMI8658": {
                                    "type": "class",
                                    "name": "QMI8658",
                                    "doc": {
                                        "brief": "QMI8656 driver class",
                                        "maixpy": "maix.ext_dev.qmi8658.QMI8658",
                                        "py_doc": "QMI8656 driver class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "QMI8658",
                                            "doc": {
                                                "brief": "Construct a new QMI8658 object, will open QMI8658",
                                                "param": {
                                                    "i2c_bus": "i2c bus number. Automatically selects the on-board qmi8658 when -1 is passed in.",
                                                    "addr": "QMI8658 i2c addr.",
                                                    "freq": "QMI8658 freq",
                                                    "mode": "QMI8658 Mode: ACC_ONLY/GYRO_ONLY/DUAL",
                                                    "acc_scale": "acc scale, see @qmi8658::AccScale",
                                                    "acc_odr": "acc output data rate, see @qmi8658::AccOdr",
                                                    "gyro_scale": "gyro scale, see @qmi8658::GyroScale",
                                                    "gyro_odr": "gyro output data rate, see @qmi8658::GyroOdr",
                                                    "block": "block or non-block, defalut is true"
                                                },
                                                "maixpy": "maix.ext_dev.qmi8658.QMI8658.__init__",
                                                "py_doc": "Construct a new QMI8658 object, will open QMI8658\n\nArgs:\n  - i2c_bus: i2c bus number. Automatically selects the on-board qmi8658 when -1 is passed in.\n  - addr: QMI8658 i2c addr.\n  - freq: QMI8658 freq\n  - mode: QMI8658 Mode: ACC_ONLY/GYRO_ONLY/DUAL\n  - acc_scale: acc scale, see @qmi8658::AccScale\n  - acc_odr: acc output data rate, see @qmi8658::AccOdr\n  - gyro_scale: gyro scale, see @qmi8658::GyroScale\n  - gyro_odr: gyro output data rate, see @qmi8658::GyroOdr\n  - block: block or non-block, defalut is true\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "i2c_bus",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "addr",
                                                    "0x6B"
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "400000"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::Mode",
                                                    "mode",
                                                    "maix::ext_dev::imu::Mode::DUAL"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::AccScale",
                                                    "acc_scale",
                                                    "maix::ext_dev::imu::AccScale::ACC_SCALE_2G"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::AccOdr",
                                                    "acc_odr",
                                                    "maix::ext_dev::imu::AccOdr::ACC_ODR_8000"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::GyroScale",
                                                    "gyro_scale",
                                                    "maix::ext_dev::imu::GyroScale::GYRO_SCALE_16DPS"
                                                ],
                                                [
                                                    "maix::ext_dev::imu::GyroOdr",
                                                    "gyro_odr",
                                                    "maix::ext_dev::imu::GyroOdr::GYRO_ODR_8000"
                                                ],
                                                [
                                                    "bool",
                                                    "block",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "QMI8658(int i2c_bus=-1, int addr=0x6B, int freq=400000,\n            maix::ext_dev::imu::Mode mode=maix::ext_dev::imu::Mode::DUAL,\n            maix::ext_dev::imu::AccScale acc_scale=maix::ext_dev::imu::AccScale::ACC_SCALE_2G,\n            maix::ext_dev::imu::AccOdr acc_odr=maix::ext_dev::imu::AccOdr::ACC_ODR_8000,\n            maix::ext_dev::imu::GyroScale gyro_scale=maix::ext_dev::imu::GyroScale::GYRO_SCALE_16DPS,\n            maix::ext_dev::imu::GyroOdr gyro_odr=maix::ext_dev::imu::GyroOdr::GYRO_ODR_8000,\n            bool block=true)",
                                            "py_def": "def __init__(self, i2c_bus: int = -1, addr: int = 107, freq: int = 400000, mode: maix.ext_dev.imu.Mode = ..., acc_scale: maix.ext_dev.imu.AccScale = ..., acc_odr: maix.ext_dev.imu.AccOdr = ..., gyro_scale: maix.ext_dev.imu.GyroScale = ..., gyro_odr: maix.ext_dev.imu.GyroOdr = ..., block: bool = True) -> None"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Read data from QMI8658.",
                                                "return": "list type. If only one of the outputs is initialized, only [x,y,z] of that output will be returned.\nIf all outputs are initialized, [acc_x, acc_y, acc_z, gyro_x, gyro_y, gyro_z] is returned.",
                                                "maixpy": "maix.ext_dev.qmi8658.QMI8658.read",
                                                "py_doc": "Read data from QMI8658.\n\nReturns: list type. If only one of the outputs is initialized, only [x,y,z] of that output will be returned.\nIf all outputs are initialized, [acc_x, acc_y, acc_z, gyro_x, gyro_y, gyro_z] is returned.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<float>",
                                            "static": false,
                                            "def": "std::vector<float> read()",
                                            "py_def": "def read(self) -> list[float]"
                                        }
                                    },
                                    "def": "class QMI8658"
                                }
                            },
                            "auto_add": true
                        },
                        "tmc2209": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.ext_dev.tmc2209 module"
                            },
                            "members": {
                                "slide_scan": {
                                    "type": "func",
                                    "name": "slide_scan",
                                    "doc": {
                                        "brief": "Scan and initialize the slide with the given parameters",
                                        "param": {
                                            "port": "UART port, string type.",
                                            "addr": "TMC2209 UART address, range 0x00~0x03, integer type.",
                                            "baud": "UART baud rate, integer type.",
                                            "step_angle": "Motor step angle, float type.",
                                            "micro_step": "Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.",
                                            "round_mm": "Round distance in mm, float type.",
                                            "speed_mm_s": "Speed of the slide in mm/s, float type.",
                                            "dir": "Direction of movement, boolean type. Default is true.",
                                            "use_internal_sense_resistors": "Enable internal sense resistors if true, disable if false, boolean type. Default is true.",
                                            "run_current_per": "Motor run current percentage, range 0~100(%), integer type. Default is 100%.",
                                            "hold_current_per": "Motor hold current percentage, range 0~100(%), integer type. Default is 100%.",
                                            "conf_save_path": "Configuration save path, string type. Default is \"./slide_conf.bin\".",
                                            "force_update": "Force update the configuration if true, boolean type. Default is true."
                                        },
                                        "maixpy": "maix.ext_dev.tmc2209.slide_scan",
                                        "py_doc": "Scan and initialize the slide with the given parameters\n\nArgs:\n  - port: UART port, string type.\n  - addr: TMC2209 UART address, range 0x00~0x03, integer type.\n  - baud: UART baud rate, integer type.\n  - step_angle: Motor step angle, float type.\n  - micro_step: Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.\n  - round_mm: Round distance in mm, float type.\n  - speed_mm_s: Speed of the slide in mm/s, float type.\n  - dir: Direction of movement, boolean type. Default is true.\n  - use_internal_sense_resistors: Enable internal sense resistors if true, disable if false, boolean type. Default is true.\n  - run_current_per: Motor run current percentage, range 0~100(%), integer type. Default is 100%.\n  - hold_current_per: Motor hold current percentage, range 0~100(%), integer type. Default is 100%.\n  - conf_save_path: Configuration save path, string type. Default is \"./slide_conf.bin\".\n  - force_update: Force update the configuration if true, boolean type. Default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "const char*",
                                            "port",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "long",
                                            "baud",
                                            null
                                        ],
                                        [
                                            "/* Uart init param */                 float",
                                            "step_angle",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "micro_step",
                                            null
                                        ],
                                        [
                                            "float",
                                            "round_mm",
                                            null
                                        ],
                                        [
                                            "/* Motor init param */                 float",
                                            "speed_mm_s",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "dir",
                                            "true"
                                        ],
                                        [
                                            "bool",
                                            "use_internal_sense_resistors",
                                            "true"
                                        ],
                                        [
                                            "uint8_t",
                                            "run_current_per",
                                            "100"
                                        ],
                                        [
                                            "uint8_t",
                                            "hold_current_per",
                                            "100"
                                        ],
                                        [
                                            "const std::string",
                                            "conf_save_path",
                                            "\"./slide_conf.bin\""
                                        ],
                                        [
                                            "bool",
                                            "force_update",
                                            "true  /* Driver init param */"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void slide_scan(const char* port, uint8_t addr, long baud, /* Uart init param */\n                float step_angle, uint16_t micro_step, float round_mm, /* Motor init param */\n                float speed_mm_s, bool dir=true, bool use_internal_sense_resistors=true, uint8_t run_current_per=100,\n                uint8_t hold_current_per=100, const std::string conf_save_path=\"./slide_conf.bin\",\n                bool force_update=true  /* Driver init param */)",
                                    "py_def": "def slide_scan(port: str, addr: int, baud: int, step_angle: float, micro_step: int, round_mm: float, speed_mm_s: float, dir: bool = True, use_internal_sense_resistors: bool = True, run_current_per: int = 100, hold_current_per: int = 100, conf_save_path: str = './slide_conf.bin', force_update: bool = True) -> None"
                                },
                                "slide_test": {
                                    "type": "func",
                                    "name": "slide_test",
                                    "doc": {
                                        "brief": "Test the slide with the given parameters\\nThis function tests the slide by moving it in the specified direction until a stall condition is detected, as defined in the configuration file.",
                                        "param": {
                                            "port": "UART port, string type.",
                                            "addr": "TMC2209 UART address, range 0x00~0x03, integer type.",
                                            "baud": "UART baud rate, integer type.",
                                            "step_angle": "Motor step angle, float type.",
                                            "micro_step": "Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.",
                                            "round_mm": "Round distance in mm, float type.",
                                            "speed_mm_s": "Speed of the slide in mm/s, float type.",
                                            "dir": "Direction of movement, boolean type. Default is true.",
                                            "use_internal_sense_resistors": "Enable internal sense resistors if true, disable if false, boolean type. Default is true.",
                                            "run_current_per": "Motor run current percentage, range 0~100(%), integer type. Default is 100%.",
                                            "hold_current_per": "Motor hold current percentage, range 0~100(%), integer type. Default is 100%.",
                                            "conf_save_path": "Configuration save path, string type. Default is \"./slide_conf.bin\"."
                                        },
                                        "maixpy": "maix.ext_dev.tmc2209.slide_test",
                                        "py_doc": "Test the slide with the given parameters\nThis function tests the slide by moving it in the specified direction until a stall condition is detected, as defined in the configuration file.\n\nArgs:\n  - port: UART port, string type.\n  - addr: TMC2209 UART address, range 0x00~0x03, integer type.\n  - baud: UART baud rate, integer type.\n  - step_angle: Motor step angle, float type.\n  - micro_step: Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.\n  - round_mm: Round distance in mm, float type.\n  - speed_mm_s: Speed of the slide in mm/s, float type.\n  - dir: Direction of movement, boolean type. Default is true.\n  - use_internal_sense_resistors: Enable internal sense resistors if true, disable if false, boolean type. Default is true.\n  - run_current_per: Motor run current percentage, range 0~100(%), integer type. Default is 100%.\n  - hold_current_per: Motor hold current percentage, range 0~100(%), integer type. Default is 100%.\n  - conf_save_path: Configuration save path, string type. Default is \"./slide_conf.bin\".\n"
                                    },
                                    "args": [
                                        [
                                            "const char*",
                                            "port",
                                            null
                                        ],
                                        [
                                            "uint8_t",
                                            "addr",
                                            null
                                        ],
                                        [
                                            "long",
                                            "baud",
                                            null
                                        ],
                                        [
                                            "/* Uart init param */                 float",
                                            "step_angle",
                                            null
                                        ],
                                        [
                                            "uint16_t",
                                            "micro_step",
                                            null
                                        ],
                                        [
                                            "float",
                                            "round_mm",
                                            null
                                        ],
                                        [
                                            "/* Motor init param */                 float",
                                            "speed_mm_s",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "dir",
                                            "true"
                                        ],
                                        [
                                            "bool",
                                            "use_internal_sense_resistors",
                                            "true"
                                        ],
                                        [
                                            "uint8_t",
                                            "run_current_per",
                                            "100"
                                        ],
                                        [
                                            "uint8_t",
                                            "hold_current_per",
                                            "100"
                                        ],
                                        [
                                            "const std::string",
                                            "conf_save_path",
                                            "\"./slide_conf.bin\"/* Driver init param */"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void slide_test(const char* port, uint8_t addr, long baud, /* Uart init param */\n                float step_angle, uint16_t micro_step, float round_mm, /* Motor init param */\n                float speed_mm_s, bool dir=true, bool use_internal_sense_resistors=true, uint8_t run_current_per=100,\n                uint8_t hold_current_per=100, const std::string conf_save_path=\"./slide_conf.bin\"/* Driver init param */)",
                                    "py_def": "def slide_test(port: str, addr: int, baud: int, step_angle: float, micro_step: int, round_mm: float, speed_mm_s: float, dir: bool = True, use_internal_sense_resistors: bool = True, run_current_per: int = 100, hold_current_per: int = 100, conf_save_path: str = './slide_conf.bin') -> None"
                                },
                                "Slide": {
                                    "type": "class",
                                    "name": "Slide",
                                    "doc": {
                                        "brief": "Slide Class",
                                        "maixpy": "maix.ext_dev.tmc2209.Slide",
                                        "py_doc": "Slide Class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Slide",
                                            "doc": {
                                                "brief": "Constructor for Slide\\nInitializes the Slide object with the specified parameters.",
                                                "param": {
                                                    "port": "UART port, string type.",
                                                    "addr": "TMC2209 UART address, range 0x00~0x03, integer type.",
                                                    "baud": "UART baud rate, integer type.",
                                                    "step_angle": "Motor step angle, float type.",
                                                    "micro_step": "Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.",
                                                    "round_mm": "Round distance in mm, float type.",
                                                    "speed_mm_s": "Speed of the slide in mm/s, float type. Default is -1, indicating the use of a default speed factor.",
                                                    "use_internal_sense_resistors": "Enable internal sense resistors if TRUE, disable if FALSE, boolean type. Default is TRUE.",
                                                    "run_current_per": "Motor run current percentage, range 0~100(%), integer type. Default is 100%.",
                                                    "hold_current_per": "Motor hold current percentage, range 0~100(%), integer type. Default is 100%.",
                                                    "cfg_file_path": "Configuration file path, string type. Default is an empty string, indicating no configuration file."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.__init__",
                                                "py_doc": "Constructor for Slide\nInitializes the Slide object with the specified parameters.\n\nArgs:\n  - port: UART port, string type.\n  - addr: TMC2209 UART address, range 0x00~0x03, integer type.\n  - baud: UART baud rate, integer type.\n  - step_angle: Motor step angle, float type.\n  - micro_step: Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.\n  - round_mm: Round distance in mm, float type.\n  - speed_mm_s: Speed of the slide in mm/s, float type. Default is -1, indicating the use of a default speed factor.\n  - use_internal_sense_resistors: Enable internal sense resistors if TRUE, disable if FALSE, boolean type. Default is TRUE.\n  - run_current_per: Motor run current percentage, range 0~100(%), integer type. Default is 100%.\n  - hold_current_per: Motor hold current percentage, range 0~100(%), integer type. Default is 100%.\n  - cfg_file_path: Configuration file path, string type. Default is an empty string, indicating no configuration file.\n"
                                            },
                                            "args": [
                                                [
                                                    "const char*",
                                                    "port",
                                                    null
                                                ],
                                                [
                                                    "uint8_t",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "long",
                                                    "baud",
                                                    null
                                                ],
                                                [
                                                    "/* Uart init param */             float",
                                                    "step_angle",
                                                    null
                                                ],
                                                [
                                                    "uint16_t",
                                                    "micro_step",
                                                    null
                                                ],
                                                [
                                                    "float",
                                                    "round_mm",
                                                    null
                                                ],
                                                [
                                                    "/* Motor init param */             float",
                                                    "speed_mm_s",
                                                    "-1"
                                                ],
                                                [
                                                    "bool",
                                                    "use_internal_sense_resistors",
                                                    "true"
                                                ],
                                                [
                                                    "uint8_t",
                                                    "run_current_per",
                                                    "100"
                                                ],
                                                [
                                                    "uint8_t",
                                                    "hold_current_per",
                                                    "100"
                                                ],
                                                [
                                                    "std::string",
                                                    "cfg_file_path",
                                                    "\"\" /* Driver init param */"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Slide(const char* port, uint8_t addr, long baud, /* Uart init param */\n            float step_angle, uint16_t micro_step, float round_mm,   /* Motor init param */\n            float speed_mm_s=-1, bool use_internal_sense_resistors=true, uint8_t run_current_per=100,\n            uint8_t hold_current_per=100, std::string cfg_file_path=\"\" /* Driver init param */)",
                                            "py_def": "def __init__(self, port: str, addr: int, baud: int, step_angle: float, micro_step: int, round_mm: float, speed_mm_s: float = -1, use_internal_sense_resistors: bool = True, run_current_per: int = 100, hold_current_per: int = 100, cfg_file_path: str = '') -> None"
                                        },
                                        "load_conf": {
                                            "type": "func",
                                            "name": "load_conf",
                                            "doc": {
                                                "brief": "Load configuration from a file\\nLoads the configuration settings for the slide from the specified file path.",
                                                "param": {
                                                    "path": "Path to the configuration file, string type."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.load_conf",
                                                "py_doc": "Load configuration from a file\nLoads the configuration settings for the slide from the specified file path.\n\nArgs:\n  - path: Path to the configuration file, string type.\n"
                                            },
                                            "args": [
                                                [
                                                    "std::string",
                                                    "path",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void load_conf(std::string path)",
                                            "py_def": "def load_conf(self, path: str) -> None"
                                        },
                                        "move": {
                                            "type": "func",
                                            "name": "move",
                                            "doc": {
                                                "brief": "Move the slide by a specified length\\nMoves the slide by the specified length at the given speed. Optionally checks for stall conditions.",
                                                "param": {
                                                    "oft": "Length to move, float type.",
                                                    "speed_mm_s": "Speed in mm/s. Default is -1, indicating the use of the default speed set during initialization.",
                                                    "check": "Enable movement check if true, boolean type. Default is true."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.move",
                                                "py_doc": "Move the slide by a specified length\nMoves the slide by the specified length at the given speed. Optionally checks for stall conditions.\n\nArgs:\n  - oft: Length to move, float type.\n  - speed_mm_s: Speed in mm/s. Default is -1, indicating the use of the default speed set during initialization.\n  - check: Enable movement check if true, boolean type. Default is true.\n"
                                            },
                                            "args": [
                                                [
                                                    "float",
                                                    "oft",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "speed_mm_s",
                                                    "-1"
                                                ],
                                                [
                                                    "bool",
                                                    "check",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void move(float oft, int speed_mm_s=-1, bool check=true)",
                                            "py_def": "def move(self, oft: float, speed_mm_s: int = -1, check: bool = True) -> None"
                                        },
                                        "reset": {
                                            "type": "func",
                                            "name": "reset",
                                            "doc": {
                                                "brief": "Reset the slide position\\nResets the slide position in the specified direction at the given speed.",
                                                "param": {
                                                    "dir": "Direction of reset, boolean type. Default is false.",
                                                    "speed_mm_s": "Speed in mm/s. Default is -1, indicating the use of the speed set during initialization."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.reset",
                                                "py_doc": "Reset the slide position\nResets the slide position in the specified direction at the given speed.\n\nArgs:\n  - dir: Direction of reset, boolean type. Default is false.\n  - speed_mm_s: Speed in mm/s. Default is -1, indicating the use of the speed set during initialization.\n"
                                            },
                                            "args": [
                                                [
                                                    "bool",
                                                    "dir",
                                                    "false"
                                                ],
                                                [
                                                    "int",
                                                    "speed_mm_s",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void reset(bool dir=false, int speed_mm_s=-1)",
                                            "py_def": "def reset(self, dir: bool = False, speed_mm_s: int = -1) -> None"
                                        },
                                        "stop_default_per": {
                                            "type": "func",
                                            "name": "stop_default_per",
                                            "doc": {
                                                "brief": "Get or set the stop default percentage\\nRetrieves or sets the stop default percentage. If the parameter is -1, it returns the current setting.",
                                                "param": {
                                                    "per": "Stop default percentage, range 0~100(%), integer type. Default is -1, indicating no change."
                                                },
                                                "return": "int Current stop default percentage if per is -1, otherwise the new set percentage.",
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.stop_default_per",
                                                "py_doc": "Get or set the stop default percentage\nRetrieves or sets the stop default percentage. If the parameter is -1, it returns the current setting.\n\nArgs:\n  - per: Stop default percentage, range 0~100(%), integer type. Default is -1, indicating no change.\n\n\nReturns: int Current stop default percentage if per is -1, otherwise the new set percentage.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "per",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int stop_default_per(int per=-1)"
                                        },
                                        "run_current_per": {
                                            "type": "func",
                                            "name": "run_current_per",
                                            "doc": {
                                                "brief": "Get or set the run current percentage\\nRetrieves or sets the run current percentage. If the parameter is -1, it returns the current setting.",
                                                "param": {
                                                    "per": "Run current percentage, range 0~100(%), integer type. Default is -1, indicating no change."
                                                },
                                                "return": "int Current run current percentage if per is -1, otherwise the new set percentage.",
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.run_current_per",
                                                "py_doc": "Get or set the run current percentage\nRetrieves or sets the run current percentage. If the parameter is -1, it returns the current setting.\n\nArgs:\n  - per: Run current percentage, range 0~100(%), integer type. Default is -1, indicating no change.\n\n\nReturns: int Current run current percentage if per is -1, otherwise the new set percentage.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "per",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int run_current_per(int per=-1)",
                                            "py_def": "def run_current_per(self, per: int = -1) -> int"
                                        },
                                        "hold_current_per": {
                                            "type": "func",
                                            "name": "hold_current_per",
                                            "doc": {
                                                "brief": "Get or set the hold current percentage\\nRetrieves or sets the hold current percentage. If the parameter is -1, it returns the current setting.",
                                                "param": {
                                                    "per": "Hold current percentage, range 0~100(%), integer type. Default is -1, indicating no change."
                                                },
                                                "return": "int Current hold current percentage if per is -1, otherwise the new set percentage.",
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.hold_current_per",
                                                "py_doc": "Get or set the hold current percentage\nRetrieves or sets the hold current percentage. If the parameter is -1, it returns the current setting.\n\nArgs:\n  - per: Hold current percentage, range 0~100(%), integer type. Default is -1, indicating no change.\n\n\nReturns: int Current hold current percentage if per is -1, otherwise the new set percentage.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "per",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int hold_current_per(int per=-1)",
                                            "py_def": "def hold_current_per(self, per: int = -1) -> int"
                                        },
                                        "use_internal_sense_resistors": {
                                            "type": "func",
                                            "name": "use_internal_sense_resistors",
                                            "doc": {
                                                "brief": "Enable or disable internal sense resistors\\nEnables or disables the internal sense resistors based on the provided boolean value.",
                                                "param": {
                                                    "b": "Boolean value to enable (true) or disable (false) internal sense resistors. Default is true."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.Slide.use_internal_sense_resistors",
                                                "py_doc": "Enable or disable internal sense resistors\nEnables or disables the internal sense resistors based on the provided boolean value.\n\nArgs:\n  - b: Boolean value to enable (true) or disable (false) internal sense resistors. Default is true.\n"
                                            },
                                            "args": [
                                                [
                                                    "bool",
                                                    "b",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void use_internal_sense_resistors(bool b=true)",
                                            "py_def": "def use_internal_sense_resistors(self, b: bool = True) -> None"
                                        }
                                    },
                                    "def": "class Slide"
                                },
                                "ScrewSlide": {
                                    "type": "class",
                                    "name": "ScrewSlide",
                                    "doc": {
                                        "brief": "ScrewSlide Class",
                                        "maixpy": "maix.ext_dev.tmc2209.ScrewSlide",
                                        "py_doc": "ScrewSlide Class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "ScrewSlide",
                                            "doc": {
                                                "brief": "Constructor for ScrewSlide",
                                                "param": {
                                                    "port": "UART port, string type.",
                                                    "addr": "TMC2209 UART address, range 0x00~0x03, integer type.",
                                                    "baud": "UART baud rate, integer type.",
                                                    "step_angle": "Motor step angle, float type.",
                                                    "micro_step": "Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.",
                                                    "screw_pitch": "Screw pitch of the slide, integer type.",
                                                    "speed_mm_s": "Speed of the slide in mm/s, 10 means 10mm/s, float type.\nDefault is -1, indicating the use of a default speed factor.",
                                                    "use_internal_sense_resistors": "Enable internal sense resistors if TRUE,\ndisable if FALSE, boolean type. Default is TRUE.",
                                                    "run_current_per": "Motor run current percentage, range 0~100(%), integer type. Default is 100%.",
                                                    "hold_current_per": "Motor hold current percentage, range 0~100(%), integer type. Default is 100%."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.__init__",
                                                "py_doc": "Constructor for ScrewSlide\n\nArgs:\n  - port: UART port, string type.\n  - addr: TMC2209 UART address, range 0x00~0x03, integer type.\n  - baud: UART baud rate, integer type.\n  - step_angle: Motor step angle, float type.\n  - micro_step: Motor micro step, options: 1/2/4/8/16/32/64/128/256, integer type.\n  - screw_pitch: Screw pitch of the slide, integer type.\n  - speed_mm_s: Speed of the slide in mm/s, 10 means 10mm/s, float type.\nDefault is -1, indicating the use of a default speed factor.\n  - use_internal_sense_resistors: Enable internal sense resistors if TRUE,\ndisable if FALSE, boolean type. Default is TRUE.\n  - run_current_per: Motor run current percentage, range 0~100(%), integer type. Default is 100%.\n  - hold_current_per: Motor hold current percentage, range 0~100(%), integer type. Default is 100%.\n"
                                            },
                                            "args": [
                                                [
                                                    "const char*",
                                                    "port",
                                                    null
                                                ],
                                                [
                                                    "uint8_t",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "long",
                                                    "baud",
                                                    null
                                                ],
                                                [
                                                    "/* Uart init param */                 float",
                                                    "step_angle",
                                                    null
                                                ],
                                                [
                                                    "uint16_t",
                                                    "micro_step",
                                                    null
                                                ],
                                                [
                                                    "float",
                                                    "screw_pitch",
                                                    null
                                                ],
                                                [
                                                    "/* Motor init param */                 float",
                                                    "speed_mm_s",
                                                    "-1"
                                                ],
                                                [
                                                    "bool",
                                                    "use_internal_sense_resistors",
                                                    "true"
                                                ],
                                                [
                                                    "uint8_t",
                                                    "run_current_per",
                                                    "100"
                                                ],
                                                [
                                                    "uint8_t",
                                                    "hold_current_per",
                                                    "100"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "ScrewSlide(const char* port, uint8_t addr, long baud, /* Uart init param */\n                float step_angle, uint16_t micro_step, float screw_pitch,   /* Motor init param */\n                float speed_mm_s=-1, bool use_internal_sense_resistors=true, uint8_t run_current_per=100,\n                uint8_t hold_current_per=100)",
                                            "py_def": "def __init__(self, port: str, addr: int, baud: int, step_angle: float, micro_step: int, screw_pitch: float, speed_mm_s: float = -1, use_internal_sense_resistors: bool = True, run_current_per: int = 100, hold_current_per: int = 100) -> None"
                                        },
                                        "move": {
                                            "type": "func",
                                            "name": "move",
                                            "doc": {
                                                "brief": "Move the slide by a specified length",
                                                "param": {
                                                    "oft": "Length to move, 10 means 10mm, float type.\nPositive values move the slide in the positive direction, negative values move it in the opposite direction.",
                                                    "speed_mm_s": "Speed in mm/s. Default is -1, indicating the use of the default speed set during initialization.",
                                                    "callback": "Callback function to be called during movement.\nThe callback function receives the current progress percentage (0~100%) of the movement.\nIf the callback returns true, the move operation will be terminated immediately. Default is nullptr."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.move",
                                                "py_doc": "Move the slide by a specified length\n\nArgs:\n  - oft: Length to move, 10 means 10mm, float type.\nPositive values move the slide in the positive direction, negative values move it in the opposite direction.\n  - speed_mm_s: Speed in mm/s. Default is -1, indicating the use of the default speed set during initialization.\n  - callback: Callback function to be called during movement.\nThe callback function receives the current progress percentage (0~100%) of the movement.\nIf the callback returns true, the move operation will be terminated immediately. Default is nullptr.\n"
                                            },
                                            "args": [
                                                [
                                                    "float",
                                                    "oft",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "speed_mm_s",
                                                    "-1"
                                                ],
                                                [
                                                    "std::function<bool(float)>",
                                                    "callback",
                                                    "nullptr"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void move(float oft, int speed_mm_s=-1, std::function<bool(float)> callback=nullptr)",
                                            "py_def": "def move(self, oft: float, speed_mm_s: int = -1, callback: typing.Callable[[float], bool] = None) -> None"
                                        },
                                        "reset": {
                                            "type": "func",
                                            "name": "reset",
                                            "doc": {
                                                "brief": "Reset the slide position",
                                                "param": {
                                                    "callback": "Callback function to be called during the reset loop.\nThe reset operation will only terminate if the callback returns true.",
                                                    "dir": "Direction of reset. Default is false.",
                                                    "speed_mm_s": "Speed in mm/s. Default is -1, indicating the use of the speed set during initialization."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.reset",
                                                "py_doc": "Reset the slide position\n\nArgs:\n  - callback: Callback function to be called during the reset loop.\nThe reset operation will only terminate if the callback returns true.\n  - dir: Direction of reset. Default is false.\n  - speed_mm_s: Speed in mm/s. Default is -1, indicating the use of the speed set during initialization.\n"
                                            },
                                            "args": [
                                                [
                                                    "std::function<bool(void)>",
                                                    "callback",
                                                    null
                                                ],
                                                [
                                                    "bool",
                                                    "dir",
                                                    "false"
                                                ],
                                                [
                                                    "int",
                                                    "speed_mm_s",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void reset(std::function<bool(void)> callback, bool dir=false, int speed_mm_s=-1)",
                                            "py_def": "def reset(self, callback: typing.Callable[[], bool], dir: bool = False, speed_mm_s: int = -1) -> None"
                                        },
                                        "run_current_per": {
                                            "type": "func",
                                            "name": "run_current_per",
                                            "doc": {
                                                "brief": "Get or set the run current percentage",
                                                "param": {
                                                    "per": "Run current percentage, range 0~100(%).\nDefault is -1, indicating no change and returning the current run current percentage."
                                                },
                                                "return": "int Current run current percentage if per is -1, otherwise the new set percentage.",
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.run_current_per",
                                                "py_doc": "Get or set the run current percentage\n\nArgs:\n  - per: Run current percentage, range 0~100(%).\nDefault is -1, indicating no change and returning the current run current percentage.\n\n\nReturns: int Current run current percentage if per is -1, otherwise the new set percentage.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "per",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int run_current_per(int per=-1)",
                                            "py_def": "def run_current_per(self, per: int = -1) -> int"
                                        },
                                        "hold_current_per": {
                                            "type": "func",
                                            "name": "hold_current_per",
                                            "doc": {
                                                "brief": "Get or set the hold current percentage",
                                                "param": {
                                                    "per": "Hold current percentage, range 0~100(%). Default is -1, indicating no change and returning the current hold current percentage."
                                                },
                                                "return": "int Current hold current percentage if per is -1, otherwise the new set percentage.",
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.hold_current_per",
                                                "py_doc": "Get or set the hold current percentage\n\nArgs:\n  - per: Hold current percentage, range 0~100(%). Default is -1, indicating no change and returning the current hold current percentage.\n\n\nReturns: int Current hold current percentage if per is -1, otherwise the new set percentage.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "per",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int hold_current_per(int per=-1)",
                                            "py_def": "def hold_current_per(self, per: int = -1) -> int"
                                        },
                                        "use_internal_sense_resistors": {
                                            "type": "func",
                                            "name": "use_internal_sense_resistors",
                                            "doc": {
                                                "brief": "Enable or disable internal sense resistors",
                                                "param": {
                                                    "b": "Boolean value to enable (true) or disable (false) internal sense resistors. Default is true."
                                                },
                                                "maixpy": "maix.ext_dev.tmc2209.ScrewSlide.use_internal_sense_resistors",
                                                "py_doc": "Enable or disable internal sense resistors\n\nArgs:\n  - b: Boolean value to enable (true) or disable (false) internal sense resistors. Default is true.\n"
                                            },
                                            "args": [
                                                [
                                                    "bool",
                                                    "b",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void use_internal_sense_resistors(bool b=true)",
                                            "py_def": "def use_internal_sense_resistors(self, b: bool = True) -> None"
                                        }
                                    },
                                    "def": "class ScrewSlide"
                                }
                            },
                            "auto_add": true
                        },
                        "bm8563": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.ext_dev.bm8563 module"
                            },
                            "members": {
                                "BM8563": {
                                    "type": "class",
                                    "name": "BM8563",
                                    "doc": {
                                        "brief": "Peripheral BM8563 class",
                                        "maixpy": "maix.ext_dev.bm8563.BM8563",
                                        "py_doc": "Peripheral BM8563 class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "BM8563",
                                            "doc": {
                                                "brief": "BM8563 constructor",
                                                "param": {
                                                    "i2c_bus": "i2c bus number."
                                                },
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.__init__",
                                                "py_doc": "BM8563 constructor\n\nArgs:\n  - i2c_bus: i2c bus number.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "i2c_bus",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "BM8563(int i2c_bus=-1)",
                                            "py_def": "def __init__(self, i2c_bus: int = -1) -> None"
                                        },
                                        "datetime": {
                                            "type": "func",
                                            "name": "datetime",
                                            "doc": {
                                                "brief": "Get or set the date and time of the BM8563.",
                                                "param": {
                                                    "timetuple": "time tuple, like (year, month, day[, hour[, minute[, second]]])"
                                                },
                                                "return": "time tuple, like (year, month, day[, hour[, minute[, second]]])",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.datetime",
                                                "py_doc": "Get or set the date and time of the BM8563.\n\nArgs:\n  - timetuple: time tuple, like (year, month, day[, hour[, minute[, second]]])\n\n\nReturns: time tuple, like (year, month, day[, hour[, minute[, second]]])\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<int>",
                                                    "timetuple",
                                                    "std::vector<int>()"
                                                ]
                                            ],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> datetime(std::vector<int> timetuple=std::vector<int>())",
                                            "py_def": "def datetime(self, timetuple: list[int] = []) -> list[int]"
                                        },
                                        "init": {
                                            "type": "func",
                                            "name": "init",
                                            "doc": {
                                                "brief": "Initialise the BM8563.",
                                                "param": {
                                                    "timetuple": "time tuple, like (year, month, day[, hour[, minute[, second]]])"
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.init",
                                                "py_doc": "Initialise the BM8563.\n\nArgs:\n  - timetuple: time tuple, like (year, month, day[, hour[, minute[, second]]])\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<int>",
                                                    "timetuple",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err init(std::vector<int> timetuple)",
                                            "py_def": "def init(self, timetuple: list[int]) -> maix.err.Err"
                                        },
                                        "now": {
                                            "type": "func",
                                            "name": "now",
                                            "doc": {
                                                "brief": "Get get the current datetime.",
                                                "return": "time tuple, like (year, month, day[, hour[, minute[, second]]])",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.now",
                                                "py_doc": "Get get the current datetime.\n\nReturns: time tuple, like (year, month, day[, hour[, minute[, second]]])\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> now()",
                                            "py_def": "def now(self) -> list[int]"
                                        },
                                        "deinit": {
                                            "type": "func",
                                            "name": "deinit",
                                            "doc": {
                                                "brief": "Deinit the BM8563.",
                                                "return": "err::Err err::Err type, if deinit success, return err::ERR_NONE",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.deinit",
                                                "py_doc": "Deinit the BM8563.\n\nReturns: err::Err err::Err type, if deinit success, return err::ERR_NONE\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err deinit()",
                                            "py_def": "def deinit(self) -> maix.err.Err"
                                        },
                                        "hctosys": {
                                            "type": "func",
                                            "name": "hctosys",
                                            "doc": {
                                                "brief": "Set the system time from the BM8563",
                                                "return": "err::Err type",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.hctosys",
                                                "py_doc": "Set the system time from the BM8563\n\nReturns: err::Err type\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err hctosys()",
                                            "py_def": "def hctosys(self) -> maix.err.Err"
                                        },
                                        "systohc": {
                                            "type": "func",
                                            "name": "systohc",
                                            "doc": {
                                                "brief": "Set the BM8563 from the system time",
                                                "return": "err::Err type",
                                                "maixpy": "maix.ext_dev.bm8563.BM8563.systohc",
                                                "py_doc": "Set the BM8563 from the system time\n\nReturns: err::Err type\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err systohc()",
                                            "py_def": "def systohc(self) -> maix.err.Err"
                                        }
                                    },
                                    "def": "class BM8563"
                                }
                            },
                            "auto_add": true
                        }
                    },
                    "auto_add": true
                },
                "audio": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.audio module",
                        "maixpy": "maix.audio",
                        "py_doc": "maix.audio module"
                    },
                    "members": {
                        "Format": {
                            "type": "enum",
                            "name": "Format",
                            "doc": {
                                "brief": "Audio type",
                                "maixpy": "maix.audio.Format",
                                "py_doc": "Audio type"
                            },
                            "values": [
                                [
                                    "FMT_NONE",
                                    "0",
                                    "format invalid"
                                ],
                                [
                                    "FMT_S8",
                                    "",
                                    "unsigned 8 bits"
                                ],
                                [
                                    "FMT_S16_LE",
                                    "",
                                    "signed 16 bits, little endian"
                                ],
                                [
                                    "FMT_S32_LE",
                                    "",
                                    "signed 32 bits, little endian"
                                ],
                                [
                                    "FMT_S16_BE",
                                    "",
                                    "signed 16 bits, big endian"
                                ],
                                [
                                    "FMT_S32_BE",
                                    "",
                                    "signed 32 bits, big endian"
                                ],
                                [
                                    "FMT_U8",
                                    "",
                                    "unsigned 8 bits"
                                ],
                                [
                                    "FMT_U16_LE",
                                    "",
                                    "unsigned 16 bits, little endian"
                                ],
                                [
                                    "FMT_U32_LE",
                                    "",
                                    "unsigned 32 bits, little endian"
                                ],
                                [
                                    "FMT_U16_BE",
                                    "",
                                    "unsigned 16 bits, big endian"
                                ],
                                [
                                    "FMT_U32_BE",
                                    "",
                                    "unsigned 32 bits, big endian"
                                ]
                            ],
                            "def": "enum Format\n    {\n        FMT_NONE = 0,       // format invalid\n        FMT_S8,             // unsigned 8 bits\n        FMT_S16_LE,         // signed 16 bits, little endian\n        FMT_S32_LE,         // signed 32 bits, little endian\n        FMT_S16_BE,         // signed 16 bits, big endian\n        FMT_S32_BE,         // signed 32 bits, big endian\n        FMT_U8,             // unsigned 8 bits\n        FMT_U16_LE,         // unsigned 16 bits, little endian\n        FMT_U32_LE,         // unsigned 32 bits, little endian\n        FMT_U16_BE,         // unsigned 16 bits, big endian\n        FMT_U32_BE,         // unsigned 32 bits, big endian\n    }"
                        },
                        "Recorder": {
                            "type": "class",
                            "name": "Recorder",
                            "doc": {
                                "brief": "Recorder class",
                                "maixpy": "maix.audio.Recorder",
                                "py_doc": "Recorder class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Recorder",
                                    "doc": {
                                        "brief": "Construct a new Recorder object. currectly only pcm and wav formats supported.",
                                        "param": {
                                            "path": "record path. the path determines the location where you save the file, if path is none, the audio module will not save file.",
                                            "sample_rate": "record sample rate, default is 48000(48KHz), means 48000 samples per second.",
                                            "format": "record sample format, default is audio::Format::FMT_S16_LE, means sampling 16 bits at a time and save as signed 16 bits, little endian. see @audio::Format",
                                            "channel": "record sample channel, default is 1, means 1 channel sampling at the same time"
                                        },
                                        "maixpy": "maix.audio.Recorder.__init__",
                                        "maixcdk": "maix.audio.Recorder.Recorder",
                                        "py_doc": "Construct a new Recorder object. currectly only pcm and wav formats supported.\n\nArgs:\n  - path: record path. the path determines the location where you save the file, if path is none, the audio module will not save file.\n  - sample_rate: record sample rate, default is 48000(48KHz), means 48000 samples per second.\n  - format: record sample format, default is audio::Format::FMT_S16_LE, means sampling 16 bits at a time and save as signed 16 bits, little endian. see @audio::Format\n  - channel: record sample channel, default is 1, means 1 channel sampling at the same time\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "sample_rate",
                                            "48000"
                                        ],
                                        [
                                            "audio::Format",
                                            "format",
                                            "audio::Format::FMT_S16_LE"
                                        ],
                                        [
                                            "int",
                                            "channel",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Recorder(std::string path = std::string(), int sample_rate = 48000, audio::Format format = audio::Format::FMT_S16_LE, int channel = 1)",
                                    "py_def": "def __init__(self, path: str = '', sample_rate: int = 48000, format: Format = ..., channel: int = 1) -> None"
                                },
                                "volume": {
                                    "type": "func",
                                    "name": "volume",
                                    "doc": {
                                        "brief": "Set/Get record volume",
                                        "param": {
                                            "value": "volume value, If you use this parameter, audio will set the value to volume,\nif you don't, it will return the current volume. range is [0, 100]."
                                        },
                                        "return": "the current volume",
                                        "maixpy": "maix.audio.Recorder.volume",
                                        "py_doc": "Set/Get record volume\n\nArgs:\n  - value: volume value, If you use this parameter, audio will set the value to volume,\nif you don't, it will return the current volume. range is [0, 100].\n\n\nReturns: the current volume\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int volume(int value = -1)",
                                    "py_def": "def volume(self, value: int = -1) -> int"
                                },
                                "mute": {
                                    "type": "func",
                                    "name": "mute",
                                    "doc": {
                                        "brief": "Mute",
                                        "param": {
                                            "data": "mute data, If you set this parameter to true, audio will set the value to mute,\nif you don't, it will return the current mute status."
                                        },
                                        "return": "Returns whether mute is currently enabled.",
                                        "maixpy": "maix.audio.Recorder.mute",
                                        "py_doc": "Mute\n\nArgs:\n  - data: mute data, If you set this parameter to true, audio will set the value to mute,\nif you don't, it will return the current mute status.\n\n\nReturns: Returns whether mute is currently enabled.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "data",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool mute(int data = -1)",
                                    "py_def": "def mute(self, data: int = -1) -> bool"
                                },
                                "record": {
                                    "type": "func",
                                    "name": "record",
                                    "doc": {
                                        "brief": "Record, Read all cached data in buffer and return. If there is no audio data in the buffer, may return empty data.",
                                        "param": {
                                            "record_ms": "Block and record audio data lasting `record_ms` milliseconds and save it to a file, the return value does not return audio data. Only valid if the initialisation `path` is set."
                                        },
                                        "return": "pcm data. datatype @see Bytes. If you pass in record_ms parameter, the return value is an empty Bytes object.",
                                        "maixpy": "maix.audio.Recorder.record",
                                        "py_doc": "Record, Read all cached data in buffer and return. If there is no audio data in the buffer, may return empty data.\n\nArgs:\n  - record_ms: Block and record audio data lasting `record_ms` milliseconds and save it to a file, the return value does not return audio data. Only valid if the initialisation `path` is set.\n\n\nReturns: pcm data. datatype @see Bytes. If you pass in record_ms parameter, the return value is an empty Bytes object.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "record_ms",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "maix::Bytes*",
                                    "static": false,
                                    "def": "maix::Bytes *record(int record_ms = -1)",
                                    "py_def": "def record(*args, **kwargs)"
                                },
                                "finish": {
                                    "type": "func",
                                    "name": "finish",
                                    "doc": {
                                        "brief": "Finish the record, if you have passed in the path, this api will save the audio data to file.",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.audio.Recorder.finish",
                                        "py_doc": "Finish the record, if you have passed in the path, this api will save the audio data to file.\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err finish()",
                                    "py_def": "def finish(self) -> maix.err.Err"
                                },
                                "sample_rate": {
                                    "type": "func",
                                    "name": "sample_rate",
                                    "doc": {
                                        "brief": "Get sample rate",
                                        "return": "returns sample rate",
                                        "maixpy": "maix.audio.Recorder.sample_rate",
                                        "py_doc": "Get sample rate\n\nReturns: returns sample rate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int sample_rate()",
                                    "py_def": "def sample_rate(self) -> int"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get sample format",
                                        "return": "returns sample format",
                                        "maixpy": "maix.audio.Recorder.format",
                                        "py_doc": "Get sample format\n\nReturns: returns sample format\n"
                                    },
                                    "args": [],
                                    "ret_type": "audio::Format",
                                    "static": false,
                                    "def": "audio::Format format()",
                                    "py_def": "def format(self) -> Format"
                                },
                                "channel": {
                                    "type": "func",
                                    "name": "channel",
                                    "doc": {
                                        "brief": "Get sample channel",
                                        "return": "returns sample channel",
                                        "maixpy": "maix.audio.Recorder.channel",
                                        "py_doc": "Get sample channel\n\nReturns: returns sample channel\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int channel()",
                                    "py_def": "def channel(self) -> int"
                                }
                            },
                            "def": "class Recorder"
                        },
                        "Player": {
                            "type": "class",
                            "name": "Player",
                            "doc": {
                                "brief": "Player class",
                                "maixpy": "maix.audio.Player",
                                "py_doc": "Player class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Player",
                                    "doc": {
                                        "brief": "Construct a new Player object",
                                        "param": {
                                            "path": "player path. the path determines the location where you save the file, if path is none, the audio module will not save file.",
                                            "sample_rate": "player sample rate, default is 48000(48KHz), means 48000 samples per second.",
                                            "format": "player sample format, default is audio::Format::FMT_S16_LE, means sampling 16 bits at a time and save as signed 16 bits, little endian. see @audio::Format",
                                            "channel": "player sample channel, default is 1, means 1 channel sampling at the same time"
                                        },
                                        "maixpy": "maix.audio.Player.__init__",
                                        "maixcdk": "maix.audio.Player.Player",
                                        "py_doc": "Construct a new Player object\n\nArgs:\n  - path: player path. the path determines the location where you save the file, if path is none, the audio module will not save file.\n  - sample_rate: player sample rate, default is 48000(48KHz), means 48000 samples per second.\n  - format: player sample format, default is audio::Format::FMT_S16_LE, means sampling 16 bits at a time and save as signed 16 bits, little endian. see @audio::Format\n  - channel: player sample channel, default is 1, means 1 channel sampling at the same time\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "sample_rate",
                                            "48000"
                                        ],
                                        [
                                            "audio::Format",
                                            "format",
                                            "audio::Format::FMT_S16_LE"
                                        ],
                                        [
                                            "int",
                                            "channel",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Player(std::string path = std::string(), int sample_rate = 48000, audio::Format format = audio::Format::FMT_S16_LE, int channel = 1)",
                                    "py_def": "def __init__(self, path: str = '', sample_rate: int = 48000, format: Format = ..., channel: int = 1) -> None"
                                },
                                "volume": {
                                    "type": "func",
                                    "name": "volume",
                                    "doc": {
                                        "brief": "Set/Get player volume(Not support now)",
                                        "param": {
                                            "value": "volume value, If you use this parameter, audio will set the value to volume,\nif you don't, it will return the current volume."
                                        },
                                        "return": "the current volume",
                                        "maixpy": "maix.audio.Player.volume",
                                        "py_doc": "Set/Get player volume(Not support now)\n\nArgs:\n  - value: volume value, If you use this parameter, audio will set the value to volume,\nif you don't, it will return the current volume.\n\n\nReturns: the current volume\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "value",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int volume(int value = -1)",
                                    "py_def": "def volume(self, value: int = -1) -> int"
                                },
                                "play": {
                                    "type": "func",
                                    "name": "play",
                                    "doc": {
                                        "brief": "Play",
                                        "param": {
                                            "data": "audio data, must be raw data"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.audio.Player.play",
                                        "py_doc": "Play\n\nArgs:\n  - data: audio data, must be raw data\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "maix::Bytes *",
                                            "data",
                                            "maix::audio::Player::NoneBytes"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err play(maix::Bytes *data = maix::audio::Player::NoneBytes)",
                                    "py_def": "def play(self, data: maix.Bytes(bytes) = b'') -> maix.err.Err"
                                },
                                "sample_rate": {
                                    "type": "func",
                                    "name": "sample_rate",
                                    "doc": {
                                        "brief": "Get sample rate",
                                        "return": "returns sample rate",
                                        "maixpy": "maix.audio.Player.sample_rate",
                                        "py_doc": "Get sample rate\n\nReturns: returns sample rate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int sample_rate()",
                                    "py_def": "def sample_rate(self) -> int"
                                },
                                "format": {
                                    "type": "func",
                                    "name": "format",
                                    "doc": {
                                        "brief": "Get sample format",
                                        "return": "returns sample format",
                                        "maixpy": "maix.audio.Player.format",
                                        "py_doc": "Get sample format\n\nReturns: returns sample format\n"
                                    },
                                    "args": [],
                                    "ret_type": "audio::Format",
                                    "static": false,
                                    "def": "audio::Format format()",
                                    "py_def": "def format(self) -> Format"
                                },
                                "channel": {
                                    "type": "func",
                                    "name": "channel",
                                    "doc": {
                                        "brief": "Get sample channel",
                                        "return": "returns sample channel",
                                        "maixpy": "maix.audio.Player.channel",
                                        "py_doc": "Get sample channel\n\nReturns: returns sample channel\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int channel()",
                                    "py_def": "def channel(self) -> int"
                                }
                            },
                            "def": "class Player"
                        }
                    },
                    "auto_add": false
                },
                "tracker": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.tracker module"
                    },
                    "members": {
                        "Object": {
                            "type": "class",
                            "name": "Object",
                            "doc": {
                                "brief": "tracker.Object class",
                                "maixpy": "maix.tracker.Object",
                                "py_doc": "tracker.Object class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Object",
                                    "doc": {
                                        "brief": "tracker.Object class constructor",
                                        "maixpy": "maix.tracker.Object.__init__",
                                        "maixcdk": "maix.tracker.Object.Object",
                                        "py_doc": "tracker.Object class constructor"
                                    },
                                    "args": [
                                        [
                                            "const int &",
                                            "x",
                                            null
                                        ],
                                        [
                                            "const int &",
                                            "y",
                                            null
                                        ],
                                        [
                                            "const int &",
                                            "w",
                                            null
                                        ],
                                        [
                                            "const int &",
                                            "h",
                                            null
                                        ],
                                        [
                                            "const int &",
                                            "class_id",
                                            null
                                        ],
                                        [
                                            "const float &",
                                            "score",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Object(const int &x, const int &y, const int &w, const int &h, const int &class_id, const float &score)",
                                    "py_def": "def __init__(self, x: int, y: int, w: int, h: int, class_id: int, score: float) -> None"
                                },
                                "x": {
                                    "type": "var",
                                    "name": "x",
                                    "doc": {
                                        "brief": "position x attribute.",
                                        "maixpy": "maix.tracker.Object.x",
                                        "py_doc": "position x attribute."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x"
                                },
                                "y": {
                                    "type": "var",
                                    "name": "y",
                                    "doc": {
                                        "brief": "position y attribute.",
                                        "maixpy": "maix.tracker.Object.y",
                                        "py_doc": "position y attribute."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y"
                                },
                                "w": {
                                    "type": "var",
                                    "name": "w",
                                    "doc": {
                                        "brief": "position rectangle width.",
                                        "maixpy": "maix.tracker.Object.w",
                                        "py_doc": "position rectangle width."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int w"
                                },
                                "h": {
                                    "type": "var",
                                    "name": "h",
                                    "doc": {
                                        "brief": "position rectangle height.",
                                        "maixpy": "maix.tracker.Object.h",
                                        "py_doc": "position rectangle height."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int h"
                                },
                                "class_id": {
                                    "type": "var",
                                    "name": "class_id",
                                    "doc": {
                                        "brief": "object class id, int type.",
                                        "maixpy": "maix.tracker.Object.class_id",
                                        "py_doc": "object class id, int type."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int class_id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "object score(prob).",
                                        "maixpy": "maix.tracker.Object.score",
                                        "py_doc": "object score(prob)."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                }
                            },
                            "def": "class Object"
                        },
                        "Track": {
                            "type": "class",
                            "name": "Track",
                            "doc": {
                                "brief": "tracker.Track class",
                                "maixpy": "maix.tracker.Track",
                                "py_doc": "tracker.Track class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Track",
                                    "doc": {
                                        "brief": "tracker.Track class constructor",
                                        "maixpy": "maix.tracker.Track.__init__",
                                        "maixcdk": "maix.tracker.Track.Track",
                                        "py_doc": "tracker.Track class constructor"
                                    },
                                    "args": [
                                        [
                                            "const size_t &",
                                            "id",
                                            null
                                        ],
                                        [
                                            "const float &",
                                            "score",
                                            null
                                        ],
                                        [
                                            "const bool &",
                                            "lost",
                                            null
                                        ],
                                        [
                                            "const size_t &",
                                            "start_frame_id",
                                            null
                                        ],
                                        [
                                            "const size_t &",
                                            "frame_id",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Track(const size_t &id, const float &score, const bool &lost, const size_t &start_frame_id, const size_t &frame_id)",
                                    "py_def": "def __init__(self, id: int, score: float, lost: bool, start_frame_id: int, frame_id: int) -> None"
                                },
                                "id": {
                                    "type": "var",
                                    "name": "id",
                                    "doc": {
                                        "brief": "track id.",
                                        "maixpy": "maix.tracker.Track.id",
                                        "py_doc": "track id."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "size_t id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "track score(prob).",
                                        "maixpy": "maix.tracker.Track.score",
                                        "py_doc": "track score(prob)."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                },
                                "lost": {
                                    "type": "var",
                                    "name": "lost",
                                    "doc": {
                                        "brief": "whether this track lost.",
                                        "maixpy": "maix.tracker.Track.lost",
                                        "py_doc": "whether this track lost."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool lost"
                                },
                                "start_frame_id": {
                                    "type": "var",
                                    "name": "start_frame_id",
                                    "doc": {
                                        "brief": "track start frame id.",
                                        "maixpy": "maix.tracker.Track.start_frame_id",
                                        "py_doc": "track start frame id."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "size_t start_frame_id"
                                },
                                "frame_id": {
                                    "type": "var",
                                    "name": "frame_id",
                                    "doc": {
                                        "brief": "track current frame id.",
                                        "maixpy": "maix.tracker.Track.frame_id",
                                        "py_doc": "track current frame id."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "size_t frame_id"
                                },
                                "history": {
                                    "type": "var",
                                    "name": "history",
                                    "doc": {
                                        "brief": "track position history, the last one is latest position.",
                                        "maixpy": "maix.tracker.Track.history",
                                        "py_doc": "track position history, the last one is latest position."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::deque<tracker::Object> history"
                                }
                            },
                            "def": "class Track"
                        },
                        "ByteTracker": {
                            "type": "class",
                            "name": "ByteTracker",
                            "doc": {
                                "brief": "tracker.ByteTracker class",
                                "maixpy": "maix.tracker.ByteTracker",
                                "py_doc": "tracker.ByteTracker class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "ByteTracker",
                                    "doc": {
                                        "brief": "tracker.ByteTracker class constructor",
                                        "param": {
                                            "max_lost_buff_num": "the frames for keep lost tracks.",
                                            "track_thresh": "tracking confidence threshold.",
                                            "high_thresh": "threshold to add to new track.",
                                            "match_thresh": "matching threshold for tracking, e.g. one object in two frame iou < match_thresh we think they are the same obj.",
                                            "max_history": "max tack's position history length."
                                        },
                                        "maixpy": "maix.tracker.ByteTracker.__init__",
                                        "maixcdk": "maix.tracker.ByteTracker.ByteTracker",
                                        "py_doc": "tracker.ByteTracker class constructor\n\nArgs:\n  - max_lost_buff_num: the frames for keep lost tracks.\n  - track_thresh: tracking confidence threshold.\n  - high_thresh: threshold to add to new track.\n  - match_thresh: matching threshold for tracking, e.g. one object in two frame iou < match_thresh we think they are the same obj.\n  - max_history: max tack's position history length.\n"
                                    },
                                    "args": [
                                        [
                                            "const int &",
                                            "max_lost_buff_num",
                                            "60"
                                        ],
                                        [
                                            "const float &",
                                            "track_thresh",
                                            "0.5"
                                        ],
                                        [
                                            "const float &",
                                            "high_thresh",
                                            "0.6"
                                        ],
                                        [
                                            "const float &",
                                            "match_thresh",
                                            "0.8"
                                        ],
                                        [
                                            "const int &",
                                            "max_history",
                                            "20"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "ByteTracker(const int &max_lost_buff_num = 60,\n                    const float &track_thresh = 0.5,\n                    const float &high_thresh = 0.6,\n                    const float &match_thresh = 0.8,\n                    const int &max_history = 20)",
                                    "py_def": "def __init__(self, max_lost_buff_num: int = 60, track_thresh: float = 0.5, high_thresh: float = 0.6, match_thresh: float = 0.8, max_history: int = 20) -> None"
                                },
                                "update": {
                                    "type": "func",
                                    "name": "update",
                                    "doc": {
                                        "brief": "update tracks according to current detected objects.",
                                        "maixpy": "maix.tracker.ByteTracker.update",
                                        "py_doc": "update tracks according to current detected objects."
                                    },
                                    "args": [
                                        [
                                            "const std::vector<tracker::Object> &",
                                            "objs",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<tracker::Track>",
                                    "static": false,
                                    "def": "std::vector<tracker::Track> update(const std::vector<tracker::Object> &objs)",
                                    "py_def": "def update(self, objs: list[Object]) -> list[Track]"
                                }
                            },
                            "def": "class ByteTracker"
                        }
                    },
                    "auto_add": true
                },
                "http": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.http module"
                    },
                    "members": {
                        "JpegStreamer": {
                            "type": "class",
                            "name": "JpegStreamer",
                            "doc": {
                                "brief": "JpegStreamer class",
                                "maixpy": "maix.http.JpegStreamer",
                                "py_doc": "JpegStreamer class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "JpegStreamer",
                                    "doc": {
                                        "brief": "Construct a new jpeg streamer object",
                                        "note": "You can get the picture stream through http://host:port/stream, you can also get it through http://ip:port, and you can add personal style through set_html() at this time",
                                        "param": {
                                            "host": "http host",
                                            "port": "http port, default is 8000",
                                            "client_number": "the max number of client"
                                        },
                                        "maixpy": "maix.http.JpegStreamer.__init__",
                                        "maixcdk": "maix.http.JpegStreamer.JpegStreamer",
                                        "py_doc": "Construct a new jpeg streamer object\n\nArgs:\n  - host: http host\n  - port: http port, default is 8000\n  - client_number: the max number of client\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "host",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "port",
                                            "8000"
                                        ],
                                        [
                                            "int",
                                            "client_number",
                                            "16"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "JpegStreamer(std::string host = std::string(), int port = 8000, int client_number = 16)",
                                    "py_def": "def __init__(self, host: str = '', port: int = 8000, client_number: int = 16) -> None"
                                },
                                "start": {
                                    "type": "func",
                                    "name": "start",
                                    "doc": {
                                        "brief": "start jpeg streame",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.http.JpegStreamer.start",
                                        "py_doc": "start jpeg streame\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err start()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "stop",
                                            "doc": {
                                                "brief": "stop http",
                                                "return": "error code, err::ERR_NONE means success, others means failed",
                                                "maixpy": "maix.http.JpegStreamer.start",
                                                "py_doc": "stop http\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err stop()"
                                        }
                                    ],
                                    "py_def": "def start(self) -> maix.err.Err"
                                },
                                "write": {
                                    "type": "func",
                                    "name": "write",
                                    "doc": {
                                        "brief": "Write data to http",
                                        "param": {
                                            "img": "image object"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.http.JpegStreamer.write",
                                        "py_doc": "Write data to http\n\nArgs:\n  - img: image object\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "img",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err write(image::Image *img)",
                                    "py_def": "def write(self, img: maix.image.Image) -> maix.err.Err"
                                },
                                "set_html": {
                                    "type": "func",
                                    "name": "set_html",
                                    "doc": {
                                        "brief": "add your style in this api\\ndefault is:\\n<html>\\n<body>\\n<h1>JPG Stream</h1>\\n<img src='/stream'>\\n</body>\\n</html>",
                                        "param": {
                                            "data": "html code"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.http.JpegStreamer.set_html",
                                        "py_doc": "add your style in this api\ndefault is:\n<html>\n<body>\n<h1>JPG Stream</h1>\n<img src='/stream'>\n</body>\n</html>\n\nArgs:\n  - data: html code\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "data",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_html(std::string data)",
                                    "py_def": "def set_html(self, data: str) -> maix.err.Err"
                                },
                                "host": {
                                    "type": "func",
                                    "name": "host",
                                    "doc": {
                                        "brief": "Get host",
                                        "return": "host name",
                                        "maixpy": "maix.http.JpegStreamer.host",
                                        "py_doc": "Get host\n\nReturns: host name\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string host()",
                                    "py_def": "def host(self) -> str"
                                },
                                "port": {
                                    "type": "func",
                                    "name": "port",
                                    "doc": {
                                        "brief": "Get port",
                                        "return": "port",
                                        "maixpy": "maix.http.JpegStreamer.port",
                                        "py_doc": "Get port\n\nReturns: port\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int port()",
                                    "py_def": "def port(self) -> int"
                                }
                            },
                            "def": "class JpegStreamer"
                        }
                    },
                    "auto_add": true
                },
                "rtsp": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.rtsp module"
                    },
                    "members": {
                        "RtspStreamType": {
                            "type": "enum",
                            "name": "RtspStreamType",
                            "doc": {
                                "brief": "The stream type of rtsp",
                                "maixpy": "maix.rtsp.RtspStreamType",
                                "py_doc": "The stream type of rtsp"
                            },
                            "values": [
                                [
                                    "RTSP_STREAM_NONE",
                                    "0",
                                    "format invalid"
                                ],
                                [
                                    "RTSP_STREAM_H265",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum RtspStreamType\n    {\n        RTSP_STREAM_NONE = 0,  // format invalid\n        RTSP_STREAM_H265,\n    }"
                        },
                        "Region": {
                            "type": "class",
                            "name": "Region",
                            "doc": {
                                "brief": "Region class",
                                "maixpy": "maix.rtsp.Region",
                                "py_doc": "Region class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Region",
                                    "doc": {
                                        "brief": "Construct a new Region object",
                                        "param": {
                                            "x": "region coordinate x",
                                            "y": "region coordinate y",
                                            "width": "region width",
                                            "height": "region height",
                                            "format": "region format",
                                            "camera": "bind region to camera"
                                        },
                                        "maixpy": "maix.rtsp.Region.__init__",
                                        "maixcdk": "maix.rtsp.Region.Region",
                                        "py_doc": "Construct a new Region object\n\nArgs:\n  - x: region coordinate x\n  - y: region coordinate y\n  - width: region width\n  - height: region height\n  - format: region format\n  - camera: bind region to camera\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            null
                                        ],
                                        [
                                            "camera::Camera *",
                                            "camera",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Region(int x, int y, int width, int height, image::Format format, camera::Camera *camera)",
                                    "py_def": "def __init__(self, x: int, y: int, width: int, height: int, format: maix.image.Format, camera: maix.camera.Camera) -> None"
                                },
                                "get_canvas": {
                                    "type": "func",
                                    "name": "get_canvas",
                                    "doc": {
                                        "brief": "Return an image object from region",
                                        "return": "image object",
                                        "maixpy": "maix.rtsp.Region.get_canvas",
                                        "py_doc": "Return an image object from region\n\nReturns: image object\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *get_canvas()",
                                    "py_def": "def get_canvas(self) -> maix.image.Image"
                                },
                                "update_canvas": {
                                    "type": "func",
                                    "name": "update_canvas",
                                    "doc": {
                                        "brief": "Update canvas",
                                        "return": "error code",
                                        "maixpy": "maix.rtsp.Region.update_canvas",
                                        "py_doc": "Update canvas\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err update_canvas()",
                                    "py_def": "def update_canvas(self) -> maix.err.Err"
                                }
                            },
                            "def": "class Region"
                        },
                        "Rtsp": {
                            "type": "class",
                            "name": "Rtsp",
                            "doc": {
                                "brief": "Rtsp class",
                                "maixpy": "maix.rtsp.Rtsp",
                                "py_doc": "Rtsp class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Rtsp",
                                    "doc": {
                                        "brief": "Construct a new Video object",
                                        "param": {
                                            "ip": "rtsp ip",
                                            "port": "rtsp port",
                                            "fps": "rtsp fps",
                                            "stream_type": "rtsp stream type"
                                        },
                                        "maixpy": "maix.rtsp.Rtsp.__init__",
                                        "maixcdk": "maix.rtsp.Rtsp.Rtsp",
                                        "py_doc": "Construct a new Video object\n\nArgs:\n  - ip: rtsp ip\n  - port: rtsp port\n  - fps: rtsp fps\n  - stream_type: rtsp stream type\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "ip",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "port",
                                            "8554"
                                        ],
                                        [
                                            "int",
                                            "fps",
                                            "30"
                                        ],
                                        [
                                            "rtsp::RtspStreamType",
                                            "stream_type",
                                            "rtsp::RtspStreamType::RTSP_STREAM_H265"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Rtsp(std::string ip = std::string(), int port = 8554, int fps = 30, rtsp::RtspStreamType stream_type = rtsp::RtspStreamType::RTSP_STREAM_H265)",
                                    "py_def": "def __init__(self, ip: str = '', port: int = 8554, fps: int = 30, stream_type: RtspStreamType = ...) -> None"
                                },
                                "start": {
                                    "type": "func",
                                    "name": "start",
                                    "doc": {
                                        "brief": "start rtsp",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtsp.Rtsp.start",
                                        "py_doc": "start rtsp\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err start()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "stop",
                                            "doc": {
                                                "brief": "stop rtsp",
                                                "return": "error code, err::ERR_NONE means success, others means failed",
                                                "maixpy": "maix.rtsp.Rtsp.start",
                                                "py_doc": "stop rtsp\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err stop()"
                                        }
                                    ],
                                    "py_def": "def start(self) -> maix.err.Err"
                                },
                                "bind_camera": {
                                    "type": "func",
                                    "name": "bind_camera",
                                    "doc": {
                                        "brief": "Bind camera",
                                        "param": {
                                            "camera": "camera object"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtsp.Rtsp.bind_camera",
                                        "py_doc": "Bind camera\n\nArgs:\n  - camera: camera object\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "camera::Camera *",
                                            "camera",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_camera(camera::Camera *camera)",
                                    "py_def": "def bind_camera(self, camera: maix.camera.Camera) -> maix.err.Err"
                                },
                                "write": {
                                    "type": "func",
                                    "name": "write",
                                    "doc": {
                                        "brief": "Write data to rtsp",
                                        "param": {
                                            "frame": "video frame data"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtsp.Rtsp.write",
                                        "py_doc": "Write data to rtsp\n\nArgs:\n  - frame: video frame data\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "video::Frame &",
                                            "frame",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err write(video::Frame &frame)",
                                    "py_def": "def write(self, frame: ...) -> maix.err.Err"
                                },
                                "get_url": {
                                    "type": "func",
                                    "name": "get_url",
                                    "doc": {
                                        "brief": "Get url of rtsp",
                                        "return": "url of rtsp",
                                        "maixpy": "maix.rtsp.Rtsp.get_url",
                                        "py_doc": "Get url of rtsp\n\nReturns: url of rtsp\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string get_url()",
                                    "py_def": "def get_url(self) -> str"
                                },
                                "get_urls": {
                                    "type": "func",
                                    "name": "get_urls",
                                    "doc": {
                                        "brief": "Get url list of rtsp",
                                        "return": "url list of rtsp",
                                        "maixpy": "maix.rtsp.Rtsp.get_urls",
                                        "py_doc": "Get url list of rtsp\n\nReturns: url list of rtsp\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> get_urls()",
                                    "py_def": "def get_urls(self) -> list[str]"
                                },
                                "to_camera": {
                                    "type": "func",
                                    "name": "to_camera",
                                    "doc": {
                                        "brief": "Get camera object from rtsp",
                                        "return": "camera object",
                                        "maixpy": "maix.rtsp.Rtsp.to_camera",
                                        "py_doc": "Get camera object from rtsp\n\nReturns: camera object\n"
                                    },
                                    "args": [],
                                    "ret_type": "camera::Camera*",
                                    "static": false,
                                    "def": "camera::Camera *to_camera()",
                                    "py_def": "def to_camera(self) -> maix.camera.Camera"
                                },
                                "rtsp_is_start": {
                                    "type": "func",
                                    "name": "rtsp_is_start",
                                    "doc": {
                                        "brief": "return rtsp start status",
                                        "return": "true means rtsp is start, false means rtsp is stop.",
                                        "maixpy": "maix.rtsp.Rtsp.rtsp_is_start",
                                        "py_doc": "return rtsp start status\n\nReturns: true means rtsp is start, false means rtsp is stop.\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool rtsp_is_start()",
                                    "py_def": "def rtsp_is_start(self) -> bool"
                                },
                                "add_region": {
                                    "type": "func",
                                    "name": "add_region",
                                    "doc": {
                                        "brief": "return a region object, you can draw image on the region.",
                                        "param": {
                                            "x": "region coordinate x",
                                            "y": "region coordinate y",
                                            "width": "region width",
                                            "height": "region height",
                                            "format": "region format, support Format::FMT_BGRA8888 only"
                                        },
                                        "return": "the reigon object",
                                        "maixpy": "maix.rtsp.Rtsp.add_region",
                                        "py_doc": "return a region object, you can draw image on the region.\n\nArgs:\n  - x: region coordinate x\n  - y: region coordinate y\n  - width: region width\n  - height: region height\n  - format: region format, support Format::FMT_BGRA8888 only\n\n\nReturns: the reigon object\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_BGRA8888"
                                        ]
                                    ],
                                    "ret_type": "rtsp::Region*",
                                    "static": false,
                                    "def": "rtsp::Region *add_region(int x, int y, int width, int height, image::Format format = image::Format::FMT_BGRA8888)",
                                    "py_def": "def add_region(self, x: int, y: int, width: int, height: int, format: maix.image.Format = ...) -> Region"
                                },
                                "update_region": {
                                    "type": "func",
                                    "name": "update_region",
                                    "doc": {
                                        "brief": "update and show region",
                                        "return": "error code",
                                        "maixpy": "maix.rtsp.Rtsp.update_region",
                                        "py_doc": "update and show region\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "rtsp::Region &",
                                            "region",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err update_region(rtsp::Region &region)",
                                    "py_def": "def update_region(self, region: Region) -> maix.err.Err"
                                },
                                "del_region": {
                                    "type": "func",
                                    "name": "del_region",
                                    "doc": {
                                        "brief": "del region",
                                        "return": "error code",
                                        "maixpy": "maix.rtsp.Rtsp.del_region",
                                        "py_doc": "del region\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "rtsp::Region *",
                                            "region",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err del_region(rtsp::Region *region)",
                                    "py_def": "def del_region(self, region: Region) -> maix.err.Err"
                                },
                                "draw_rect": {
                                    "type": "func",
                                    "name": "draw_rect",
                                    "doc": {
                                        "brief": "Draw a rectangle on the canvas",
                                        "param": {
                                            "id": "region id",
                                            "x": "rectangle coordinate x",
                                            "y": "rectangle coordinate y",
                                            "width": "rectangle width",
                                            "height": "rectangle height",
                                            "color": "rectangle color",
                                            "thickness": "rectangle thickness. If you set it to -1, the rectangle will be filled."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.rtsp.Rtsp.draw_rect",
                                        "py_doc": "Draw a rectangle on the canvas\n\nArgs:\n  - id: region id\n  - x: rectangle coordinate x\n  - y: rectangle coordinate y\n  - width: rectangle width\n  - height: rectangle height\n  - color: rectangle color\n  - thickness: rectangle thickness. If you set it to -1, the rectangle will be filled.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "id",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "width",
                                            null
                                        ],
                                        [
                                            "int",
                                            "height",
                                            null
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err draw_rect(int id, int x, int y, int width, int height, image::Color color, int thickness = 1)",
                                    "py_def": "def draw_rect(self, id: int, x: int, y: int, width: int, height: int, color: maix.image.Color, thickness: int = 1) -> maix.err.Err"
                                },
                                "draw_string": {
                                    "type": "func",
                                    "name": "draw_string",
                                    "doc": {
                                        "brief": "Draw a string on the canvas",
                                        "param": {
                                            "id": "region id",
                                            "x": "string coordinate x",
                                            "y": "string coordinate y",
                                            "str": "string",
                                            "color": "string color",
                                            "size": "string size",
                                            "thickness": "string thickness"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.rtsp.Rtsp.draw_string",
                                        "py_doc": "Draw a string on the canvas\n\nArgs:\n  - id: region id\n  - x: string coordinate x\n  - y: string coordinate y\n  - str: string\n  - color: string color\n  - size: string size\n  - thickness: string thickness\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "id",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "const char *",
                                            "str",
                                            null
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            null
                                        ],
                                        [
                                            "int",
                                            "size",
                                            "16"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "1"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err draw_string(int id, int x, int y, const char *str, image::Color color, int size = 16, int thickness = 1)",
                                    "py_def": "def draw_string(self, id: int, x: int, y: int, str: str, color: maix.image.Color, size: int = 16, thickness: int = 1) -> maix.err.Err"
                                }
                            },
                            "def": "class Rtsp"
                        }
                    },
                    "auto_add": true
                },
                "rtmp": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.rtmp module",
                        "maixpy": "maix.rtmp",
                        "py_doc": "maix.rtmp module"
                    },
                    "members": {
                        "TagType": {
                            "type": "enum",
                            "name": "TagType",
                            "doc": {
                                "brief": "Video type",
                                "maixpy": "maix.rtmp.TagType",
                                "py_doc": "Video type"
                            },
                            "values": [
                                [
                                    "TAG_NONE",
                                    "",
                                    ""
                                ],
                                [
                                    "TAG_VIDEO",
                                    "",
                                    ""
                                ],
                                [
                                    "TAG_AUDIO",
                                    "",
                                    ""
                                ],
                                [
                                    "TAG_SCRIPT",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum TagType\n    {\n        TAG_NONE,\n        TAG_VIDEO,\n        TAG_AUDIO,\n        TAG_SCRIPT,\n    }"
                        },
                        "Rtmp": {
                            "type": "class",
                            "name": "Rtmp",
                            "doc": {
                                "brief": "Rtmp class",
                                "maixpy": "maix.rtmp.Rtmp",
                                "py_doc": "Rtmp class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Rtmp",
                                    "doc": {
                                        "brief": "Construct a new Video object",
                                        "note": "Rtmp url : rtmp://host:prot/app/stream\nexample:\nr = Rtmp(\"localhost\", 1935, \"live\", \"stream\")\nmeans rtmp url is rtmp://localhost:1935/live/stream",
                                        "param": {
                                            "host": "rtmp ip",
                                            "port": "rtmp port, default is 1935.",
                                            "app": "rtmp app name",
                                            "stream": "rtmp stream name",
                                            "bitrate": "rtmp bitrate, default is 1000 * 1000"
                                        },
                                        "maixpy": "maix.rtmp.Rtmp.__init__",
                                        "maixcdk": "maix.rtmp.Rtmp.Rtmp",
                                        "py_doc": "Construct a new Video object\n\nArgs:\n  - host: rtmp ip\n  - port: rtmp port, default is 1935.\n  - app: rtmp app name\n  - stream: rtmp stream name\n  - bitrate: rtmp bitrate, default is 1000 * 1000\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "host",
                                            "\"localhost\""
                                        ],
                                        [
                                            "int",
                                            "port",
                                            "1935"
                                        ],
                                        [
                                            "std::string",
                                            "app",
                                            "std::string()"
                                        ],
                                        [
                                            "std::string",
                                            "stream",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "bitrate",
                                            "1000 * 1000"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Rtmp(std::string host = \"localhost\", int port = 1935, std::string app = std::string(), std::string stream = std::string(), int bitrate = 1000 * 1000)",
                                    "py_def": "def __init__(self, host: str = 'localhost', port: int = 1935, app: str = '', stream: str = '', bitrate: int = 1000000) -> None"
                                },
                                "push_video": {
                                    "type": "func",
                                    "name": "bitrate",
                                    "doc": {
                                        "brief": "Get bitrate",
                                        "return": "bitrate",
                                        "maixpy": "maix.rtmp.Rtmp.push_video",
                                        "py_doc": "Get bitrate\n\nReturns: bitrate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int bitrate()",
                                    "py_def": "def push_video(self) -> int"
                                },
                                "bind_camera": {
                                    "type": "func",
                                    "name": "bind_camera",
                                    "doc": {
                                        "brief": "Bind camera",
                                        "note": "If the cam object is bound, the cam object cannot be used elsewhere.",
                                        "param": {
                                            "cam": "camera object"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtmp.Rtmp.bind_camera",
                                        "py_doc": "Bind camera\n\nArgs:\n  - cam: camera object\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "camera::Camera *",
                                            "cam",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_camera(camera::Camera *cam)",
                                    "py_def": "def bind_camera(self, cam: maix.camera.Camera) -> maix.err.Err"
                                },
                                "get_camera": {
                                    "type": "func",
                                    "name": "get_camera",
                                    "doc": {
                                        "brief": "If you bind a camera, return the camera object.",
                                        "return": "Camera object",
                                        "maixpy": "maix.rtmp.Rtmp.get_camera",
                                        "py_doc": "If you bind a camera, return the camera object.\n\nReturns: Camera object\n"
                                    },
                                    "args": [],
                                    "ret_type": "camera::Camera*",
                                    "static": false,
                                    "def": "camera::Camera *get_camera()",
                                    "py_def": "def get_camera(self) -> maix.camera.Camera"
                                },
                                "start": {
                                    "type": "func",
                                    "name": "start",
                                    "doc": {
                                        "brief": "Start push stream",
                                        "note": "only support flv file now",
                                        "param": {
                                            "path": "File path, if you passed file path, cyclic push the file, else if you bound camera, push the camera image."
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtmp.Rtmp.start",
                                        "py_doc": "Start push stream\n\nArgs:\n  - path: File path, if you passed file path, cyclic push the file, else if you bound camera, push the camera image.\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "std::string()"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err start(std::string path = std::string())",
                                    "py_def": "def start(self, path: str = '') -> maix.err.Err"
                                },
                                "stop": {
                                    "type": "func",
                                    "name": "stop",
                                    "doc": {
                                        "brief": "Stop push stream",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.rtmp.Rtmp.stop",
                                        "py_doc": "Stop push stream\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err stop()",
                                    "py_def": "def stop(self) -> maix.err.Err"
                                },
                                "get_path": {
                                    "type": "func",
                                    "name": "get_path",
                                    "doc": {
                                        "brief": "Get the file path of the push stream",
                                        "return": "file path",
                                        "maixpy": "maix.rtmp.Rtmp.get_path",
                                        "py_doc": "Get the file path of the push stream\n\nReturns: file path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string get_path()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "is_started",
                                            "doc": {
                                                "brief": "Check whether push streaming has started",
                                                "return": "If rtmp thread is running, returns true",
                                                "maixpy": "maix.rtmp.Rtmp.get_path",
                                                "py_doc": "Check whether push streaming has started\n\nReturns: If rtmp thread is running, returns true\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_started()"
                                        }
                                    ],
                                    "py_def": "def get_path(self) -> str"
                                }
                            },
                            "def": "class Rtmp"
                        }
                    },
                    "auto_add": false
                },
                "touchscreen": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.touchscreen module"
                    },
                    "members": {
                        "TouchScreen": {
                            "type": "class",
                            "name": "TouchScreen",
                            "doc": {
                                "brief": "TouchScreen class",
                                "maixpy": "maix.touchscreen.TouchScreen",
                                "py_doc": "TouchScreen class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "TouchScreen",
                                    "doc": {
                                        "brief": "Construct a new TouchScreen object",
                                        "param": {
                                            "device": "touchscreen device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device",
                                            "open": "If true, touchscreen will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.touchscreen.TouchScreen.__init__",
                                        "maixcdk": "maix.touchscreen.TouchScreen.TouchScreen",
                                        "py_doc": "Construct a new TouchScreen object\n\nArgs:\n  - device: touchscreen device path, you can get devices by list_devices method, by default(value is NULL(None in MaixPy)) means the first device\n  - open: If true, touchscreen will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "device",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "TouchScreen(const std::string &device = \"\", bool open = true)",
                                    "py_def": "def __init__(self, device: str = '', open: bool = True) -> None"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "open touchscreen device",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.touchscreen.TouchScreen.open",
                                        "py_doc": "open touchscreen device\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open()",
                                    "py_def": "def open(self) -> maix.err.Err"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "close touchscreen device",
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.touchscreen.TouchScreen.close",
                                        "py_doc": "close touchscreen device\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err close()",
                                    "py_def": "def close(self) -> maix.err.Err"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "read touchscreen device",
                                        "attention": "This method will discard same event in buffer, that is:\nif too many move event in buffer when call this method, it will only return the last one,\nand if read pressed or released event, it will return immediately.",
                                        "return": "Returns a list include x, y, pressed state",
                                        "maixpy": "maix.touchscreen.TouchScreen.read",
                                        "py_doc": "read touchscreen device\n\nReturns: Returns a list include x, y, pressed state\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> read()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "read0",
                                            "doc": {
                                                "brief": "read touchscreen device",
                                                "attention": "This method will return immediately if have event, so it's better to use available() to check if have more event in buffer,\nor too much event in buffer when your program call this read() interval is too long will make your program slow.",
                                                "return": "Returns a list include x, y, pressed state",
                                                "maixpy": "maix.touchscreen.TouchScreen.read",
                                                "py_doc": "read touchscreen device\n\nReturns: Returns a list include x, y, pressed state\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> read0()"
                                        }
                                    ],
                                    "py_def": "def read(self) -> list[int]"
                                },
                                "available": {
                                    "type": "func",
                                    "name": "available",
                                    "doc": {
                                        "brief": "If we need to read from touchscreen, for event driven touchscreen means have event or not",
                                        "param": {
                                            "timeout": "-1 means block, 0 means no block, >0 means timeout, default is 0, unit is ms."
                                        },
                                        "return": "true if need to read(have event), false if not",
                                        "maixpy": "maix.touchscreen.TouchScreen.available",
                                        "py_doc": "If we need to read from touchscreen, for event driven touchscreen means have event or not\n\nArgs:\n  - timeout: -1 means block, 0 means no block, >0 means timeout, default is 0, unit is ms.\n\n\nReturns: true if need to read(have event), false if not\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "timeout",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool available(int timeout = 0)",
                                    "py_def": "def available(self, timeout: int = 0) -> bool"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check if touchscreen is opened",
                                        "return": "true if touchscreen is opened, false if not",
                                        "maixpy": "maix.touchscreen.TouchScreen.is_opened",
                                        "py_doc": "Check if touchscreen is opened\n\nReturns: true if touchscreen is opened, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()",
                                    "py_def": "def is_opened(self) -> bool"
                                }
                            },
                            "def": "class TouchScreen"
                        }
                    },
                    "auto_add": true
                },
                "video": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.video module",
                        "maixpy": "maix.video",
                        "py_doc": "maix.video module"
                    },
                    "members": {
                        "VideoType": {
                            "type": "enum",
                            "name": "VideoType",
                            "doc": {
                                "brief": "Video type",
                                "maixpy": "maix.video.VideoType",
                                "py_doc": "Video type"
                            },
                            "values": [
                                [
                                    "VIDEO_NONE",
                                    "0",
                                    "format invalid"
                                ],
                                [
                                    "VIDEO_ENC_H265_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_ENC_MP4_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_DEC_H265_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_DEC_MP4_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_H264_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_H265_CBR",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_H264_CBR_MP4",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_H265_CBR_MP4",
                                    "",
                                    "Deprecated"
                                ],
                                [
                                    "VIDEO_H264",
                                    "",
                                    ""
                                ],
                                [
                                    "VIDEO_H264_MP4",
                                    "",
                                    ""
                                ],
                                [
                                    "VIDEO_H264_FLV",
                                    "",
                                    ""
                                ],
                                [
                                    "VIDEO_H265",
                                    "",
                                    ""
                                ],
                                [
                                    "VIDEO_H265_MP4",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum VideoType\n    {\n        VIDEO_NONE = 0,  // format invalid\n        VIDEO_ENC_H265_CBR,     // Deprecated\n        VIDEO_ENC_MP4_CBR,      // Deprecated\n        VIDEO_DEC_H265_CBR,     // Deprecated\n        VIDEO_DEC_MP4_CBR,      // Deprecated\n        VIDEO_H264_CBR,         // Deprecated\n        VIDEO_H265_CBR,         // Deprecated\n        VIDEO_H264_CBR_MP4,     // Deprecated\n        VIDEO_H265_CBR_MP4,     // Deprecated\n\n        VIDEO_H264,\n        VIDEO_H264_MP4,\n        VIDEO_H264_FLV,\n        VIDEO_H265,\n        VIDEO_H265_MP4,\n    }"
                        },
                        "MediaType": {
                            "type": "enum",
                            "name": "MediaType",
                            "doc": {
                                "brief": "Video type",
                                "maixpy": "maix.video.MediaType",
                                "py_doc": "Video type"
                            },
                            "values": [
                                [
                                    "MEDIA_TYPE_UNKNOWN",
                                    "-1",
                                    "Represents an unknown media type, which is usually treated as AVMEDIA_TYPE_DATA."
                                ],
                                [
                                    "MEDIA_TYPE_VIDEO",
                                    "",
                                    "Represents a video stream, such as video content encoded in H.264, MPEG-4, etc."
                                ],
                                [
                                    "MEDIA_TYPE_AUDIO",
                                    "",
                                    "Represents an audio stream, such as audio content encoded in AAC, MP3, etc."
                                ],
                                [
                                    "MEDIA_TYPE_DATA",
                                    "",
                                    "Represents opaque data streams that are usually continuous. This type of stream is not necessarily audio or video and may be used for other data purposes."
                                ],
                                [
                                    "MEDIA_TYPE_SUBTITLE",
                                    "",
                                    "Represents a subtitle stream used for displaying text or subtitle information, such as SRT, ASS, etc."
                                ],
                                [
                                    "MEDIA_TYPE_ATTACHMENT",
                                    "",
                                    "Represents attachment streams that are usually sparse. Attachment streams can include images, fonts, or other files that need to be bundled with the media."
                                ],
                                [
                                    "MEDIA_TYPE_NB",
                                    "",
                                    "Represents the number of media types (count) and indicates the total number of media types defined in this enumeration. It is not a media type itself but is used for counting enumeration items."
                                ]
                            ],
                            "def": "enum MediaType\n    {\n        MEDIA_TYPE_UNKNOWN = -1,    // Represents an unknown media type, which is usually treated as AVMEDIA_TYPE_DATA.\n        MEDIA_TYPE_VIDEO,           // Represents a video stream, such as video content encoded in H.264, MPEG-4, etc.\n        MEDIA_TYPE_AUDIO,           // Represents an audio stream, such as audio content encoded in AAC, MP3, etc.\n        MEDIA_TYPE_DATA,            // Represents opaque data streams that are usually continuous. This type of stream is not necessarily audio or video and may be used for other data purposes.\n        MEDIA_TYPE_SUBTITLE,        // Represents a subtitle stream used for displaying text or subtitle information, such as SRT, ASS, etc.\n        MEDIA_TYPE_ATTACHMENT,      // Represents attachment streams that are usually sparse. Attachment streams can include images, fonts, or other files that need to be bundled with the media.\n        MEDIA_TYPE_NB               // Represents the number of media types (count) and indicates the total number of media types defined in this enumeration. It is not a media type itself but is used for counting enumeration items.\n    }"
                        },
                        "timebase_to_us": {
                            "type": "func",
                            "name": "timebase_to_us",
                            "doc": {
                                "brief": "Convert a value in timebase units to microseconds. value * 1000000 / (timebase[1] / timebase[0])",
                                "param": {
                                    "timebse": "Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base.",
                                    "value": "Input value"
                                },
                                "return": "Return the result in microseconds.",
                                "maixpy": "maix.video.timebase_to_us",
                                "py_doc": "Convert a value in timebase units to microseconds. value * 1000000 / (timebase[1] / timebase[0])\n\nArgs:\n  - timebse: Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base.\n  - value: Input value\n\n\nReturns: Return the result in microseconds.\n"
                            },
                            "args": [
                                [
                                    "std::vector<int>",
                                    "timebase",
                                    null
                                ],
                                [
                                    "uint64_t",
                                    "value",
                                    null
                                ]
                            ],
                            "ret_type": "double",
                            "static": false,
                            "def": "double timebase_to_us(std::vector<int> timebase, uint64_t value)",
                            "py_def": "def timebase_to_us(timebase: list[int], value: int) -> float"
                        },
                        "timebase_to_ms": {
                            "type": "func",
                            "name": "timebase_to_ms",
                            "doc": {
                                "brief": "Convert a value in timebase units to milliseconds.",
                                "param": {
                                    "timebse": "Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base.",
                                    "value": "Input value"
                                },
                                "return": "Return the result in milliseconds.",
                                "maixpy": "maix.video.timebase_to_ms",
                                "py_doc": "Convert a value in timebase units to milliseconds.\n\nArgs:\n  - timebse: Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base.\n  - value: Input value\n\n\nReturns: Return the result in milliseconds.\n"
                            },
                            "args": [
                                [
                                    "std::vector<int>",
                                    "timebase",
                                    null
                                ],
                                [
                                    "uint64_t",
                                    "value",
                                    null
                                ]
                            ],
                            "ret_type": "double",
                            "static": false,
                            "def": "double timebase_to_ms(std::vector<int> timebase, uint64_t value)",
                            "py_def": "def timebase_to_ms(timebase: list[int], value: int) -> float"
                        },
                        "Context": {
                            "type": "class",
                            "name": "Context",
                            "doc": {
                                "brief": "Context class",
                                "maixpy": "maix.video.Context",
                                "py_doc": "Context class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Context",
                                    "doc": {
                                        "brief": "Construct a new Context object",
                                        "param": {
                                            "media_type": "enable capture, if true, you can use capture() function to get an image object",
                                            "timebase": "Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base."
                                        },
                                        "maixpy": "maix.video.Context.__init__",
                                        "maixcdk": "maix.video.Context.Context",
                                        "py_doc": "Construct a new Context object\n\nArgs:\n  - media_type: enable capture, if true, you can use capture() function to get an image object\n  - timebase: Time base, used as the unit for calculating playback time. It must be an array containing two parameters,\nin the format [num, den], where the first parameter is the numerator of the time base, and the second parameter is the denominator of the time base.\n"
                                    },
                                    "args": [
                                        [
                                            "video::MediaType",
                                            "media_type",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "timebase",
                                            null
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Context(video::MediaType media_type, std::vector<int> timebase)",
                                    "py_def": "def __init__(self, media_type: MediaType, timebase: list[int]) -> None"
                                },
                                "audio_sample_rate": {
                                    "type": "func",
                                    "name": "audio_sample_rate",
                                    "doc": {
                                        "brief": "Get sample rate of audio (only valid in the context of audio)",
                                        "return": "sample rate",
                                        "maixpy": "maix.video.Context.audio_sample_rate",
                                        "py_doc": "Get sample rate of audio (only valid in the context of audio)\n\nReturns: sample rate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int audio_sample_rate()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "audio_sample_rate",
                                            "doc": {
                                                "brief": "Get sample rate of audio (only valid in the context of audio)",
                                                "return": "sample rate",
                                                "maixpy": "maix.video.Context.audio_sample_rate",
                                                "py_doc": "Get sample rate of audio (only valid in the context of audio)\n\nReturns: sample rate\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int audio_sample_rate()"
                                        }
                                    ],
                                    "py_def": "def audio_sample_rate(self) -> int"
                                },
                                "audio_channels": {
                                    "type": "func",
                                    "name": "audio_channels",
                                    "doc": {
                                        "brief": "Get channels of audio (only valid in the context of audio)",
                                        "return": "channels",
                                        "maixpy": "maix.video.Context.audio_channels",
                                        "py_doc": "Get channels of audio (only valid in the context of audio)\n\nReturns: channels\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int audio_channels()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "audio_channels",
                                            "doc": {
                                                "brief": "Get channels of audio (only valid in the context of audio)",
                                                "return": "channels",
                                                "maixpy": "maix.video.Context.audio_channels",
                                                "py_doc": "Get channels of audio (only valid in the context of audio)\n\nReturns: channels\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int audio_channels()"
                                        }
                                    ],
                                    "py_def": "def audio_channels(self) -> int"
                                },
                                "audio_format": {
                                    "type": "func",
                                    "name": "audio_format",
                                    "doc": {
                                        "brief": "Get format of audio (only valid in the context of audio)",
                                        "return": "audio format. @see audio::Format",
                                        "maixpy": "maix.video.Context.audio_format",
                                        "py_doc": "Get format of audio (only valid in the context of audio)\n\nReturns: audio format. @see audio::Format\n"
                                    },
                                    "args": [],
                                    "ret_type": "audio::Format",
                                    "static": false,
                                    "def": "audio::Format audio_format()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "audio_format",
                                            "doc": {
                                                "brief": "Get format of audio (only valid in the context of audio)",
                                                "return": "audio format. @see audio::Format",
                                                "maixpy": "maix.video.Context.audio_format",
                                                "py_doc": "Get format of audio (only valid in the context of audio)\n\nReturns: audio format. @see audio::Format\n"
                                            },
                                            "args": [],
                                            "ret_type": "audio::Format",
                                            "static": false,
                                            "def": "audio::Format audio_format()"
                                        }
                                    ],
                                    "py_def": "def audio_format(self) -> maix.audio.Format"
                                },
                                "set_pcm": {
                                    "type": "func",
                                    "name": "set_pcm",
                                    "doc": {
                                        "brief": "Set pcm data (only valid in the context of audio)",
                                        "param": {
                                            "duration": "Duration of the current pcm. unit: timebase",
                                            "pts": "The start time of this pcm playback. If it is 0, it means this parameter is not supported. unit: timebase"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.video.Context.set_pcm",
                                        "py_doc": "Set pcm data (only valid in the context of audio)\n\nArgs:\n  - duration: Duration of the current pcm. unit: timebase\n  - pts: The start time of this pcm playback. If it is 0, it means this parameter is not supported. unit: timebase\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "maix::Bytes *",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "duration",
                                            "0"
                                        ],
                                        [
                                            "uint64_t",
                                            "pts",
                                            "0"
                                        ],
                                        [
                                            "bool",
                                            "copy",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_pcm(maix::Bytes *data, int duration = 0, uint64_t pts = 0, bool copy = true)",
                                    "py_def": "def set_pcm(self, data: maix.Bytes(bytes), duration: int = 0, pts: int = 0, copy: bool = True) -> maix.err.Err"
                                },
                                "get_pcm": {
                                    "type": "func",
                                    "name": "get_pcm",
                                    "doc": {
                                        "brief": "Get pcm data (only valid in the context of audio)",
                                        "attention": "Note that if you call this interface, you are responsible for releasing the memory of the data, and this interface cannot be called again.",
                                        "return": "Bytes",
                                        "maixpy": "maix.video.Context.get_pcm",
                                        "py_doc": "Get pcm data (only valid in the context of audio)\n\nReturns: Bytes\n"
                                    },
                                    "args": [],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *get_pcm()",
                                    "py_def": "def get_pcm(*args, **kwargs)"
                                },
                                "image": {
                                    "type": "func",
                                    "name": "image",
                                    "doc": {
                                        "brief": "Retrieve the image data to be played.",
                                        "attention": "Note that if you call this interface, you are responsible for releasing the memory of the image, and this interface cannot be called again.",
                                        "maixpy": "maix.video.Context.image",
                                        "py_doc": "Retrieve the image data to be played."
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *image()",
                                    "py_def": "def image(self) -> maix.image.Image"
                                },
                                "media_type": {
                                    "type": "func",
                                    "name": "media_type",
                                    "doc": {
                                        "brief": "Get the media type to determine whether it is video, audio, or another media type.",
                                        "maixpy": "maix.video.Context.media_type",
                                        "py_doc": "Get the media type to determine whether it is video, audio, or another media type."
                                    },
                                    "args": [],
                                    "ret_type": "video::MediaType",
                                    "static": false,
                                    "def": "video::MediaType media_type()",
                                    "py_def": "def media_type(self) -> MediaType"
                                },
                                "pts": {
                                    "type": "func",
                                    "name": "pts",
                                    "doc": {
                                        "brief": "Get the start time of the current playback., in units of time base.",
                                        "maixpy": "maix.video.Context.pts",
                                        "py_doc": "Get the start time of the current playback., in units of time base."
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t pts()",
                                    "py_def": "def pts(self) -> int"
                                },
                                "last_pts": {
                                    "type": "func",
                                    "name": "last_pts",
                                    "doc": {
                                        "brief": "Get the start time of the previous playback, in units of time base.",
                                        "maixpy": "maix.video.Context.last_pts",
                                        "py_doc": "Get the start time of the previous playback, in units of time base."
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t last_pts()",
                                    "py_def": "def last_pts(self) -> int"
                                },
                                "timebase": {
                                    "type": "func",
                                    "name": "timebase",
                                    "doc": {
                                        "brief": "Get the time base.",
                                        "maixpy": "maix.video.Context.timebase",
                                        "py_doc": "Get the time base."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> timebase()",
                                    "py_def": "def timebase(self) -> list[int]"
                                },
                                "duration": {
                                    "type": "func",
                                    "name": "duration",
                                    "doc": {
                                        "brief": "Duration of the current frame. unit: timebase",
                                        "maixpy": "maix.video.Context.duration",
                                        "py_doc": "Duration of the current frame. unit: timebase"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int duration()",
                                    "py_def": "def duration(self) -> int"
                                },
                                "duration_us": {
                                    "type": "func",
                                    "name": "duration_us",
                                    "doc": {
                                        "brief": "Duration of the current frame. unit: us",
                                        "maixpy": "maix.video.Context.duration_us",
                                        "py_doc": "Duration of the current frame. unit: us"
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t duration_us()",
                                    "py_def": "def duration_us(self) -> int"
                                }
                            },
                            "def": "class Context"
                        },
                        "Frame": {
                            "type": "class",
                            "name": "Frame",
                            "doc": {
                                "brief": "Frame class",
                                "maixpy": "maix.video.Frame",
                                "py_doc": "Frame class"
                            },
                            "members": {
                                "to_bytes": {
                                    "type": "func",
                                    "name": "to_bytes",
                                    "doc": {
                                        "brief": "Get raw data of packet",
                                        "param": {
                                            "copy": "if true, will alloc memory and copy data to new buffer"
                                        },
                                        "return": "raw data",
                                        "maixpy": "maix.video.Frame.to_bytes",
                                        "py_doc": "Get raw data of packet\n\nArgs:\n  - copy: if true, will alloc memory and copy data to new buffer\n\n\nReturns: raw data\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "copy",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *to_bytes(bool copy = false)",
                                    "py_def": "def to_bytes(*args, **kwargs)"
                                },
                                "size": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get raw data size of packet",
                                        "return": "size of raw data",
                                        "maixpy": "maix.video.Frame.size",
                                        "py_doc": "Get raw data size of packet\n\nReturns: size of raw data\n"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t size()",
                                    "py_def": "def size(self) -> int"
                                },
                                "is_valid": {
                                    "type": "func",
                                    "name": "is_valid",
                                    "doc": {
                                        "brief": "Check packet is valid",
                                        "return": "true, packet is valid; false, packet is invalid",
                                        "maixpy": "maix.video.Frame.is_valid",
                                        "py_doc": "Check packet is valid\n\nReturns: true, packet is valid; false, packet is invalid\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_valid()",
                                    "py_def": "def is_valid(self) -> bool"
                                },
                                "set_pts": {
                                    "type": "func",
                                    "name": "set_pts",
                                    "doc": {
                                        "brief": "Set pts",
                                        "param": {
                                            "pts": "presentation time stamp. unit: time_base"
                                        },
                                        "maixpy": "maix.video.Frame.set_pts",
                                        "py_doc": "Set pts\n\nArgs:\n  - pts: presentation time stamp. unit: time_base\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "pts",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_pts(uint64_t pts)",
                                    "py_def": "def set_pts(self, pts: int) -> None"
                                },
                                "set_dts": {
                                    "type": "func",
                                    "name": "set_dts",
                                    "doc": {
                                        "brief": "Set dts",
                                        "param": {
                                            "dts": "decoding time stamp.  unit: time_base"
                                        },
                                        "maixpy": "maix.video.Frame.set_dts",
                                        "py_doc": "Set dts\n\nArgs:\n  - dts: decoding time stamp.  unit: time_base\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "dts",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_dts(uint64_t dts)",
                                    "py_def": "def set_dts(self, dts: int) -> None"
                                },
                                "set_duration": {
                                    "type": "func",
                                    "name": "set_duration",
                                    "doc": {
                                        "brief": "Set duration",
                                        "param": {
                                            "duration": "packet display time. unit: time_base"
                                        },
                                        "maixpy": "maix.video.Frame.set_duration",
                                        "py_doc": "Set duration\n\nArgs:\n  - duration: packet display time. unit: time_base\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "duration",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_duration(uint64_t duration)",
                                    "py_def": "def set_duration(self, duration: int) -> None"
                                },
                                "get_pts": {
                                    "type": "func",
                                    "name": "get_pts",
                                    "doc": {
                                        "brief": "Set pts",
                                        "param": {
                                            "pts": "presentation time stamp. unit: time_base"
                                        },
                                        "return": "pts value",
                                        "maixpy": "maix.video.Frame.get_pts",
                                        "py_doc": "Set pts\n\nArgs:\n  - pts: presentation time stamp. unit: time_base\n\n\nReturns: pts value\n"
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t get_pts()",
                                    "py_def": "def get_pts(self) -> int"
                                },
                                "get_dts": {
                                    "type": "func",
                                    "name": "get_dts",
                                    "doc": {
                                        "brief": "Set dts",
                                        "param": {
                                            "dts": "decoding time stamp.  unit: time_base"
                                        },
                                        "return": "dts value",
                                        "maixpy": "maix.video.Frame.get_dts",
                                        "py_doc": "Set dts\n\nArgs:\n  - dts: decoding time stamp.  unit: time_base\n\n\nReturns: dts value\n"
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t get_dts()",
                                    "py_def": "def get_dts(self) -> int"
                                },
                                "get_duration": {
                                    "type": "func",
                                    "name": "get_duration",
                                    "doc": {
                                        "brief": "Get duration",
                                        "return": "duration value",
                                        "maixpy": "maix.video.Frame.get_duration",
                                        "py_doc": "Get duration\n\nReturns: duration value\n"
                                    },
                                    "args": [],
                                    "ret_type": "uint64_t",
                                    "static": false,
                                    "def": "uint64_t get_duration()",
                                    "py_def": "def get_duration(self) -> int"
                                },
                                "type": {
                                    "type": "func",
                                    "name": "type",
                                    "doc": {
                                        "brief": "Get frame type",
                                        "return": "video type. @see video::VideoType",
                                        "maixpy": "maix.video.Frame.type",
                                        "py_doc": "Get frame type\n\nReturns: video type. @see video::VideoType\n"
                                    },
                                    "args": [],
                                    "ret_type": "video::VideoType",
                                    "static": false,
                                    "def": "video::VideoType type()",
                                    "py_def": "def type(self) -> VideoType"
                                }
                            },
                            "def": "class Frame"
                        },
                        "Packet": {
                            "type": "class",
                            "name": "Packet",
                            "doc": {
                                "brief": "Packet class",
                                "maixpy": "maix.video.Packet",
                                "py_doc": "Packet class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Packet",
                                    "doc": {
                                        "brief": "Packet number (pair of numerator and denominator).",
                                        "param": {
                                            "data": "src data pointer, use pointers directly without copying.\nNote: this object will try to free this memory",
                                            "len": "data len",
                                            "pts": "presentation time stamp. unit: time_base",
                                            "dts": "decoding time stamp. unit: time_base",
                                            "duration": "packet display time. unit: time_base"
                                        },
                                        "maixpy": "maix.video.Packet.__init__",
                                        "maixcdk": "maix.video.Packet.Packet",
                                        "py_doc": "Packet number (pair of numerator and denominator).\n\nArgs:\n  - data: src data pointer, use pointers directly without copying.\nNote: this object will try to free this memory\n  - len: data len\n  - pts: presentation time stamp. unit: time_base\n  - dts: decoding time stamp. unit: time_base\n  - duration: packet display time. unit: time_base\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t *",
                                            "data",
                                            null
                                        ],
                                        [
                                            "int",
                                            "len",
                                            null
                                        ],
                                        [
                                            "uint64_t",
                                            "pts",
                                            "-1"
                                        ],
                                        [
                                            "uint64_t",
                                            "dts",
                                            "-1"
                                        ],
                                        [
                                            "int64_t",
                                            "duration",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Packet(uint8_t *data, int len, uint64_t pts = -1, uint64_t dts = -1, int64_t duration = 0)",
                                    "py_def": "def __init__(self, data: int, len: int, pts: int = -1, dts: int = -1, duration: int = 0) -> None"
                                },
                                "get": {
                                    "type": "func",
                                    "name": "get",
                                    "doc": {
                                        "brief": "Get raw data of packet",
                                        "return": "raw data",
                                        "maixpy": "maix.video.Packet.get",
                                        "py_doc": "Get raw data of packet\n\nReturns: raw data\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<uint8_t>",
                                    "static": false,
                                    "def": "std::vector<uint8_t> get()",
                                    "py_def": "def get(self) -> list[int]"
                                },
                                "data": {
                                    "type": "func",
                                    "name": "data",
                                    "doc": {
                                        "brief": "Get raw data of packet",
                                        "return": "raw data",
                                        "maixpy": "maix.video.Packet.data",
                                        "py_doc": "Get raw data of packet\n\nReturns: raw data\n"
                                    },
                                    "args": [],
                                    "ret_type": "uint8_t*",
                                    "static": false,
                                    "def": "uint8_t *data()",
                                    "py_def": "def data(self) -> int"
                                },
                                "data_size": {
                                    "type": "func",
                                    "name": "data_size",
                                    "doc": {
                                        "brief": "Get raw data size of packet",
                                        "return": "size of raw data",
                                        "maixpy": "maix.video.Packet.data_size",
                                        "py_doc": "Get raw data size of packet\n\nReturns: size of raw data\n"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t data_size()",
                                    "py_def": "def data_size(self) -> int"
                                },
                                "is_valid": {
                                    "type": "func",
                                    "name": "is_valid",
                                    "doc": {
                                        "brief": "Check packet is valid",
                                        "return": "true, packet is valid; false, packet is invalid",
                                        "maixpy": "maix.video.Packet.is_valid",
                                        "py_doc": "Check packet is valid\n\nReturns: true, packet is valid; false, packet is invalid\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_valid()",
                                    "py_def": "def is_valid(self) -> bool"
                                },
                                "set_pts": {
                                    "type": "func",
                                    "name": "set_pts",
                                    "doc": {
                                        "brief": "Set pts",
                                        "param": {
                                            "pts": "presentation time stamp. unit: time_base"
                                        },
                                        "return": "true, packet is valid; false, packet is invalid",
                                        "maixpy": "maix.video.Packet.set_pts",
                                        "py_doc": "Set pts\n\nArgs:\n  - pts: presentation time stamp. unit: time_base\n\n\nReturns: true, packet is valid; false, packet is invalid\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "pts",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_pts(uint64_t pts)",
                                    "py_def": "def set_pts(self, pts: int) -> None"
                                },
                                "set_dts": {
                                    "type": "func",
                                    "name": "set_dts",
                                    "doc": {
                                        "brief": "Set dts",
                                        "param": {
                                            "dts": "decoding time stamp.  unit: time_base"
                                        },
                                        "return": "true, packet is valid; false, packet is invalid",
                                        "maixpy": "maix.video.Packet.set_dts",
                                        "py_doc": "Set dts\n\nArgs:\n  - dts: decoding time stamp.  unit: time_base\n\n\nReturns: true, packet is valid; false, packet is invalid\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "dts",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_dts(uint64_t dts)",
                                    "py_def": "def set_dts(self, dts: int) -> None"
                                },
                                "set_duration": {
                                    "type": "func",
                                    "name": "set_duration",
                                    "doc": {
                                        "brief": "Set duration",
                                        "param": {
                                            "duration": "packet display time. unit: time_base"
                                        },
                                        "return": "true, packet is valid; false, packet is invalid",
                                        "maixpy": "maix.video.Packet.set_duration",
                                        "py_doc": "Set duration\n\nArgs:\n  - duration: packet display time. unit: time_base\n\n\nReturns: true, packet is valid; false, packet is invalid\n"
                                    },
                                    "args": [
                                        [
                                            "uint64_t",
                                            "duration",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_duration(uint64_t duration)",
                                    "py_def": "def set_duration(self, duration: int) -> None"
                                }
                            },
                            "def": "class Packet"
                        },
                        "Encoder": {
                            "type": "class",
                            "name": "Encoder",
                            "doc": {
                                "brief": "Encode class",
                                "maixpy": "maix.video.Encoder",
                                "py_doc": "Encode class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Encoder",
                                    "doc": {
                                        "brief": "Construct a new Video object",
                                        "param": {
                                            "width": "picture width. this value may be set automatically. default is 2560.",
                                            "height": "picture height. this value may be set automatically. default is 1440.",
                                            "format": "picture format. default is image::Format::FMT_YVU420SP. @see image::Format",
                                            "type": "video encode/decode type. default is ENC_H265_CBR. @see EncodeType",
                                            "framerate": "frame rate. framerate default is 30, means 30 frames per second\nfor video. 1/time_base is not the average frame rate if the frame rate is not constant.",
                                            "gop": "for h264/h265 encoding, the interval between two I-frames, default is 50.",
                                            "bitrate": "for h264/h265 encoding, used to limit the bandwidth used by compressed data, default is 3000kbps",
                                            "time_base": "frame time base. time_base default is 1000, means 1/1000 ms (not used)",
                                            "capture": "enable capture, if true, you can use capture() function to get an image object",
                                            "block": "This parameter determines whether encoding should block until it is complete.\nIf set to true, it will wait until encoding is finished before returning.\nIf set to false, it will return the current encoding result on the next call."
                                        },
                                        "maixpy": "maix.video.Encoder.__init__",
                                        "maixcdk": "maix.video.Encoder.Encoder",
                                        "py_doc": "Construct a new Video object\n\nArgs:\n  - width: picture width. this value may be set automatically. default is 2560.\n  - height: picture height. this value may be set automatically. default is 1440.\n  - format: picture format. default is image::Format::FMT_YVU420SP. @see image::Format\n  - type: video encode/decode type. default is ENC_H265_CBR. @see EncodeType\n  - framerate: frame rate. framerate default is 30, means 30 frames per second\nfor video. 1/time_base is not the average frame rate if the frame rate is not constant.\n  - gop: for h264/h265 encoding, the interval between two I-frames, default is 50.\n  - bitrate: for h264/h265 encoding, used to limit the bandwidth used by compressed data, default is 3000kbps\n  - time_base: frame time base. time_base default is 1000, means 1/1000 ms (not used)\n  - capture: enable capture, if true, you can use capture() function to get an image object\n  - block: This parameter determines whether encoding should block until it is complete.\nIf set to true, it will wait until encoding is finished before returning.\nIf set to false, it will return the current encoding result on the next call.\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "\"\""
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "2560"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "1440"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_YVU420SP"
                                        ],
                                        [
                                            "video::VideoType",
                                            "type",
                                            "video::VideoType::VIDEO_H264"
                                        ],
                                        [
                                            "int",
                                            "framerate",
                                            "30"
                                        ],
                                        [
                                            "int",
                                            "gop",
                                            "50"
                                        ],
                                        [
                                            "int",
                                            "bitrate",
                                            "3000 * 1000"
                                        ],
                                        [
                                            "int",
                                            "time_base",
                                            "1000"
                                        ],
                                        [
                                            "bool",
                                            "capture",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "block",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Encoder(std::string path = \"\", int width = 2560, int height = 1440, image::Format format = image::Format::FMT_YVU420SP, video::VideoType type = video::VideoType::VIDEO_H264, int framerate = 30, int gop = 50, int bitrate = 3000 * 1000, int time_base = 1000, bool capture = false, bool block = true)",
                                    "py_def": "def __init__(self, path: str = '', width: int = 2560, height: int = 1440, format: maix.image.Format = ..., type: VideoType = ..., framerate: int = 30, gop: int = 50, bitrate: int = 3000000, time_base: int = 1000, capture: bool = False, block: bool = True) -> None"
                                },
                                "bind_camera": {
                                    "type": "func",
                                    "name": "bind_camera",
                                    "doc": {
                                        "brief": "Bind camera",
                                        "param": {
                                            "camera": "camera object"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.video.Encoder.bind_camera",
                                        "py_doc": "Bind camera\n\nArgs:\n  - camera: camera object\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "camera::Camera *",
                                            "camera",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_camera(camera::Camera *camera)",
                                    "py_def": "def bind_camera(self, camera: maix.camera.Camera) -> maix.err.Err"
                                },
                                "encode": {
                                    "type": "func",
                                    "name": "encode",
                                    "doc": {
                                        "brief": "Encode image.",
                                        "param": {
                                            "img": "the image will be encode.\nif the img is NULL, this function will try to get image from camera, you must use bind_camera() function to bind the camera.",
                                            "pcm": "the pcm data will be encode."
                                        },
                                        "return": "encode result",
                                        "maixpy": "maix.video.Encoder.encode",
                                        "py_doc": "Encode image.\n\nArgs:\n  - img: the image will be encode.\nif the img is NULL, this function will try to get image from camera, you must use bind_camera() function to bind the camera.\n  - pcm: the pcm data will be encode.\n\n\nReturns: encode result\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "img",
                                            "maix::video::Encoder::NoneImage"
                                        ],
                                        [
                                            "Bytes *",
                                            "pcm",
                                            "maix::video::Encoder::NoneBytes"
                                        ]
                                    ],
                                    "ret_type": "video::Frame*",
                                    "static": false,
                                    "def": "video::Frame *encode(image::Image *img = maix::video::Encoder::NoneImage, Bytes *pcm = maix::video::Encoder::NoneBytes)",
                                    "py_def": "def encode(self, img: maix.image.Image = ..., pcm: maix.Bytes(bytes) = b'') -> Frame"
                                },
                                "capture": {
                                    "type": "func",
                                    "name": "capture",
                                    "doc": {
                                        "brief": "Capture image",
                                        "attention": "Each time encode is called, the last captured image will be released.",
                                        "return": "error code",
                                        "maixpy": "maix.video.Encoder.capture",
                                        "py_doc": "Capture image\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *capture()",
                                    "py_def": "def capture(self) -> maix.image.Image"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get video width",
                                        "return": "video width",
                                        "maixpy": "maix.video.Encoder.width",
                                        "py_doc": "Get video width\n\nReturns: video width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get video height",
                                        "return": "video height",
                                        "maixpy": "maix.video.Encoder.height",
                                        "py_doc": "Get video height\n\nReturns: video height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                },
                                "type": {
                                    "type": "func",
                                    "name": "type",
                                    "doc": {
                                        "brief": "Get video encode type",
                                        "return": "VideoType",
                                        "maixpy": "maix.video.Encoder.type",
                                        "py_doc": "Get video encode type\n\nReturns: VideoType\n"
                                    },
                                    "args": [],
                                    "ret_type": "video::VideoType",
                                    "static": false,
                                    "def": "video::VideoType type()",
                                    "py_def": "def type(self) -> VideoType"
                                },
                                "framerate": {
                                    "type": "func",
                                    "name": "framerate",
                                    "doc": {
                                        "brief": "Get video encode framerate",
                                        "return": "frame rate",
                                        "maixpy": "maix.video.Encoder.framerate",
                                        "py_doc": "Get video encode framerate\n\nReturns: frame rate\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int framerate()",
                                    "py_def": "def framerate(self) -> int"
                                },
                                "gop": {
                                    "type": "func",
                                    "name": "gop",
                                    "doc": {
                                        "brief": "Get video encode gop",
                                        "return": "gop value",
                                        "maixpy": "maix.video.Encoder.gop",
                                        "py_doc": "Get video encode gop\n\nReturns: gop value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int gop()",
                                    "py_def": "def gop(self) -> int"
                                },
                                "bitrate": {
                                    "type": "func",
                                    "name": "bitrate",
                                    "doc": {
                                        "brief": "Get video encode bitrate",
                                        "return": "bitrate value",
                                        "maixpy": "maix.video.Encoder.bitrate",
                                        "py_doc": "Get video encode bitrate\n\nReturns: bitrate value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int bitrate()",
                                    "py_def": "def bitrate(self) -> int"
                                },
                                "time_base": {
                                    "type": "func",
                                    "name": "time_base",
                                    "doc": {
                                        "brief": "Get video encode time base",
                                        "return": "time base value",
                                        "maixpy": "maix.video.Encoder.time_base",
                                        "py_doc": "Get video encode time base\n\nReturns: time base value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int time_base()",
                                    "py_def": "def time_base(self) -> int"
                                }
                            },
                            "def": "class Encoder"
                        },
                        "Decoder": {
                            "type": "class",
                            "name": "Decoder",
                            "doc": {
                                "brief": "Decoder class",
                                "maixpy": "maix.video.Decoder",
                                "py_doc": "Decoder class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Decoder",
                                    "doc": {
                                        "brief": "Construct a new decoder object",
                                        "param": {
                                            "path": "Path to the file to be decoded. Supports files with .264 and .mp4 extensions. Note that only mp4 files containing h.264 streams are supported.",
                                            "format": "Decoded output format, currently only support YUV420SP"
                                        },
                                        "maixpy": "maix.video.Decoder.__init__",
                                        "maixcdk": "maix.video.Decoder.Decoder",
                                        "py_doc": "Construct a new decoder object\n\nArgs:\n  - path: Path to the file to be decoded. Supports files with .264 and .mp4 extensions. Note that only mp4 files containing h.264 streams are supported.\n  - format: Decoded output format, currently only support YUV420SP\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            null
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_YVU420SP"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Decoder(std::string path, image::Format format = image::Format::FMT_YVU420SP)",
                                    "py_def": "def __init__(self, path: str, format: maix.image.Format = ...) -> None"
                                },
                                "decode_video": {
                                    "type": "func",
                                    "name": "decode_video",
                                    "doc": {
                                        "brief": "Decode the video stream, returning the image of the next frame each time.",
                                        "param": {
                                            "block": "Whether it blocks or not. If true, it will wait for the decoding to complete and return the current frame.\nIf false, it will return the result of the previous frame's decoding. If the previous frame's decoding result is empty,\nit will return an unknown Context, and you can use the media_type method of the Context to determine if a valid result exists.\ndefault is true."
                                        },
                                        "return": "Decoded context information.",
                                        "maixpy": "maix.video.Decoder.decode_video",
                                        "py_doc": "Decode the video stream, returning the image of the next frame each time.\n\nArgs:\n  - block: Whether it blocks or not. If true, it will wait for the decoding to complete and return the current frame.\nIf false, it will return the result of the previous frame's decoding. If the previous frame's decoding result is empty,\nit will return an unknown Context, and you can use the media_type method of the Context to determine if a valid result exists.\ndefault is true.\n\n\nReturns: Decoded context information.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "block",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "video::Context *",
                                    "static": false,
                                    "def": "video::Context * decode_video(bool block = true)",
                                    "py_def": "def decode_video(self, block: bool = True) -> Context"
                                },
                                "decode_audio": {
                                    "type": "func",
                                    "name": "decode_audio",
                                    "doc": {
                                        "brief": "Decode the video stream, returning the image of the next frame each time.",
                                        "return": "Decoded context information.",
                                        "maixpy": "maix.video.Decoder.decode_audio",
                                        "py_doc": "Decode the video stream, returning the image of the next frame each time.\n\nReturns: Decoded context information.\n"
                                    },
                                    "args": [],
                                    "ret_type": "video::Context *",
                                    "static": false,
                                    "def": "video::Context * decode_audio()",
                                    "py_def": "def decode_audio(self) -> Context"
                                },
                                "decode": {
                                    "type": "func",
                                    "name": "decode",
                                    "doc": {
                                        "brief": "Decode the video and audio stream",
                                        "param": {
                                            "block": "Whether it blocks or not. If true, it will wait for the decoding to complete and return the current frame.\nIf false, it will return the result of the previous frame's decoding. If the previous frame's decoding result is empty,\nit will return an unknown Context, and you can use the media_type method of the Context to determine if a valid result exists.\ndefault is true."
                                        },
                                        "return": "Decoded context information.",
                                        "maixpy": "maix.video.Decoder.decode",
                                        "py_doc": "Decode the video and audio stream\n\nArgs:\n  - block: Whether it blocks or not. If true, it will wait for the decoding to complete and return the current frame.\nIf false, it will return the result of the previous frame's decoding. If the previous frame's decoding result is empty,\nit will return an unknown Context, and you can use the media_type method of the Context to determine if a valid result exists.\ndefault is true.\n\n\nReturns: Decoded context information.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "block",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "video::Context *",
                                    "static": false,
                                    "def": "video::Context * decode(bool block = true)",
                                    "py_def": "def decode(self, block: bool = True) -> Context"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get the video width",
                                        "return": "video width",
                                        "maixpy": "maix.video.Decoder.width",
                                        "py_doc": "Get the video width\n\nReturns: video width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get the video height",
                                        "return": "video height",
                                        "maixpy": "maix.video.Decoder.height",
                                        "py_doc": "Get the video height\n\nReturns: video height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                },
                                "bitrate": {
                                    "type": "func",
                                    "name": "bitrate",
                                    "doc": {
                                        "brief": "Get the video bitrate",
                                        "return": "bitrate value",
                                        "maixpy": "maix.video.Decoder.bitrate",
                                        "py_doc": "Get the video bitrate\n\nReturns: bitrate value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int bitrate()",
                                    "py_def": "def bitrate(self) -> int"
                                },
                                "fps": {
                                    "type": "func",
                                    "name": "fps",
                                    "doc": {
                                        "brief": "Get the video fps",
                                        "return": "fps value",
                                        "maixpy": "maix.video.Decoder.fps",
                                        "py_doc": "Get the video fps\n\nReturns: fps value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int fps()",
                                    "py_def": "def fps(self) -> int"
                                },
                                "seek": {
                                    "type": "func",
                                    "name": "seek",
                                    "doc": {
                                        "brief": "Seek to the required playback position",
                                        "param": {
                                            "time": "timestamp value, unit: s"
                                        },
                                        "return": "return the current position, unit: s",
                                        "maixpy": "maix.video.Decoder.seek",
                                        "py_doc": "Seek to the required playback position\n\nArgs:\n  - time: timestamp value, unit: s\n\n\nReturns: return the current position, unit: s\n"
                                    },
                                    "args": [
                                        [
                                            "double",
                                            "time",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "double",
                                    "static": false,
                                    "def": "double seek(double time = -1)",
                                    "py_def": "def seek(self, time: float = -1) -> float"
                                },
                                "duration": {
                                    "type": "func",
                                    "name": "duration",
                                    "doc": {
                                        "brief": "Get the maximum duration of the video. If it returns 0, it means it cannot be predicted.",
                                        "return": "duration value, unit: s",
                                        "maixpy": "maix.video.Decoder.duration",
                                        "py_doc": "Get the maximum duration of the video. If it returns 0, it means it cannot be predicted.\n\nReturns: duration value, unit: s\n"
                                    },
                                    "args": [],
                                    "ret_type": "double",
                                    "static": false,
                                    "def": "double duration()",
                                    "py_def": "def duration(self) -> float"
                                },
                                "timebase": {
                                    "type": "func",
                                    "name": "timebase",
                                    "doc": {
                                        "brief": "Get the time base.",
                                        "maixpy": "maix.video.Decoder.timebase",
                                        "py_doc": "Get the time base."
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> timebase()",
                                    "py_def": "def timebase(self) -> list[int]"
                                },
                                "has_audio": {
                                    "type": "func",
                                    "name": "has_audio",
                                    "doc": {
                                        "brief": "If find audio data, return true",
                                        "maixpy": "maix.video.Decoder.has_audio",
                                        "py_doc": "If find audio data, return true"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool has_audio()",
                                    "py_def": "def has_audio(self) -> bool"
                                },
                                "has_video": {
                                    "type": "func",
                                    "name": "has_video",
                                    "doc": {
                                        "brief": "If find video data, return true",
                                        "maixpy": "maix.video.Decoder.has_video",
                                        "py_doc": "If find video data, return true"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool has_video()",
                                    "py_def": "def has_video(self) -> bool"
                                }
                            },
                            "def": "class Decoder"
                        },
                        "Video": {
                            "type": "class",
                            "name": "Video",
                            "doc": {
                                "brief": "Video class",
                                "maixpy": "maix.video.Video",
                                "py_doc": "Video class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Video",
                                    "doc": {
                                        "brief": "Construct a new Video object",
                                        "param": {
                                            "path": "video path. the path determines the location where you load or save the file, if path is none, the video module will not save or load file.\nxxx.h265 means video format is H265, xxx.mp4 means video format is MP4",
                                            "width": "picture width. this value may be set automatically. default is 2560.",
                                            "height": "picture height. this value may be set automatically. default is 1440.",
                                            "format": "picture pixel format. this value may be set automatically. default is FMT_YVU420SP.",
                                            "time_base": "frame time base. time_base default is 30, means 1/30 ms",
                                            "framerate": "frame rate. framerate default is 30, means 30 frames per second\nfor video. 1/time_base is not the average frame rate if the frame rate is not constant.",
                                            "capture": "enable capture, if true, you can use capture() function to get an image object",
                                            "open": "If true, video will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.video.Video.__init__",
                                        "maixcdk": "maix.video.Video.Video",
                                        "py_doc": "Construct a new Video object\n\nArgs:\n  - path: video path. the path determines the location where you load or save the file, if path is none, the video module will not save or load file.\nxxx.h265 means video format is H265, xxx.mp4 means video format is MP4\n  - width: picture width. this value may be set automatically. default is 2560.\n  - height: picture height. this value may be set automatically. default is 1440.\n  - format: picture pixel format. this value may be set automatically. default is FMT_YVU420SP.\n  - time_base: frame time base. time_base default is 30, means 1/30 ms\n  - framerate: frame rate. framerate default is 30, means 30 frames per second\nfor video. 1/time_base is not the average frame rate if the frame rate is not constant.\n  - capture: enable capture, if true, you can use capture() function to get an image object\n  - open: If true, video will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "std::string()"
                                        ],
                                        [
                                            "int",
                                            "width",
                                            "2560"
                                        ],
                                        [
                                            "int",
                                            "height",
                                            "1440"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_YVU420SP"
                                        ],
                                        [
                                            "int",
                                            "time_base",
                                            "30"
                                        ],
                                        [
                                            "int",
                                            "framerate",
                                            "30"
                                        ],
                                        [
                                            "bool",
                                            "capture",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Video(std::string path = std::string(), int width = 2560, int height = 1440, image::Format format = image::Format::FMT_YVU420SP, int time_base = 30, int framerate = 30, bool capture = false, bool open = true)",
                                    "py_def": "def __init__(self, path: str = '', width: int = 2560, height: int = 1440, format: maix.image.Format = ..., time_base: int = 30, framerate: int = 30, capture: bool = False, open: bool = True) -> None"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Open video and run",
                                        "param": {
                                            "path": "video path. the path determines the location where you load or save the file, if path is none, the video module will not save or load file.\nxxx.h265 means video format is H265, xxx.mp4 means video format is MP4",
                                            "fps": "video fps"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.video.Video.open",
                                        "py_doc": "Open video and run\n\nArgs:\n  - path: video path. the path determines the location where you load or save the file, if path is none, the video module will not save or load file.\nxxx.h265 means video format is H265, xxx.mp4 means video format is MP4\n  - fps: video fps\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            "std::string()"
                                        ],
                                        [
                                            "double",
                                            "fps",
                                            "30.0"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(std::string path = std::string(), double fps = 30.0)",
                                    "py_def": "def open(self, path: str = '', fps: float = 30.0) -> maix.err.Err"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Close video",
                                        "maixpy": "maix.video.Video.close",
                                        "py_doc": "Close video"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void close()",
                                    "py_def": "def close(self) -> None"
                                },
                                "bind_camera": {
                                    "type": "func",
                                    "name": "bind_camera",
                                    "doc": {
                                        "brief": "Bind camera",
                                        "param": {
                                            "camera": "camera object"
                                        },
                                        "return": "error code, err::ERR_NONE means success, others means failed",
                                        "maixpy": "maix.video.Video.bind_camera",
                                        "py_doc": "Bind camera\n\nArgs:\n  - camera: camera object\n\n\nReturns: error code, err::ERR_NONE means success, others means failed\n"
                                    },
                                    "args": [
                                        [
                                            "camera::Camera *",
                                            "camera",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_camera(camera::Camera *camera)",
                                    "py_def": "def bind_camera(self, camera: maix.camera.Camera) -> maix.err.Err"
                                },
                                "encode": {
                                    "type": "func",
                                    "name": "encode",
                                    "doc": {
                                        "brief": "Encode image.",
                                        "param": {
                                            "img": "the image will be encode.\nif the img is NULL, this function will try to get image from camera, you must use bind_camera() function to bind the camera."
                                        },
                                        "return": "encode result",
                                        "maixpy": "maix.video.Video.encode",
                                        "py_doc": "Encode image.\n\nArgs:\n  - img: the image will be encode.\nif the img is NULL, this function will try to get image from camera, you must use bind_camera() function to bind the camera.\n\n\nReturns: encode result\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image *",
                                            "img",
                                            "maix::video::Video::NoneImage"
                                        ]
                                    ],
                                    "ret_type": "video::Packet*",
                                    "static": false,
                                    "def": "video::Packet *encode(image::Image *img = maix::video::Video::NoneImage)",
                                    "py_def": "def encode(self, img: maix.image.Image = ...) -> Packet"
                                },
                                "decode": {
                                    "type": "func",
                                    "name": "decode",
                                    "doc": {
                                        "brief": "Decode frame",
                                        "param": {
                                            "frame": "the frame will be decode"
                                        },
                                        "return": "decode result",
                                        "maixpy": "maix.video.Video.decode",
                                        "py_doc": "Decode frame\n\nArgs:\n  - frame: the frame will be decode\n\n\nReturns: decode result\n"
                                    },
                                    "args": [
                                        [
                                            "video::Frame *",
                                            "frame",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *decode(video::Frame *frame = nullptr)",
                                    "py_def": "def decode(self, frame: Frame = None) -> maix.image.Image"
                                },
                                "finish": {
                                    "type": "func",
                                    "name": "finish",
                                    "doc": {
                                        "brief": "Encode or decode finish",
                                        "return": "error code",
                                        "maixpy": "maix.video.Video.finish",
                                        "py_doc": "Encode or decode finish\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err finish()",
                                    "py_def": "def finish(self) -> maix.err.Err"
                                },
                                "capture": {
                                    "type": "func",
                                    "name": "capture",
                                    "doc": {
                                        "brief": "Capture image",
                                        "attention": "Each time encode is called, the last captured image will be released.",
                                        "return": "error code",
                                        "maixpy": "maix.video.Video.capture",
                                        "py_doc": "Capture image\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *capture()",
                                    "py_def": "def capture(self) -> maix.image.Image"
                                },
                                "is_recording": {
                                    "type": "func",
                                    "name": "is_recording",
                                    "doc": {
                                        "brief": "Check if video is recording",
                                        "return": "true if video is recording, false if not",
                                        "maixpy": "maix.video.Video.is_recording",
                                        "py_doc": "Check if video is recording\n\nReturns: true if video is recording, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_recording()",
                                    "py_def": "def is_recording(self) -> bool"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check if video is opened",
                                        "return": "true if video is opened, false if not",
                                        "maixpy": "maix.video.Video.is_opened",
                                        "py_doc": "Check if video is opened\n\nReturns: true if video is opened, false if not\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()",
                                    "py_def": "def is_opened(self) -> bool"
                                },
                                "is_closed": {
                                    "type": "func",
                                    "name": "is_closed",
                                    "doc": {
                                        "brief": "check video device is closed or not",
                                        "return": "closed or not, bool type",
                                        "maixpy": "maix.video.Video.is_closed",
                                        "py_doc": "check video device is closed or not\n\nReturns: closed or not, bool type\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_closed()",
                                    "py_def": "def is_closed(self) -> bool"
                                },
                                "width": {
                                    "type": "func",
                                    "name": "width",
                                    "doc": {
                                        "brief": "Get video width",
                                        "return": "video width",
                                        "maixpy": "maix.video.Video.width",
                                        "py_doc": "Get video width\n\nReturns: video width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int width()",
                                    "py_def": "def width(self) -> int"
                                },
                                "height": {
                                    "type": "func",
                                    "name": "height",
                                    "doc": {
                                        "brief": "Get video height",
                                        "return": "video height",
                                        "maixpy": "maix.video.Video.height",
                                        "py_doc": "Get video height\n\nReturns: video height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int height()",
                                    "py_def": "def height(self) -> int"
                                }
                            },
                            "def": "class Video"
                        },
                        "VideoRecorder": {
                            "type": "class",
                            "name": "VideoRecorder",
                            "doc": {
                                "brief": "Video Recorder class. This module is not fully supported and may be deprecated in the future.",
                                "maixpy": "maix.video.VideoRecorder",
                                "py_doc": "Video Recorder class. This module is not fully supported and may be deprecated in the future."
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "VideoRecorder",
                                    "doc": {
                                        "brief": "Construct a new VideoRecorder object. This is an object that integrates recording, video capturing, and display functions, which can be used to achieve high-resolution video input when needed.",
                                        "param": {
                                            "open": "If true, video will automatically call open() after creation. default is true."
                                        },
                                        "maixpy": "maix.video.VideoRecorder.__init__",
                                        "maixcdk": "maix.video.VideoRecorder.VideoRecorder",
                                        "py_doc": "Construct a new VideoRecorder object. This is an object that integrates recording, video capturing, and display functions, which can be used to achieve high-resolution video input when needed.\n\nArgs:\n  - open: If true, video will automatically call open() after creation. default is true.\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "open",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "VideoRecorder(bool open = true)",
                                    "py_def": "def __init__(self, open: bool = True) -> None"
                                },
                                "lock": {
                                    "type": "func",
                                    "name": "lock",
                                    "doc": {
                                        "brief": "lock video",
                                        "param": {
                                            "timeout": "timeout in ms. unit:ms"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.lock",
                                        "py_doc": "lock video\n\nArgs:\n  - timeout: timeout in ms. unit:ms\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int64_t",
                                            "timeout",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err lock(int64_t timeout = -1)",
                                    "py_def": "def lock(self, timeout: int = -1) -> maix.err.Err"
                                },
                                "unlock": {
                                    "type": "func",
                                    "name": "unlock",
                                    "doc": {
                                        "brief": "unlock video",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.unlock",
                                        "py_doc": "unlock video\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err unlock()",
                                    "py_def": "def unlock(self) -> maix.err.Err"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Start a thread to handle the input function.",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.open",
                                        "py_doc": "Start a thread to handle the input function.\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open()",
                                    "py_def": "def open(self) -> maix.err.Err"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Stop the thread, and reset the object.",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.close",
                                        "py_doc": "Stop the thread, and reset the object.\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err close()",
                                    "py_def": "def close(self) -> maix.err.Err"
                                },
                                "is_opened": {
                                    "type": "func",
                                    "name": "is_opened",
                                    "doc": {
                                        "brief": "Check whether the object is opened.",
                                        "maixpy": "maix.video.VideoRecorder.is_opened",
                                        "py_doc": "Check whether the object is opened."
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool is_opened()",
                                    "py_def": "def is_opened(self) -> bool"
                                },
                                "bind_display": {
                                    "type": "func",
                                    "name": "bind_display",
                                    "doc": {
                                        "brief": "Bind a Display object. if this object is not bound, it will not be displayed.",
                                        "param": {
                                            "display": "display object",
                                            "fit": "fit mode. It is recommended to fill in FIT_COVER or FIT_FILL. For maixcam, using FIT_CONTAIN may affect the\nfunctionality of the second layer created by add_channel() in the Display. default is FIT_COVER."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.bind_display",
                                        "py_doc": "Bind a Display object. if this object is not bound, it will not be displayed.\n\nArgs:\n  - display: display object\n  - fit: fit mode. It is recommended to fill in FIT_COVER or FIT_FILL. For maixcam, using FIT_CONTAIN may affect the\nfunctionality of the second layer created by add_channel() in the Display. default is FIT_COVER.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "display::Display *",
                                            "display",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_COVER"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_display(display::Display *display, image::Fit fit = image::FIT_COVER)",
                                    "py_def": "def bind_display(self, display: maix.display.Display, fit: maix.image.Fit = ...) -> maix.err.Err"
                                },
                                "bind_camera": {
                                    "type": "func",
                                    "name": "bind_camera",
                                    "doc": {
                                        "brief": "Bind a Camera object. if this object is not bound, images cannot be captured.",
                                        "param": {
                                            "camera": "camera object"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.bind_camera",
                                        "py_doc": "Bind a Camera object. if this object is not bound, images cannot be captured.\n\nArgs:\n  - camera: camera object\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "camera::Camera *",
                                            "camera",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_camera(camera::Camera *camera)",
                                    "py_def": "def bind_camera(self, camera: maix.camera.Camera) -> maix.err.Err"
                                },
                                "bind_audio": {
                                    "type": "func",
                                    "name": "bind_audio",
                                    "doc": {
                                        "brief": "Bind a AudioRecorder object. if this object is not bound, audio cannot be captured.",
                                        "param": {
                                            "audio": "audio recorder object"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.bind_audio",
                                        "py_doc": "Bind a AudioRecorder object. if this object is not bound, audio cannot be captured.\n\nArgs:\n  - audio: audio recorder object\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "audio::Recorder *",
                                            "audio",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_audio(audio::Recorder *audio)",
                                    "py_def": "def bind_audio(self, audio: maix.audio.Recorder) -> maix.err.Err"
                                },
                                "bind_imu": {
                                    "type": "func",
                                    "name": "bind_imu",
                                    "doc": {
                                        "brief": "Bind a IMU object. if this object is not bound, imu data cannot be captured.",
                                        "param": {
                                            "imu": "imu object"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.bind_imu",
                                        "py_doc": "Bind a IMU object. if this object is not bound, imu data cannot be captured.\n\nArgs:\n  - imu: imu object\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "void *",
                                            "imu",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err bind_imu(void *imu)",
                                    "py_def": "def bind_imu(self, imu: capsule) -> maix.err.Err"
                                },
                                "reset": {
                                    "type": "func",
                                    "name": "reset",
                                    "doc": {
                                        "brief": "Reset the video recorder.",
                                        "note": "It will not reset the bound object; if you have already bound the display using bind_display(), there is no need to rebind the display after calling reset().",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.reset",
                                        "py_doc": "Reset the video recorder.\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err reset()",
                                    "py_def": "def reset(self) -> maix.err.Err"
                                },
                                "config_path": {
                                    "type": "func",
                                    "name": "config_path",
                                    "doc": {
                                        "brief": "The recorded video will be saved to this path, and this API cannot be called during runtime.",
                                        "param": {
                                            "path": "The path of the video file to be saved"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.config_path",
                                        "py_doc": "The recorded video will be saved to this path, and this API cannot be called during runtime.\n\nArgs:\n  - path: The path of the video file to be saved\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err config_path(std::string path)",
                                    "py_def": "def config_path(self, path: str) -> maix.err.Err"
                                },
                                "get_path": {
                                    "type": "func",
                                    "name": "get_path",
                                    "doc": {
                                        "brief": "Get the path of the video file to be saved",
                                        "return": "path",
                                        "maixpy": "maix.video.VideoRecorder.get_path",
                                        "py_doc": "Get the path of the video file to be saved\n\nReturns: path\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string get_path()",
                                    "py_def": "def get_path(self) -> str"
                                },
                                "config_snapshot": {
                                    "type": "func",
                                    "name": "config_snapshot",
                                    "doc": {
                                        "brief": "Set the snapshot parameters",
                                        "note": "Enabling snapshot functionality may result in some performance loss.",
                                        "param": {
                                            "enable": "enable or disable snapshot",
                                            "resolution": "image resolution of snapshot",
                                            "format": "image format of snapshot"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.config_snapshot",
                                        "py_doc": "Set the snapshot parameters\n\nArgs:\n  - enable: enable or disable snapshot\n  - resolution: image resolution of snapshot\n  - format: image format of snapshot\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "enable",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "resolution",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "image::Format",
                                            "format",
                                            "image::Format::FMT_YVU420SP"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err config_snapshot(bool enable, std::vector<int> resolution = std::vector<int>(), image::Format format = image::Format::FMT_YVU420SP)",
                                    "py_def": "def config_snapshot(self, enable: bool, resolution: list[int] = [], format: maix.image.Format = ...) -> maix.err.Err"
                                },
                                "config_resolution": {
                                    "type": "func",
                                    "name": "config_resolution",
                                    "doc": {
                                        "brief": "Set the resolution of the video, and this API cannot be called during runtime.",
                                        "note": "You must bind the camera first, and this interface will modify the camera's resolution. The width must be divisible by 32.",
                                        "param": {
                                            "resolution": "The resolution of the video"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.config_resolution",
                                        "py_doc": "Set the resolution of the video, and this API cannot be called during runtime.\n\nArgs:\n  - resolution: The resolution of the video\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "resolution",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err config_resolution(std::vector<int> resolution)",
                                    "py_def": "def config_resolution(self, resolution: list[int]) -> maix.err.Err"
                                },
                                "get_resolution": {
                                    "type": "func",
                                    "name": "get_resolution",
                                    "doc": {
                                        "brief": "Get the resolution of the video",
                                        "return": "the resolution of the video",
                                        "maixpy": "maix.video.VideoRecorder.get_resolution",
                                        "py_doc": "Get the resolution of the video\n\nReturns: the resolution of the video\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> get_resolution()",
                                    "py_def": "def get_resolution(self) -> list[int]"
                                },
                                "config_fps": {
                                    "type": "func",
                                    "name": "config_fps",
                                    "doc": {
                                        "brief": "Set the fps of the video, and this API cannot be called during runtime.",
                                        "note": "This interface only affect the fps of the encoded file.",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.config_fps",
                                        "py_doc": "Set the fps of the video, and this API cannot be called during runtime.\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "fps",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err config_fps(int fps)",
                                    "py_def": "def config_fps(self, fps: int) -> maix.err.Err"
                                },
                                "get_fps": {
                                    "type": "func",
                                    "name": "get_fps",
                                    "doc": {
                                        "brief": "Get the fps of the video.",
                                        "return": "fps value",
                                        "maixpy": "maix.video.VideoRecorder.get_fps",
                                        "py_doc": "Get the fps of the video.\n\nReturns: fps value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_fps()",
                                    "py_def": "def get_fps(self) -> int"
                                },
                                "config_bitrate": {
                                    "type": "func",
                                    "name": "config_bitrate",
                                    "doc": {
                                        "brief": "Set the bitrate of the video, and this API cannot be called during runtime.",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.config_bitrate",
                                        "py_doc": "Set the bitrate of the video, and this API cannot be called during runtime.\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "bitrate",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err config_bitrate(int bitrate)",
                                    "py_def": "def config_bitrate(self, bitrate: int) -> maix.err.Err"
                                },
                                "get_bitrate": {
                                    "type": "func",
                                    "name": "get_bitrate",
                                    "doc": {
                                        "brief": "Get the bitrate of the video.",
                                        "return": "bitrate value",
                                        "maixpy": "maix.video.VideoRecorder.get_bitrate",
                                        "py_doc": "Get the bitrate of the video.\n\nReturns: bitrate value\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_bitrate()",
                                    "py_def": "def get_bitrate(self) -> int"
                                },
                                "mute": {
                                    "type": "func",
                                    "name": "mute",
                                    "doc": {
                                        "brief": "Set/Get the mute of the video",
                                        "param": {
                                            "data": "If the parameter is true, mute; if false, unmute; if no parameter is provided, return the mute status."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.mute",
                                        "py_doc": "Set/Get the mute of the video\n\nArgs:\n  - data: If the parameter is true, mute; if false, unmute; if no parameter is provided, return the mute status.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "data",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int mute(int data = -1)",
                                    "py_def": "def mute(self, data: int = -1) -> int"
                                },
                                "volume": {
                                    "type": "func",
                                    "name": "volume",
                                    "doc": {
                                        "brief": "Set/Get the volume of the video",
                                        "param": {
                                            "data": "The volume of the video, the range is 0-100. if no parameter is provided, return the volume."
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.volume",
                                        "py_doc": "Set/Get the volume of the video\n\nArgs:\n  - data: The volume of the video, the range is 0-100. if no parameter is provided, return the volume.\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "data",
                                            "-1"
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int volume(int data = -1)",
                                    "py_def": "def volume(self, data: int = -1) -> int"
                                },
                                "seek": {
                                    "type": "func",
                                    "name": "seek",
                                    "doc": {
                                        "brief": "Get the current position of the video",
                                        "return": "current position, unit: ms",
                                        "maixpy": "maix.video.VideoRecorder.seek",
                                        "py_doc": "Get the current position of the video\n\nReturns: current position, unit: ms\n"
                                    },
                                    "args": [],
                                    "ret_type": "int64_t",
                                    "static": false,
                                    "def": "int64_t seek()",
                                    "py_def": "def seek(self) -> int"
                                },
                                "record_start": {
                                    "type": "func",
                                    "name": "record_start",
                                    "doc": {
                                        "brief": "Start recording",
                                        "note": "You must bind the camera at a minimum during input. Additionally,\nif you bind a display, the input image will be shown,\nif you bind a audio, audio will be recorded,\nif you bind a IMU, IMU data will be logged.",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.record_start",
                                        "py_doc": "Start recording\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err record_start()",
                                    "py_def": "def record_start(self) -> maix.err.Err"
                                },
                                "snapshot": {
                                    "type": "func",
                                    "name": "snapshot",
                                    "doc": {
                                        "brief": "Take a snapshot",
                                        "return": "image::Image",
                                        "maixpy": "maix.video.VideoRecorder.snapshot",
                                        "py_doc": "Take a snapshot\n\nReturns: image::Image\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Image*",
                                    "static": false,
                                    "def": "image::Image *snapshot()",
                                    "py_def": "def snapshot(self) -> maix.image.Image"
                                },
                                "record_finish": {
                                    "type": "func",
                                    "name": "record_finish",
                                    "doc": {
                                        "brief": "Stop recording and save the video",
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.record_finish",
                                        "py_doc": "Stop recording and save the video\n\nReturns: error code\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err record_finish()",
                                    "py_def": "def record_finish(self) -> maix.err.Err"
                                },
                                "draw_rect": {
                                    "type": "func",
                                    "name": "draw_rect",
                                    "doc": {
                                        "brief": "Draw a rect on the video",
                                        "param": {
                                            "id": "id of the rect, range is [0, 15]",
                                            "x": "x coordinate",
                                            "y": "y coordinate",
                                            "w": "width",
                                            "h": "height",
                                            "color": "color",
                                            "tickness": "The line width of the rectangular box; if set to -1, it indicates that the rectangular box will be filled.",
                                            "hidden": "Hide or show the rectangular box"
                                        },
                                        "return": "error code",
                                        "maixpy": "maix.video.VideoRecorder.draw_rect",
                                        "py_doc": "Draw a rect on the video\n\nArgs:\n  - id: id of the rect, range is [0, 15]\n  - x: x coordinate\n  - y: y coordinate\n  - w: width\n  - h: height\n  - color: color\n  - tickness: The line width of the rectangular box; if set to -1, it indicates that the rectangular box will be filled.\n  - hidden: Hide or show the rectangular box\n\n\nReturns: error code\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "id",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            "image::COLOR_WHITE"
                                        ],
                                        [
                                            "int",
                                            "thickness",
                                            "-1"
                                        ],
                                        [
                                            "bool",
                                            "hidden",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err draw_rect(int id, int x, int y, int w, int h, image::Color color = image::COLOR_WHITE, int thickness = -1, bool hidden = false)",
                                    "py_def": "def draw_rect(self, id: int, x: int, y: int, w: int, h: int, color: maix.image.Color = ..., thickness: int = -1, hidden: bool = False) -> maix.err.Err"
                                }
                            },
                            "def": "class VideoRecorder"
                        }
                    },
                    "auto_add": false
                },
                "network": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.network module"
                    },
                    "members": {
                        "have_network": {
                            "type": "func",
                            "name": "have_network",
                            "doc": {
                                "brief": "Return if device have network(WiFi/Eth etc.)",
                                "return": "True if have network, else False.",
                                "maixpy": "maix.network.have_network",
                                "py_doc": "Return if device have network(WiFi/Eth etc.)\n\nReturns: True if have network, else False.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool have_network()",
                            "py_def": "def have_network() -> bool"
                        },
                        "wifi": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.network.wifi module"
                            },
                            "members": {
                                "AP_Info": {
                                    "type": "class",
                                    "name": "AP_Info",
                                    "doc": {
                                        "brief": "WiFi AP info",
                                        "maixpy": "maix.network.wifi.AP_Info",
                                        "py_doc": "WiFi AP info"
                                    },
                                    "members": {
                                        "ssid": {
                                            "type": "var",
                                            "name": "ssid",
                                            "doc": {
                                                "brief": "WiFi AP info SSID",
                                                "maixpy": "maix.network.wifi.AP_Info.ssid",
                                                "py_doc": "WiFi AP info SSID"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "std::vector<uint8_t> ssid"
                                        },
                                        "bssid": {
                                            "type": "var",
                                            "name": "bssid",
                                            "doc": {
                                                "brief": "WiFi AP info BSSID",
                                                "maixpy": "maix.network.wifi.AP_Info.bssid",
                                                "py_doc": "WiFi AP info BSSID"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "std::string bssid"
                                        },
                                        "security": {
                                            "type": "var",
                                            "name": "security",
                                            "doc": {
                                                "brief": "WiFi AP info security",
                                                "maixpy": "maix.network.wifi.AP_Info.security",
                                                "py_doc": "WiFi AP info security"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "std::string security"
                                        },
                                        "channel": {
                                            "type": "var",
                                            "name": "channel",
                                            "doc": {
                                                "brief": "WiFi AP info channel",
                                                "maixpy": "maix.network.wifi.AP_Info.channel",
                                                "py_doc": "WiFi AP info channel"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "int channel"
                                        },
                                        "frequency": {
                                            "type": "var",
                                            "name": "frequency",
                                            "doc": {
                                                "brief": "WiFi AP info frequency",
                                                "maixpy": "maix.network.wifi.AP_Info.frequency",
                                                "py_doc": "WiFi AP info frequency"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "int frequency"
                                        },
                                        "rssi": {
                                            "type": "var",
                                            "name": "rssi",
                                            "doc": {
                                                "brief": "WiFi AP info rssi",
                                                "maixpy": "maix.network.wifi.AP_Info.rssi",
                                                "py_doc": "WiFi AP info rssi"
                                            },
                                            "value": null,
                                            "static": false,
                                            "readonly": false,
                                            "def": "int rssi"
                                        },
                                        "ssid_str": {
                                            "type": "func",
                                            "name": "ssid_str",
                                            "doc": {
                                                "brief": "WiFi AP info ssid_str",
                                                "maixpy": "maix.network.wifi.AP_Info.ssid_str",
                                                "py_doc": "WiFi AP info ssid_str"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string ssid_str()",
                                            "py_def": "def ssid_str(self) -> str"
                                        }
                                    },
                                    "def": "class AP_Info"
                                },
                                "list_devices": {
                                    "type": "func",
                                    "name": "list_devices",
                                    "doc": {
                                        "brief": "List WiFi interfaces",
                                        "return": "WiFi interface list, string type",
                                        "maixpy": "maix.network.wifi.list_devices",
                                        "py_doc": "List WiFi interfaces\n\nReturns: WiFi interface list, string type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> list_devices()",
                                    "py_def": "def list_devices() -> list[str]"
                                },
                                "Wifi": {
                                    "type": "class",
                                    "name": "Wifi",
                                    "doc": {
                                        "brief": "Wifi class",
                                        "maixpy": "maix.network.wifi.Wifi",
                                        "py_doc": "Wifi class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Wifi",
                                            "doc": {
                                                "brief": "Wifi class",
                                                "param": {
                                                    "iface": "wifi interface name, default is wlan0"
                                                },
                                                "maixpy": "maix.network.wifi.Wifi.__init__",
                                                "maixcdk": "maix.network.wifi.Wifi.Wifi",
                                                "py_doc": "Wifi class\n\nArgs:\n  - iface: wifi interface name, default is wlan0\n"
                                            },
                                            "args": [
                                                [
                                                    "std::string",
                                                    "iface",
                                                    "\"wlan0\""
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Wifi(std::string iface = \"wlan0\")",
                                            "py_def": "def __init__(self, iface: str = 'wlan0') -> None"
                                        },
                                        "get_ip": {
                                            "type": "func",
                                            "name": "get_ip",
                                            "doc": {
                                                "brief": "Get current WiFi ip",
                                                "return": "ip, string type, if network not connected, will return empty string.",
                                                "maixpy": "maix.network.wifi.Wifi.get_ip",
                                                "py_doc": "Get current WiFi ip\n\nReturns: ip, string type, if network not connected, will return empty string.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_ip()",
                                            "py_def": "def get_ip(self) -> str"
                                        },
                                        "get_mac": {
                                            "type": "func",
                                            "name": "get_mac",
                                            "doc": {
                                                "brief": "Get current WiFi MAC address",
                                                "return": "ip, string type.",
                                                "maixpy": "maix.network.wifi.Wifi.get_mac",
                                                "py_doc": "Get current WiFi MAC address\n\nReturns: ip, string type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_mac()",
                                            "py_def": "def get_mac(self) -> str"
                                        },
                                        "get_ssid": {
                                            "type": "func",
                                            "name": "get_ssid",
                                            "doc": {
                                                "brief": "Get current WiFi SSID",
                                                "param": {
                                                    "from_cache": "if true, will not read config from file, direct use ssid in cache.\nattention, first time call this method will auto matically read config from file, and if call connect method will set cache."
                                                },
                                                "return": "SSID, string type.",
                                                "maixpy": "maix.network.wifi.Wifi.get_ssid",
                                                "py_doc": "Get current WiFi SSID\n\nArgs:\n  - from_cache: if true, will not read config from file, direct use ssid in cache.\nattention, first time call this method will auto matically read config from file, and if call connect method will set cache.\n\n\nReturns: SSID, string type.\n"
                                            },
                                            "args": [
                                                [
                                                    "bool",
                                                    "from_cache",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_ssid(bool from_cache = true)",
                                            "py_def": "def get_ssid(self, from_cache: bool = True) -> str"
                                        },
                                        "get_gateway": {
                                            "type": "func",
                                            "name": "get_gateway",
                                            "doc": {
                                                "brief": "Get current WiFi ip",
                                                "return": "ip, string type, if network not connected, will return empty string.",
                                                "maixpy": "maix.network.wifi.Wifi.get_gateway",
                                                "py_doc": "Get current WiFi ip\n\nReturns: ip, string type, if network not connected, will return empty string.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_gateway()",
                                            "py_def": "def get_gateway(self) -> str"
                                        },
                                        "start_scan": {
                                            "type": "func",
                                            "name": "start_scan",
                                            "doc": {
                                                "brief": "WiFi start scan AP info around in background.",
                                                "return": "If success, return err.Err.ERR_NONE, else means failed.",
                                                "maixpy": "maix.network.wifi.Wifi.start_scan",
                                                "py_doc": "WiFi start scan AP info around in background.\n\nReturns: If success, return err.Err.ERR_NONE, else means failed.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err start_scan()",
                                            "py_def": "def start_scan(self) -> maix.err.Err"
                                        },
                                        "get_scan_result": {
                                            "type": "func",
                                            "name": "get_scan_result",
                                            "doc": {
                                                "brief": "Get WiFi scan AP info.",
                                                "return": "wifi.AP_Info list.",
                                                "maixpy": "maix.network.wifi.Wifi.get_scan_result",
                                                "py_doc": "Get WiFi scan AP info.\n\nReturns: wifi.AP_Info list.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::vector<network::wifi::AP_Info>",
                                            "static": false,
                                            "def": "std::vector<network::wifi::AP_Info> get_scan_result()",
                                            "py_def": "def get_scan_result(self) -> list[AP_Info]"
                                        },
                                        "stop_scan": {
                                            "type": "func",
                                            "name": "stop_scan",
                                            "doc": {
                                                "brief": "Stop WiFi scan AP info.",
                                                "maixpy": "maix.network.wifi.Wifi.stop_scan",
                                                "py_doc": "Stop WiFi scan AP info."
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void stop_scan()",
                                            "py_def": "def stop_scan(self) -> None"
                                        },
                                        "connect": {
                                            "type": "func",
                                            "name": "connect",
                                            "doc": {
                                                "brief": "Connect to WiFi AP.",
                                                "param": {
                                                    "ssid": "SSID of AP",
                                                    "password": "password of AP, if no password, leave it empty.",
                                                    "wait": "wait for got IP or failed or timeout.",
                                                    "timeout": "connect timeout internal, unit second."
                                                },
                                                "return": "If success, return err.Err.ERR_NONE, else means failed.",
                                                "maixpy": "maix.network.wifi.Wifi.connect",
                                                "py_doc": "Connect to WiFi AP.\n\nArgs:\n  - ssid: SSID of AP\n  - password: password of AP, if no password, leave it empty.\n  - wait: wait for got IP or failed or timeout.\n  - timeout: connect timeout internal, unit second.\n\n\nReturns: If success, return err.Err.ERR_NONE, else means failed.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "ssid",
                                                    null
                                                ],
                                                [
                                                    "const std::string &",
                                                    "password",
                                                    null
                                                ],
                                                [
                                                    "bool",
                                                    "wait",
                                                    "true"
                                                ],
                                                [
                                                    "int",
                                                    "timeout",
                                                    "60"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err connect(const std::string &ssid, const std::string &password, bool wait = true, int timeout = 60)",
                                            "py_def": "def connect(self, ssid: str, password: str, wait: bool = True, timeout: int = 60) -> maix.err.Err"
                                        },
                                        "disconnect": {
                                            "type": "func",
                                            "name": "disconnect",
                                            "doc": {
                                                "brief": "Disconnect from WiFi AP.",
                                                "return": "If success, return err.Err.ERR_NONE, else means failed.",
                                                "maixpy": "maix.network.wifi.Wifi.disconnect",
                                                "py_doc": "Disconnect from WiFi AP.\n\nReturns: If success, return err.Err.ERR_NONE, else means failed.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err disconnect()",
                                            "py_def": "def disconnect(self) -> maix.err.Err"
                                        },
                                        "is_connected": {
                                            "type": "func",
                                            "name": "is_connected",
                                            "doc": {
                                                "brief": "See if WiFi is connected to AP.",
                                                "return": "If connected return true, else false.",
                                                "maixpy": "maix.network.wifi.Wifi.is_connected",
                                                "py_doc": "See if WiFi is connected to AP.\n\nReturns: If connected return true, else false.\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_connected()",
                                            "py_def": "def is_connected(self) -> bool"
                                        },
                                        "start_ap": {
                                            "type": "func",
                                            "name": "start_ap",
                                            "doc": {
                                                "brief": "Start WiFi AP.",
                                                "param": {
                                                    "ssid": "SSID of AP.",
                                                    "password": "password of AP, if no password, leave it empty.",
                                                    "ip": "ip address of hostap, default empty string means auto generated one according to hardware.",
                                                    "netmask": "netmask, default 255.255.255.0, now only support 255.255.255.0 .",
                                                    "mode": "WiFi mode, default g(IEEE 802.11g (2.4 GHz)), a = IEEE 802.11a (5 GHz), b = IEEE 802.11b (2.4 GHz).",
                                                    "channel": "WiFi channel number, 0 means auto select. MaixCAM not support auto, will default channel 1.",
                                                    "hidden": "hidden SSID or not."
                                                },
                                                "return": "If success, return err.Err.ERR_NONE, else means failed.",
                                                "maixpy": "maix.network.wifi.Wifi.start_ap",
                                                "py_doc": "Start WiFi AP.\n\nArgs:\n  - ssid: SSID of AP.\n  - password: password of AP, if no password, leave it empty.\n  - ip: ip address of hostap, default empty string means auto generated one according to hardware.\n  - netmask: netmask, default 255.255.255.0, now only support 255.255.255.0 .\n  - mode: WiFi mode, default g(IEEE 802.11g (2.4 GHz)), a = IEEE 802.11a (5 GHz), b = IEEE 802.11b (2.4 GHz).\n  - channel: WiFi channel number, 0 means auto select. MaixCAM not support auto, will default channel 1.\n  - hidden: hidden SSID or not.\n\n\nReturns: If success, return err.Err.ERR_NONE, else means failed.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "ssid",
                                                    null
                                                ],
                                                [
                                                    "const std::string &",
                                                    "password",
                                                    null
                                                ],
                                                [
                                                    "std::string",
                                                    "mode",
                                                    "\"g\""
                                                ],
                                                [
                                                    "int",
                                                    "channel",
                                                    "0"
                                                ],
                                                [
                                                    "const std::string &",
                                                    "ip",
                                                    "\"192.168.66.1\""
                                                ],
                                                [
                                                    "const std::string &",
                                                    "netmask",
                                                    "\"255.255.255.0\""
                                                ],
                                                [
                                                    "bool",
                                                    "hidden",
                                                    "false"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err start_ap(const std::string &ssid, const std::string &password,\n                          std::string mode = \"g\", int channel = 0,\n                          const std::string &ip = \"192.168.66.1\", const std::string &netmask = \"255.255.255.0\",\n                          bool hidden = false)",
                                            "py_def": "def start_ap(self, ssid: str, password: str, mode: str = 'g', channel: int = 0, ip: str = '192.168.66.1', netmask: str = '255.255.255.0', hidden: bool = False) -> maix.err.Err"
                                        },
                                        "stop_ap": {
                                            "type": "func",
                                            "name": "stop_ap",
                                            "doc": {
                                                "brief": "Stop WiFi AP.",
                                                "return": "If success, return err.Err.ERR_NONE, else means failed.",
                                                "maixpy": "maix.network.wifi.Wifi.stop_ap",
                                                "py_doc": "Stop WiFi AP.\n\nReturns: If success, return err.Err.ERR_NONE, else means failed.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err stop_ap()",
                                            "py_def": "def stop_ap(self) -> maix.err.Err"
                                        },
                                        "is_ap_mode": {
                                            "type": "func",
                                            "name": "is_ap_mode",
                                            "doc": {
                                                "brief": "Whether WiFi is AP mode",
                                                "return": "True if AP mode now, or False.",
                                                "maixpy": "maix.network.wifi.Wifi.is_ap_mode",
                                                "py_doc": "Whether WiFi is AP mode\n\nReturns: True if AP mode now, or False.\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_ap_mode()",
                                            "py_def": "def is_ap_mode(self) -> bool"
                                        }
                                    },
                                    "def": "class Wifi"
                                }
                            },
                            "auto_add": true
                        }
                    },
                    "auto_add": true
                },
                "comm": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.comm module"
                    },
                    "members": {
                        "add_default_comm_listener": {
                            "type": "func",
                            "name": "add_default_comm_listener",
                            "doc": {
                                "brief": "Add default CommProtocol listener.\\nWhen the application uses this port, the listening thread will immediately\\nrelease the port resources and exit. If you need to start the default listening thread again,\\nplease release the default port resources and then call this function.",
                                "maixpy": "maix.comm.add_default_comm_listener",
                                "py_doc": "Add default CommProtocol listener.\nWhen the application uses this port, the listening thread will immediately\nrelease the port resources and exit. If you need to start the default listening thread again,\nplease release the default port resources and then call this function."
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void add_default_comm_listener()"
                        },
                        "rm_default_comm_listener": {
                            "type": "func",
                            "name": "rm_default_comm_listener",
                            "doc": {
                                "brief": "Remove default CommProtocol listener.",
                                "return": "bool type.",
                                "maixpy": "maix.comm.rm_default_comm_listener",
                                "py_doc": "Remove default CommProtocol listener.\n\nReturns: bool type.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool rm_default_comm_listener()"
                        },
                        "CommProtocol": {
                            "type": "class",
                            "name": "CommProtocol",
                            "doc": {
                                "brief": "Class for communication protocol",
                                "maixpy": "maix.comm.CommProtocol",
                                "py_doc": "Class for communication protocol"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "CommProtocol",
                                    "doc": {
                                        "brief": "Construct a new CommProtocol object",
                                        "param": {
                                            "buff_size": "buffer size, default to 1024 bytes"
                                        },
                                        "maixpy": "maix.comm.CommProtocol.__init__",
                                        "maixcdk": "maix.comm.CommProtocol.CommProtocol",
                                        "py_doc": "Construct a new CommProtocol object\n\nArgs:\n  - buff_size: buffer size, default to 1024 bytes\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "buff_size",
                                            "1024"
                                        ],
                                        [
                                            "uint32_t",
                                            "header",
                                            "maix::protocol::HEADER"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "CommProtocol(int buff_size = 1024, uint32_t header=maix::protocol::HEADER)",
                                    "py_def": "def __init__(self, buff_size: int = 1024, header: int = 3148663466) -> None"
                                },
                                "get_msg": {
                                    "type": "func",
                                    "name": "get_msg",
                                    "doc": {
                                        "brief": "Read data to buffer, and try to decode it as maix.protocol.MSG object",
                                        "param": {
                                            "timeout": "unit ms, 0 means return immediatly, -1 means block util have msg, >0 means block until have msg or timeout."
                                        },
                                        "return": "decoded data, if nullptr, means no valid frame found.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.get_msg",
                                        "py_doc": "Read data to buffer, and try to decode it as maix.protocol.MSG object\n\nArgs:\n  - timeout: unit ms, 0 means return immediatly, -1 means block util have msg, >0 means block until have msg or timeout.\n\n\nReturns: decoded data, if nullptr, means no valid frame found.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "timeout",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": "protocol::MSG*",
                                    "static": false,
                                    "def": "protocol::MSG *get_msg(int timeout = 0)",
                                    "py_def": "def get_msg(self, timeout: int = 0) -> ..."
                                },
                                "resp_ok": {
                                    "type": "func",
                                    "name": "resp_ok",
                                    "doc": {
                                        "brief": "Send response ok(success) message",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.resp_ok",
                                        "py_doc": "Send response ok(success) message\n\nArgs:\n  - cmd: CMD value\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err resp_ok(uint8_t cmd, Bytes *body = nullptr)",
                                    "py_def": "def resp_ok(self, cmd: int, body: maix.Bytes(bytes) = None) -> maix.err.Err"
                                },
                                "report": {
                                    "type": "func",
                                    "name": "report",
                                    "doc": {
                                        "brief": "Send report message",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.report",
                                        "py_doc": "Send report message\n\nArgs:\n  - cmd: CMD value\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err report(uint8_t cmd, Bytes *body = nullptr)",
                                    "py_def": "def report(self, cmd: int, body: maix.Bytes(bytes) = None) -> maix.err.Err"
                                },
                                "resp_err": {
                                    "type": "func",
                                    "name": "resp_err",
                                    "doc": {
                                        "brief": "Encode response error message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.",
                                        "maixpy": "maix.comm.CommProtocol.resp_err",
                                        "py_doc": "Encode response error message to buffer\n\nArgs:\n  - cmd: CMD value\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err.\nAttentioin, delete it after use in C++.\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err resp_err(uint8_t cmd, err::Err code, const std::string &msg)",
                                    "py_def": "def resp_err(self, cmd: int, code: maix.err.Err, msg: str) -> maix.err.Err"
                                }
                            },
                            "def": "class CommProtocol"
                        }
                    },
                    "auto_add": true
                },
                "fs": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.fs module"
                    },
                    "members": {
                        "SEEK": {
                            "type": "enum",
                            "name": "SEEK",
                            "doc": {
                                "brief": "SEEK enums",
                                "maixpy": "maix.fs.SEEK",
                                "py_doc": "SEEK enums"
                            },
                            "values": [
                                [
                                    "SEEK_SET",
                                    "0",
                                    "Seek from beginning of file."
                                ],
                                [
                                    "SEEK_CUR",
                                    "1",
                                    "Seek from current position."
                                ],
                                [
                                    "SEEK_END",
                                    "2",
                                    "Seek from end of file."
                                ]
                            ],
                            "def": "enum SEEK\n    {\n        SEEK_SET = 0,  // Seek from beginning of file.\n        SEEK_CUR = 1,  // Seek from current position.\n        SEEK_END = 2,  // Seek from end of file.\n    }"
                        },
                        "isabs": {
                            "type": "func",
                            "name": "isabs",
                            "doc": {
                                "brief": "Check if the path is absolute path",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is absolute path",
                                "maixpy": "maix.fs.isabs",
                                "py_doc": "Check if the path is absolute path\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is absolute path\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isabs(const std::string &path)",
                            "py_def": "def isabs(path: str) -> bool"
                        },
                        "isdir": {
                            "type": "func",
                            "name": "isdir",
                            "doc": {
                                "brief": "Check if the path is a directory, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a directory",
                                "maixpy": "maix.fs.isdir",
                                "py_doc": "Check if the path is a directory, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a directory\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isdir(const std::string &path)",
                            "py_def": "def isdir(path: str) -> bool"
                        },
                        "isfile": {
                            "type": "func",
                            "name": "isfile",
                            "doc": {
                                "brief": "Check if the path is a file, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a file",
                                "maixpy": "maix.fs.isfile",
                                "py_doc": "Check if the path is a file, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a file\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool isfile(const std::string &path)",
                            "py_def": "def isfile(path: str) -> bool"
                        },
                        "islink": {
                            "type": "func",
                            "name": "islink",
                            "doc": {
                                "brief": "Check if the path is a link, if not exist, throw exception",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path is a link",
                                "maixpy": "maix.fs.islink",
                                "py_doc": "Check if the path is a link, if not exist, throw exception\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path is a link\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool islink(const std::string &path)",
                            "py_def": "def islink(path: str) -> bool"
                        },
                        "symlink": {
                            "type": "func",
                            "name": "symlink",
                            "doc": {
                                "brief": "Create soft link",
                                "param": {
                                    "src": "real file path",
                                    "link": "link file path",
                                    "force": "force link, if already have link file, will delet it first then create."
                                },
                                "maixpy": "maix.fs.symlink",
                                "py_doc": "Create soft link\n\nArgs:\n  - src: real file path\n  - link: link file path\n  - force: force link, if already have link file, will delet it first then create.\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "src",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "link",
                                    null
                                ],
                                [
                                    "bool",
                                    "force",
                                    "false"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err symlink(const std::string &src, const std::string &link, bool force = false)",
                            "py_def": "def symlink(src: str, link: str, force: bool = False) -> maix.err.Err"
                        },
                        "exists": {
                            "type": "func",
                            "name": "exists",
                            "doc": {
                                "brief": "Check if the path exists",
                                "param": {
                                    "path": "path to check"
                                },
                                "return": "true if path exists",
                                "maixpy": "maix.fs.exists",
                                "py_doc": "Check if the path exists\n\nArgs:\n  - path: path to check\n\n\nReturns: true if path exists\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool exists(const std::string &path)",
                            "py_def": "def exists(path: str) -> bool"
                        },
                        "mkdir": {
                            "type": "func",
                            "name": "mkdir",
                            "doc": {
                                "brief": "Create a directory recursively",
                                "param": {
                                    "path": "path to create",
                                    "exist_ok": "if true, also return true if directory already exists",
                                    "recursive": "if true, create directory recursively, otherwise, only create one directory, default is true"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.mkdir",
                                "py_doc": "Create a directory recursively\n\nArgs:\n  - path: path to create\n  - exist_ok: if true, also return true if directory already exists\n  - recursive: if true, create directory recursively, otherwise, only create one directory, default is true\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "exist_ok",
                                    "true"
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "true"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err mkdir(const std::string &path, bool exist_ok = true, bool recursive = true)",
                            "py_def": "def mkdir(path: str, exist_ok: bool = True, recursive: bool = True) -> maix.err.Err"
                        },
                        "rmdir": {
                            "type": "func",
                            "name": "rmdir",
                            "doc": {
                                "brief": "Remove a directory",
                                "param": {
                                    "path": "path to remove",
                                    "recursive": "if true, remove directory recursively, otherwise, only remove empty directory, default is false"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.rmdir",
                                "py_doc": "Remove a directory\n\nArgs:\n  - path: path to remove\n  - recursive: if true, remove directory recursively, otherwise, only remove empty directory, default is false\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "false"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err rmdir(const std::string &path, bool recursive = false)",
                            "py_def": "def rmdir(path: str, recursive: bool = False) -> maix.err.Err"
                        },
                        "remove": {
                            "type": "func",
                            "name": "remove",
                            "doc": {
                                "brief": "Remove a file",
                                "param": {
                                    "path": "path to remove"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.remove",
                                "py_doc": "Remove a file\n\nArgs:\n  - path: path to remove\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err remove(const std::string &path)",
                            "py_def": "def remove(path: str) -> maix.err.Err"
                        },
                        "rename": {
                            "type": "func",
                            "name": "rename",
                            "doc": {
                                "brief": "Rename a file or directory",
                                "param": {
                                    "src": "source path",
                                    "dst": "destination path, if destination dirs not exist, will auto create"
                                },
                                "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                "maixpy": "maix.fs.rename",
                                "py_doc": "Rename a file or directory\n\nArgs:\n  - src: source path\n  - dst: destination path, if destination dirs not exist, will auto create\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "src",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "dst",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err rename(const std::string &src, const std::string &dst)",
                            "py_def": "def rename(src: str, dst: str) -> maix.err.Err"
                        },
                        "sync": {
                            "type": "func",
                            "name": "sync",
                            "doc": {
                                "brief": "Sync files, ensure they're wrriten to disk from RAM",
                                "maixpy": "maix.fs.sync",
                                "py_doc": "Sync files, ensure they're wrriten to disk from RAM"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sync()",
                            "py_def": "def sync() -> None"
                        },
                        "getsize": {
                            "type": "func",
                            "name": "getsize",
                            "doc": {
                                "brief": "Get file size",
                                "param": {
                                    "path": "path to get size"
                                },
                                "return": "file size if success, -err::Err code if failed",
                                "maixpy": "maix.fs.getsize",
                                "py_doc": "Get file size\n\nArgs:\n  - path: path to get size\n\n\nReturns: file size if success, -err::Err code if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "int",
                            "static": false,
                            "def": "int getsize(const std::string &path)",
                            "py_def": "def getsize(path: str) -> int"
                        },
                        "dirname": {
                            "type": "func",
                            "name": "dirname",
                            "doc": {
                                "brief": "Get directory name of path",
                                "param": {
                                    "path": "path to get dirname"
                                },
                                "return": "dirname if success, empty string if failed",
                                "maixpy": "maix.fs.dirname",
                                "py_doc": "Get directory name of path\n\nArgs:\n  - path: path to get dirname\n\n\nReturns: dirname if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string dirname(const std::string &path)",
                            "py_def": "def dirname(path: str) -> str"
                        },
                        "basename": {
                            "type": "func",
                            "name": "basename",
                            "doc": {
                                "brief": "Get base name of path",
                                "param": {
                                    "path": "path to get basename"
                                },
                                "return": "basename if success, empty string if failed",
                                "maixpy": "maix.fs.basename",
                                "py_doc": "Get base name of path\n\nArgs:\n  - path: path to get basename\n\n\nReturns: basename if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string basename(const std::string &path)",
                            "py_def": "def basename(path: str) -> str"
                        },
                        "abspath": {
                            "type": "func",
                            "name": "abspath",
                            "doc": {
                                "brief": "Get absolute path",
                                "param": {
                                    "path": "path to get absolute path"
                                },
                                "return": "absolute path if success, empty string if failed",
                                "maixpy": "maix.fs.abspath",
                                "py_doc": "Get absolute path\n\nArgs:\n  - path: path to get absolute path\n\n\nReturns: absolute path if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string abspath(const std::string &path)",
                            "py_def": "def abspath(path: str) -> str"
                        },
                        "getcwd": {
                            "type": "func",
                            "name": "getcwd",
                            "doc": {
                                "brief": "Get current working directory",
                                "return": "current working directory absolute path",
                                "maixpy": "maix.fs.getcwd",
                                "py_doc": "Get current working directory\n\nReturns: current working directory absolute path\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string getcwd()",
                            "py_def": "def getcwd() -> str"
                        },
                        "realpath": {
                            "type": "func",
                            "name": "realpath",
                            "doc": {
                                "brief": "Get realpath of path",
                                "param": {
                                    "path": "path to get realpath"
                                },
                                "return": "realpath if success, empty string if failed",
                                "maixpy": "maix.fs.realpath",
                                "py_doc": "Get realpath of path\n\nArgs:\n  - path: path to get realpath\n\n\nReturns: realpath if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string realpath(const std::string &path)",
                            "py_def": "def realpath(path: str) -> str"
                        },
                        "splitext": {
                            "type": "func",
                            "name": "splitext",
                            "doc": {
                                "brief": "Get file extension",
                                "param": {
                                    "path": "path to get extension"
                                },
                                "return": "prefix_path and extension list if success, empty string if failed",
                                "maixpy": "maix.fs.splitext",
                                "py_doc": "Get file extension\n\nArgs:\n  - path: path to get extension\n\n\nReturns: prefix_path and extension list if success, empty string if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::vector<std::string>",
                            "static": false,
                            "def": "std::vector<std::string> splitext(const std::string &path)",
                            "py_def": "def splitext(path: str) -> list[str]"
                        },
                        "listdir": {
                            "type": "func",
                            "name": "listdir",
                            "doc": {
                                "brief": "List files in directory",
                                "param": {
                                    "path": "path to list",
                                    "recursive": "if true, list recursively, otherwise, only list current directory, default is false",
                                    "full_path": "if true, return full path, otherwise, only return basename, default is false"
                                },
                                "return": "files list if success, nullptr if failed, you should manually delete it in C++.",
                                "maixpy": "maix.fs.listdir",
                                "py_doc": "List files in directory\n\nArgs:\n  - path: path to list\n  - recursive: if true, list recursively, otherwise, only list current directory, default is false\n  - full_path: if true, return full path, otherwise, only return basename, default is false\n\n\nReturns: files list if success, nullptr if failed, you should manually delete it in C++.\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "bool",
                                    "recursive",
                                    "false"
                                ],
                                [
                                    "bool",
                                    "full_path",
                                    "false"
                                ]
                            ],
                            "ret_type": "std::vector<std::string>*",
                            "static": false,
                            "def": "std::vector<std::string> *listdir(const std::string &path, bool recursive = false, bool full_path = false)",
                            "py_def": "def listdir(path: str, recursive: bool = False, full_path: bool = False) -> list[str]"
                        },
                        "File": {
                            "type": "class",
                            "name": "File",
                            "doc": {
                                "brief": "File read write ops",
                                "maixpy": "maix.fs.File",
                                "py_doc": "File read write ops"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "File",
                                    "doc": {
                                        "brief": "Construct File object",
                                        "maixpy": "maix.fs.File.__init__",
                                        "maixcdk": "maix.fs.File.File",
                                        "py_doc": "Construct File object"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "File()",
                                    "py_def": "def __init__(self) -> None"
                                },
                                "open": {
                                    "type": "func",
                                    "name": "open",
                                    "doc": {
                                        "brief": "Open a file",
                                        "param": {
                                            "path": "path to open",
                                            "mode": "open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\""
                                        },
                                        "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                        "maixpy": "maix.fs.File.open",
                                        "py_doc": "Open a file\n\nArgs:\n  - path: path to open\n  - mode: open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\"\n\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "mode",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err open(const std::string &path, const std::string &mode)",
                                    "py_def": "def open(self, path: str, mode: str) -> maix.err.Err"
                                },
                                "close": {
                                    "type": "func",
                                    "name": "close",
                                    "doc": {
                                        "brief": "Close a file",
                                        "maixpy": "maix.fs.File.close",
                                        "py_doc": "Close a file"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void close()",
                                    "py_def": "def close(self) -> None"
                                },
                                "read": {
                                    "type": "func",
                                    "name": "read",
                                    "doc": {
                                        "brief": "Read data from file API2",
                                        "param": {
                                            "size": "max read size"
                                        },
                                        "return": "bytes data if success(need delete manually in C/C++), nullptr if failed",
                                        "maixpy": "maix.fs.File.read",
                                        "py_doc": "Read data from file API2\n\nArgs:\n  - size: max read size\n\n\nReturns: bytes data if success(need delete manually in C/C++), nullptr if failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "size",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<uint8_t>*",
                                    "static": false,
                                    "def": "std::vector<uint8_t> *read(int size)",
                                    "py_def": "def read(self, size: int) -> list[int]"
                                },
                                "readline": {
                                    "type": "func",
                                    "name": "readline",
                                    "doc": {
                                        "brief": "Read line from file",
                                        "return": "line if success, empty string if failed. You need to delete the returned object manually in C/C++.",
                                        "maixpy": "maix.fs.File.readline",
                                        "py_doc": "Read line from file\n\nReturns: line if success, empty string if failed. You need to delete the returned object manually in C/C++.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string*",
                                    "static": false,
                                    "def": "std::string *readline()",
                                    "py_def": "def readline(self) -> str"
                                },
                                "eof": {
                                    "type": "func",
                                    "name": "eof",
                                    "doc": {
                                        "brief": "End of file or not",
                                        "return": "0 if not reach end of file, else eof.",
                                        "maixpy": "maix.fs.File.eof",
                                        "py_doc": "End of file or not\n\nReturns: 0 if not reach end of file, else eof.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int eof()",
                                    "py_def": "def eof(self) -> int"
                                },
                                "write": {
                                    "type": "func",
                                    "name": "write",
                                    "doc": {
                                        "brief": "Write data to file API2",
                                        "param": {
                                            "buf": "buffer to write"
                                        },
                                        "return": "write size if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.write",
                                        "py_doc": "Write data to file API2\n\nArgs:\n  - buf: buffer to write\n\n\nReturns: write size if success, -err::Err code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "const std::vector<uint8_t> &",
                                            "buf",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int write(const std::vector<uint8_t> &buf)",
                                    "py_def": "def write(self, buf: list[int]) -> int"
                                },
                                "seek": {
                                    "type": "func",
                                    "name": "seek",
                                    "doc": {
                                        "brief": "Seek file position",
                                        "param": {
                                            "offset": "offset to seek",
                                            "whence": "@see maix.fs.SEEK"
                                        },
                                        "return": "new position if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.seek",
                                        "py_doc": "Seek file position\n\nArgs:\n  - offset: offset to seek\n  - whence: @see maix.fs.SEEK\n\n\nReturns: new position if success, -err::Err code if failed\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "offset",
                                            null
                                        ],
                                        [
                                            "int",
                                            "whence",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int seek(int offset, int whence)",
                                    "py_def": "def seek(self, offset: int, whence: int) -> int"
                                },
                                "tell": {
                                    "type": "func",
                                    "name": "tell",
                                    "doc": {
                                        "brief": "Get file position",
                                        "return": "file position if success, -err::Err code if failed",
                                        "maixpy": "maix.fs.File.tell",
                                        "py_doc": "Get file position\n\nReturns: file position if success, -err::Err code if failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int tell()",
                                    "py_def": "def tell(self) -> int"
                                },
                                "flush": {
                                    "type": "func",
                                    "name": "flush",
                                    "doc": {
                                        "brief": "Flush file",
                                        "return": "err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed",
                                        "maixpy": "maix.fs.File.flush",
                                        "py_doc": "Flush file\n\nReturns: err::ERR_NONE(err.Err.ERR_NONE in MaixPy) if success, other error code if failed\n"
                                    },
                                    "args": [],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err flush()",
                                    "py_def": "def flush(self) -> maix.err.Err"
                                }
                            },
                            "def": "class File"
                        },
                        "open": {
                            "type": "func",
                            "name": "open",
                            "doc": {
                                "brief": "Open a file, and return a File object",
                                "param": {
                                    "path": "path to open",
                                    "mode": "open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\""
                                },
                                "return": "File object if success(need to delete object manually in C/C++), nullptr if failed",
                                "maixpy": "maix.fs.open",
                                "py_doc": "Open a file, and return a File object\n\nArgs:\n  - path: path to open\n  - mode: open mode, support \"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\", \"rb\", \"wb\", \"ab\", \"rb+\", \"wb+\", \"ab+\"\n\n\nReturns: File object if success(need to delete object manually in C/C++), nullptr if failed\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "mode",
                                    null
                                ]
                            ],
                            "ret_type": "fs::File*",
                            "static": false,
                            "def": "fs::File *open(const std::string &path, const std::string &mode)",
                            "py_def": "def open(path: str, mode: str) -> File"
                        },
                        "tempdir": {
                            "type": "func",
                            "name": "tempdir",
                            "doc": {
                                "brief": "Get temp files directory",
                                "return": "temp files directory",
                                "maixpy": "maix.fs.tempdir",
                                "py_doc": "Get temp files directory\n\nReturns: temp files directory\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string tempdir()",
                            "py_def": "def tempdir() -> str"
                        }
                    },
                    "auto_add": true
                },
                "app": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.app module"
                    },
                    "members": {
                        "Version": {
                            "type": "class",
                            "name": "Version",
                            "doc": {
                                "brief": "APP version",
                                "maixpy": "maix.app.Version",
                                "py_doc": "APP version"
                            },
                            "members": {
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "Convert to string, e.g. 1.0.0",
                                        "maixpy": "maix.app.Version.__str__",
                                        "py_doc": "Convert to string, e.g. 1.0.0"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "from_str": {
                                    "type": "func",
                                    "name": "from_str",
                                    "doc": {
                                        "brief": "Convert from string, e.g. \\\"1.0.0\\\"",
                                        "maixpy": "maix.app.Version.from_str",
                                        "py_doc": "Convert from string, e.g. \"1.0.0\""
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "version_str",
                                            null
                                        ]
                                    ],
                                    "ret_type": "app::Version",
                                    "static": true,
                                    "def": "static app::Version from_str(const string &version_str)",
                                    "py_def": "def from_str(version_str: str) -> Version"
                                }
                            },
                            "def": "class Version"
                        },
                        "APP_Info": {
                            "type": "class",
                            "name": "APP_Info",
                            "doc": {
                                "brief": "APP info",
                                "maixpy": "maix.app.APP_Info",
                                "py_doc": "APP info"
                            },
                            "members": {
                                "id": {
                                    "type": "var",
                                    "name": "id",
                                    "doc": {
                                        "brief": "APP id",
                                        "maixpy": "maix.app.APP_Info.id",
                                        "py_doc": "APP id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string id"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "APP name",
                                        "maixpy": "maix.app.APP_Info.name",
                                        "py_doc": "APP name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string name"
                                },
                                "icon": {
                                    "type": "var",
                                    "name": "icon",
                                    "doc": {
                                        "brief": "APP icon",
                                        "maixpy": "maix.app.APP_Info.icon",
                                        "py_doc": "APP icon"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string icon"
                                },
                                "version": {
                                    "type": "var",
                                    "name": "version",
                                    "doc": {
                                        "brief": "APP version",
                                        "maixpy": "maix.app.APP_Info.version",
                                        "py_doc": "APP version"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "Version version"
                                },
                                "exec": {
                                    "type": "var",
                                    "name": "exec",
                                    "doc": {
                                        "brief": "APP exec",
                                        "maixpy": "maix.app.APP_Info.exec",
                                        "py_doc": "APP exec"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string exec"
                                },
                                "author": {
                                    "type": "var",
                                    "name": "author",
                                    "doc": {
                                        "brief": "APP author",
                                        "maixpy": "maix.app.APP_Info.author",
                                        "py_doc": "APP author"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string author"
                                },
                                "desc": {
                                    "type": "var",
                                    "name": "desc",
                                    "doc": {
                                        "brief": "APP desc",
                                        "maixpy": "maix.app.APP_Info.desc",
                                        "py_doc": "APP desc"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "string desc"
                                },
                                "names": {
                                    "type": "var",
                                    "name": "names",
                                    "doc": {
                                        "brief": "APP names",
                                        "maixpy": "maix.app.APP_Info.names",
                                        "py_doc": "APP names"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "map<string, string> names"
                                },
                                "descs": {
                                    "type": "var",
                                    "name": "descs",
                                    "doc": {
                                        "brief": "APP descs",
                                        "maixpy": "maix.app.APP_Info.descs",
                                        "py_doc": "APP descs"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "map<string, string> descs"
                                }
                            },
                            "def": "class APP_Info"
                        },
                        "app_id": {
                            "type": "func",
                            "name": "app_id",
                            "doc": {
                                "brief": "Get current APP ID.",
                                "return": "APP ID.",
                                "maixpy": "maix.app.app_id",
                                "py_doc": "Get current APP ID.\n\nReturns: APP ID.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string app_id()",
                            "py_def": "def app_id() -> str"
                        },
                        "set_app_id": {
                            "type": "func",
                            "name": "set_app_id",
                            "doc": {
                                "brief": "Set current APP ID.",
                                "param": {
                                    "app_id": "APP ID."
                                },
                                "maixpy": "maix.app.set_app_id",
                                "py_doc": "Set current APP ID.\n\nArgs:\n  - app_id: APP ID.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    null
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string set_app_id(const string &app_id)",
                            "py_def": "def set_app_id(app_id: str) -> str"
                        },
                        "get_apps_info_path": {
                            "type": "func",
                            "name": "get_apps_info_path",
                            "doc": {
                                "brief": "Get APP info file path.",
                                "maixpy": "maix.app.get_apps_info_path",
                                "py_doc": "Get APP info file path."
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_apps_info_path()",
                            "py_def": "def get_apps_info_path() -> str"
                        },
                        "get_apps_info": {
                            "type": "func",
                            "name": "get_apps_info",
                            "doc": {
                                "brief": "Get APP info list.",
                                "param": {
                                    "ignore_launcher": "if true, ignore launcher APP. default false.",
                                    "ignore_app_store": "if true, ignore app store APP. default false."
                                },
                                "return": "APP info list. APP_Info object list.",
                                "maixpy": "maix.app.get_apps_info",
                                "py_doc": "Get APP info list.\n\nArgs:\n  - ignore_launcher: if true, ignore launcher APP. default false.\n  - ignore_app_store: if true, ignore app store APP. default false.\n\n\nReturns: APP info list. APP_Info object list.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "ignore_launcher",
                                    "false"
                                ],
                                [
                                    "bool",
                                    "ignore_app_store",
                                    "false"
                                ]
                            ],
                            "ret_type": "vector<app::APP_Info>&",
                            "static": false,
                            "def": "vector<app::APP_Info> &get_apps_info(bool ignore_launcher = false, bool ignore_app_store = false)",
                            "py_def": "def get_apps_info(ignore_launcher: bool = False, ignore_app_store: bool = False) -> list[APP_Info]"
                        },
                        "get_app_info": {
                            "type": "func",
                            "name": "get_app_info",
                            "doc": {
                                "brief": "Get app info by app id.",
                                "return": "app.APP_Info type.",
                                "maixpy": "maix.app.get_app_info",
                                "py_doc": "Get app info by app id.\n\nReturns: app.APP_Info type.\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "app_id",
                                    null
                                ]
                            ],
                            "ret_type": "app::APP_Info",
                            "static": false,
                            "def": "app::APP_Info get_app_info(const std::string &app_id)",
                            "py_def": "def get_app_info(app_id: str) -> APP_Info"
                        },
                        "get_app_data_path": {
                            "type": "func",
                            "name": "get_app_data_path",
                            "doc": {
                                "brief": "Get APP info, APP can store private data in this directory.",
                                "return": "APP data path \"./data\", just return the data folder in current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.",
                                "maixpy": "maix.app.get_app_data_path",
                                "py_doc": "Get APP info, APP can store private data in this directory.\n\nReturns: APP data path \"./data\", just return the data folder in current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_data_path()",
                            "py_def": "def get_app_data_path() -> str"
                        },
                        "get_app_path": {
                            "type": "func",
                            "name": "get_app_path",
                            "doc": {
                                "brief": "Get APP path.",
                                "param": {
                                    "app_id": "APP ID, if empty, return current APP path, else return the APP path by app_id."
                                },
                                "return": "APP path, just return the current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.",
                                "maixpy": "maix.app.get_app_path",
                                "py_doc": "Get APP path.\n\nArgs:\n  - app_id: APP ID, if empty, return current APP path, else return the APP path by app_id.\n\n\nReturns: APP path, just return the current path because APP executed in app install path or project path.\nSo, you must execute your program in you project path to use the project/data folder when you debug your APP.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_path(const string &app_id = \"\")",
                            "py_def": "def get_app_path(app_id: str = '') -> str"
                        },
                        "get_tmp_path": {
                            "type": "func",
                            "name": "get_tmp_path",
                            "doc": {
                                "brief": "Get global temporary data path, APPs can use this path as temporary data directory.",
                                "return": "temporary data path.",
                                "maixpy": "maix.app.get_tmp_path",
                                "py_doc": "Get global temporary data path, APPs can use this path as temporary data directory.\n\nReturns: temporary data path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_tmp_path()",
                            "py_def": "def get_tmp_path() -> str"
                        },
                        "get_share_path": {
                            "type": "func",
                            "name": "get_share_path",
                            "doc": {
                                "brief": "Get data path of share, shared data like picture and video will put in this directory",
                                "return": "share data path.",
                                "maixpy": "maix.app.get_share_path",
                                "py_doc": "Get data path of share, shared data like picture and video will put in this directory\n\nReturns: share data path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_share_path()",
                            "py_def": "def get_share_path() -> str"
                        },
                        "get_picture_path": {
                            "type": "func",
                            "name": "get_picture_path",
                            "doc": {
                                "brief": "Get picture path of share, shared picture will put in this directory",
                                "return": "share picture path.",
                                "maixpy": "maix.app.get_picture_path",
                                "py_doc": "Get picture path of share, shared picture will put in this directory\n\nReturns: share picture path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_picture_path()",
                            "py_def": "def get_picture_path() -> str"
                        },
                        "get_video_path": {
                            "type": "func",
                            "name": "get_video_path",
                            "doc": {
                                "brief": "Get video path of share, shared video will put in this directory",
                                "return": "share video path.",
                                "maixpy": "maix.app.get_video_path",
                                "py_doc": "Get video path of share, shared video will put in this directory\n\nReturns: share video path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_video_path()",
                            "py_def": "def get_video_path() -> str"
                        },
                        "get_font_path": {
                            "type": "func",
                            "name": "get_font_path",
                            "doc": {
                                "brief": "Get font path of share, shared font will put in this directory",
                                "return": "share font path.",
                                "maixpy": "maix.app.get_font_path",
                                "py_doc": "Get font path of share, shared font will put in this directory\n\nReturns: share font path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_font_path()",
                            "py_def": "def get_font_path() -> str"
                        },
                        "get_icon_path": {
                            "type": "func",
                            "name": "get_icon_path",
                            "doc": {
                                "brief": "Get icon path of share, shared icon will put in this directory",
                                "return": "share icon path.",
                                "maixpy": "maix.app.get_icon_path",
                                "py_doc": "Get icon path of share, shared icon will put in this directory\n\nReturns: share icon path.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_icon_path()",
                            "py_def": "def get_icon_path() -> str"
                        },
                        "get_sys_config_kv": {
                            "type": "func",
                            "name": "get_sys_config_kv",
                            "doc": {
                                "brief": "Get system config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. wifi, language. more see settings APP.",
                                    "key": "config key, e.g. for wifi, key can be ssid, for language, key can be locale.",
                                    "value": "default value, if not found, return this value.",
                                    "from_cache": "if true, read from cache, if false, read from file."
                                },
                                "return": "config value, always string type, if not found, return empty string.",
                                "maixpy": "maix.app.get_sys_config_kv",
                                "py_doc": "Get system config item value.\n\nArgs:\n  - item: name of setting item, e.g. wifi, language. more see settings APP.\n  - key: config key, e.g. for wifi, key can be ssid, for language, key can be locale.\n  - value: default value, if not found, return this value.\n  - from_cache: if true, read from cache, if false, read from file.\n\n\nReturns: config value, always string type, if not found, return empty string.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    "\"\""
                                ],
                                [
                                    "bool",
                                    "from_cache",
                                    "true"
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_sys_config_kv(const string &item, const string &key, const string &value = \"\", bool from_cache = true)",
                            "py_def": "def get_sys_config_kv(item: str, key: str, value: str = '', from_cache: bool = True) -> str"
                        },
                        "get_app_config_kv": {
                            "type": "func",
                            "name": "get_app_config_kv",
                            "doc": {
                                "brief": "Get APP config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. user_info",
                                    "key": "config key, e.g. for user_info, key can be name, age etc.",
                                    "value": "default value, if not found, return this value.",
                                    "from_cache": "if true, read from cache, if false, read from file."
                                },
                                "return": "config value, always string type, if not found, return empty string.",
                                "maixpy": "maix.app.get_app_config_kv",
                                "py_doc": "Get APP config item value.\n\nArgs:\n  - item: name of setting item, e.g. user_info\n  - key: config key, e.g. for user_info, key can be name, age etc.\n  - value: default value, if not found, return this value.\n  - from_cache: if true, read from cache, if false, read from file.\n\n\nReturns: config value, always string type, if not found, return empty string.\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    "\"\""
                                ],
                                [
                                    "bool",
                                    "from_cache",
                                    "true"
                                ]
                            ],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_config_kv(const string &item, const string &key, const string &value = \"\", bool from_cache = true)",
                            "py_def": "def get_app_config_kv(item: str, key: str, value: str = '', from_cache: bool = True) -> str"
                        },
                        "set_app_config_kv": {
                            "type": "func",
                            "name": "set_app_config_kv",
                            "doc": {
                                "brief": "Set APP config item value.",
                                "param": {
                                    "item": "name of setting item, e.g. user_info",
                                    "key": "config key, e.g. for user_info, key can be name, age etc.",
                                    "value": "config value, always string type.",
                                    "write_file": "if true, write to file, if false, just write to cache."
                                },
                                "return": "err::Err",
                                "maixpy": "maix.app.set_app_config_kv",
                                "py_doc": "Set APP config item value.\n\nArgs:\n  - item: name of setting item, e.g. user_info\n  - key: config key, e.g. for user_info, key can be name, age etc.\n  - value: config value, always string type.\n  - write_file: if true, write to file, if false, just write to cache.\n\n\nReturns: err::Err\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "item",
                                    null
                                ],
                                [
                                    "const string &",
                                    "key",
                                    null
                                ],
                                [
                                    "const string &",
                                    "value",
                                    null
                                ],
                                [
                                    "bool",
                                    "write_file",
                                    "true"
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_app_config_kv(const string &item, const string &key, const string &value, bool write_file = true)",
                            "py_def": "def set_app_config_kv(item: str, key: str, value: str, write_file: bool = True) -> maix.err.Err"
                        },
                        "get_app_config_path": {
                            "type": "func",
                            "name": "get_app_config_path",
                            "doc": {
                                "brief": "Get APP config path, ini format, so you can use your own ini parser to parse it like `configparser` in Python.\\nAll APP config info is recommended to store in this file.",
                                "return": "APP config path(ini format).",
                                "maixpy": "maix.app.get_app_config_path",
                                "py_doc": "Get APP config path, ini format, so you can use your own ini parser to parse it like `configparser` in Python.\nAll APP config info is recommended to store in this file.\n\nReturns: APP config path(ini format).\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_app_config_path()",
                            "py_def": "def get_app_config_path() -> str"
                        },
                        "set_exit_msg": {
                            "type": "func",
                            "name": "set_exit_msg",
                            "doc": {
                                "brief": "Set APP exit code and exit message.\\nIf code != 0, the launcher will show a dialog to user, and display the msg.",
                                "param": {
                                    "code": "exit code, 0 means success, other means error, if code is 0, do nothing.",
                                    "msg": "exit message, if code is 0, msg is not used."
                                },
                                "return": "exit code, the same as arg @code.",
                                "maixpy": "maix.app.set_exit_msg",
                                "py_doc": "Set APP exit code and exit message.\nIf code != 0, the launcher will show a dialog to user, and display the msg.\n\nArgs:\n  - code: exit code, 0 means success, other means error, if code is 0, do nothing.\n  - msg: exit message, if code is 0, msg is not used.\n\n\nReturns: exit code, the same as arg @code.\n"
                            },
                            "args": [
                                [
                                    "err::Err",
                                    "code",
                                    null
                                ],
                                [
                                    "const string &",
                                    "msg",
                                    null
                                ]
                            ],
                            "ret_type": "err::Err",
                            "static": false,
                            "def": "err::Err set_exit_msg(err::Err code, const string &msg)",
                            "py_def": "def set_exit_msg(code: maix.err.Err, msg: str) -> maix.err.Err"
                        },
                        "get_exit_msg": {
                            "type": "func",
                            "name": "get_exit_msg",
                            "doc": {
                                "brief": "Get APP exit code and exit message.",
                                "param": {
                                    "cache": "if true, read from cache, if false, read from file. default false."
                                },
                                "return": "exit return app_id, exit code and exit message.",
                                "maixpy": "maix.app.get_exit_msg",
                                "py_doc": "Get APP exit code and exit message.\n\nArgs:\n  - cache: if true, read from cache, if false, read from file. default false.\n\n\nReturns: exit return app_id, exit code and exit message.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "cache",
                                    "false"
                                ]
                            ],
                            "ret_type": "tuple<string, err::Err, string>",
                            "static": false,
                            "def": "tuple<string, err::Err, string> get_exit_msg(bool cache = false)",
                            "py_def": "def get_exit_msg(cache: bool = False) -> tuple[str, maix.err.Err, str]"
                        },
                        "have_exit_msg": {
                            "type": "func",
                            "name": "have_exit_msg",
                            "doc": {
                                "brief": "Check if have exit msg",
                                "param": {
                                    "cache": "if true, just check from cache, if false, check from file. default false."
                                },
                                "return": "true if have exit msg, false if not.",
                                "maixpy": "maix.app.have_exit_msg",
                                "py_doc": "Check if have exit msg\n\nArgs:\n  - cache: if true, just check from cache, if false, check from file. default false.\n\n\nReturns: true if have exit msg, false if not.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "cache",
                                    "false"
                                ]
                            ],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool have_exit_msg(bool cache = false)",
                            "py_def": "def have_exit_msg(cache: bool = False) -> bool"
                        },
                        "switch_app": {
                            "type": "func",
                            "name": "switch_app",
                            "doc": {
                                "brief": "Exit this APP and start another APP(by launcher).\\nCall this API will call set_exit_flag(true), you should check app::need_exit() in your code.\\nAnd exit this APP if app::need_exit() return true.",
                                "param": {
                                    "app_id": "APP ID which will be started. app_id and idx must have one is valid.",
                                    "idx": "APP index. app_id and idx must have one is valid.",
                                    "start_param": "string type, will send to app, app can get this param by `app.get_start_param()`"
                                },
                                "attention": "If app id or idx the same as current app, do nothing.",
                                "maixpy": "maix.app.switch_app",
                                "py_doc": "Exit this APP and start another APP(by launcher).\nCall this API will call set_exit_flag(true), you should check app::need_exit() in your code.\nAnd exit this APP if app::need_exit() return true.\n\nArgs:\n  - app_id: APP ID which will be started. app_id and idx must have one is valid.\n  - idx: APP index. app_id and idx must have one is valid.\n  - start_param: string type, will send to app, app can get this param by `app.get_start_param()`\n"
                            },
                            "args": [
                                [
                                    "const string &",
                                    "app_id",
                                    null
                                ],
                                [
                                    "int",
                                    "idx",
                                    "-1"
                                ],
                                [
                                    "const std::string &",
                                    "start_param",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void switch_app(const string &app_id, int idx = -1, const std::string &start_param = \"\")",
                            "py_def": "def switch_app(app_id: str, idx: int = -1, start_param: str = '') -> None"
                        },
                        "get_start_param": {
                            "type": "func",
                            "name": "get_start_param",
                            "doc": {
                                "brief": "Get start param set by caller",
                                "return": "param, string type",
                                "maixpy": "maix.app.get_start_param",
                                "py_doc": "Get start param set by caller\n\nReturns: param, string type\n"
                            },
                            "args": [],
                            "ret_type": "const std::string",
                            "static": false,
                            "def": "const std::string get_start_param()",
                            "py_def": "def get_start_param() -> str"
                        },
                        "need_exit": {
                            "type": "func",
                            "name": "need_exit",
                            "doc": {
                                "brief": "Shoule this APP exit?",
                                "return": "true if this APP should exit, false if not.",
                                "attention": "This API is a function, not a variable.",
                                "maixpy": "maix.app.need_exit",
                                "py_doc": "Shoule this APP exit?\n\nReturns: true if this APP should exit, false if not.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool need_exit()",
                            "py_def": "def need_exit() -> bool"
                        },
                        "running": {
                            "type": "func",
                            "name": "running",
                            "doc": {
                                "brief": "App should running? The same as !app::need_exit() (not app::need_exit() in MaixPy).",
                                "return": "true if this APP should running, false if not.",
                                "attention": "This API is a function, not a variable.",
                                "maixpy": "maix.app.running",
                                "py_doc": "App should running? The same as !app::need_exit() (not app::need_exit() in MaixPy).\n\nReturns: true if this APP should running, false if not.\n"
                            },
                            "args": [],
                            "ret_type": "bool",
                            "static": false,
                            "def": "bool running()",
                            "py_def": "def running() -> bool"
                        },
                        "set_exit_flag": {
                            "type": "func",
                            "name": "set_exit_flag",
                            "doc": {
                                "brief": "Set exit flag. You can get exit flag by app.need_exit().",
                                "param": {
                                    "exit": "true if this APP should exit, false if not."
                                },
                                "maixpy": "maix.app.set_exit_flag",
                                "py_doc": "Set exit flag. You can get exit flag by app.need_exit().\n\nArgs:\n  - exit: true if this APP should exit, false if not.\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "exit",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void set_exit_flag(bool exit)",
                            "py_def": "def set_exit_flag(exit: bool) -> None"
                        }
                    },
                    "auto_add": true
                },
                "protocol": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.protocol module"
                    },
                    "members": {
                        "VERSION": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "protocol version",
                                "maixpy": "maix.protocol.VERSION",
                                "py_doc": "protocol version"
                            },
                            "value": "1",
                            "static": false,
                            "readonly": true,
                            "def": "const uint8_t VERSION = 1"
                        },
                        "HEADER": {
                            "type": "var",
                            "name": "HEADER",
                            "doc": {
                                "brief": "protocol header",
                                "maixpy": "maix.protocol.HEADER",
                                "py_doc": "protocol header"
                            },
                            "value": null,
                            "static": false,
                            "readonly": false,
                            "def": "extern uint32_t HEADER"
                        },
                        "CMD": {
                            "type": "enum",
                            "name": "CMD",
                            "doc": {
                                "brief": "protocol cmd, more doc see MaixCDK document's convention doc",
                                "note": "max app custom CMD value should < CMD_APP_MAX",
                                "maixpy": "maix.protocol.CMD",
                                "py_doc": "protocol cmd, more doc see MaixCDK document's convention doc"
                            },
                            "values": [
                                [
                                    "CMD_APP_MAX",
                                    "0xC8",
                                    "200, max app custom CMD value should < CMD_APP_MAX"
                                ],
                                [
                                    "CMD_SET_REPORT",
                                    "0xF8",
                                    "set auto upload data mode"
                                ],
                                [
                                    "CMD_APP_LIST",
                                    "0xF9",
                                    ""
                                ],
                                [
                                    "CMD_START_APP",
                                    "0xFA",
                                    ""
                                ],
                                [
                                    "CMD_EXIT_APP",
                                    "0xFB",
                                    ""
                                ],
                                [
                                    "CMD_CUR_APP_INFO",
                                    "0xFC",
                                    ""
                                ],
                                [
                                    "CMD_APP_INFO",
                                    "0xFD",
                                    ""
                                ],
                                [
                                    "CMD_KEY",
                                    "0xFE",
                                    ""
                                ],
                                [
                                    "CMD_TOUCH",
                                    "0xFF",
                                    ""
                                ]
                            ],
                            "def": "enum CMD\n        {\n            CMD_APP_MAX = 0xC8,     //  200, max app custom CMD value should < CMD_APP_MAX\n\n            CMD_SET_REPORT   = 0xF8, // set auto upload data mode\n            CMD_APP_LIST     = 0xF9,\n            CMD_START_APP    = 0xFA,\n            CMD_EXIT_APP     = 0xFB,\n            CMD_CUR_APP_INFO = 0xFC,\n            CMD_APP_INFO     = 0xFD,\n            CMD_KEY          = 0xFE,\n            CMD_TOUCH        = 0xFF,\n        }"
                        },
                        "FLAGS": {
                            "type": "enum",
                            "name": "FLAGS",
                            "doc": {
                                "brief": "protocol flags, more doc see MaixCDK document's convention doc",
                                "maixpy": "maix.protocol.FLAGS",
                                "py_doc": "protocol flags, more doc see MaixCDK document's convention doc"
                            },
                            "values": [
                                [
                                    "FLAG_REQ",
                                    "0x00",
                                    ""
                                ],
                                [
                                    "FLAG_RESP",
                                    "0x80",
                                    ""
                                ],
                                [
                                    "FLAG_IS_RESP_MASK",
                                    "0x80",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_OK",
                                    "0x40",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_ERR",
                                    "0x00",
                                    ""
                                ],
                                [
                                    "FLAG_RESP_OK_MASK",
                                    "0x40",
                                    ""
                                ],
                                [
                                    "FLAG_REPORT",
                                    "0x20",
                                    ""
                                ],
                                [
                                    "FLAG_REPORT_MASK",
                                    "0x20",
                                    ""
                                ],
                                [
                                    "FLAG_VERSION_MASK",
                                    "0x03",
                                    ""
                                ]
                            ],
                            "def": "enum FLAGS\n        {\n            FLAG_REQ = 0x00,\n            FLAG_RESP = 0x80,\n            FLAG_IS_RESP_MASK = 0x80,\n\n            FLAG_RESP_OK = 0x40,\n            FLAG_RESP_ERR = 0x00,\n            FLAG_RESP_OK_MASK = 0x40,\n\n            FLAG_REPORT = 0x20,\n            FLAG_REPORT_MASK = 0x20,\n\n            FLAG_VERSION_MASK = 0x03\n        }"
                        },
                        "MSG": {
                            "type": "class",
                            "name": "MSG",
                            "doc": {
                                "brief": "protocol msg",
                                "maixpy": "maix.protocol.MSG",
                                "py_doc": "protocol msg"
                            },
                            "members": {
                                "version": {
                                    "type": "var",
                                    "name": "version",
                                    "doc": {
                                        "brief": "protocol version",
                                        "maixpy": "maix.protocol.MSG.version",
                                        "py_doc": "protocol version"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t version"
                                },
                                "resp_ok": {
                                    "type": "var",
                                    "name": "resp_ok",
                                    "doc": {
                                        "brief": "Indicate response message type, true means CMD valid and the CMD processed correctly, (only for response msg)",
                                        "maixpy": "maix.protocol.MSG.resp_ok",
                                        "py_doc": "Indicate response message type, true means CMD valid and the CMD processed correctly, (only for response msg)"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t resp_ok"
                                },
                                "has_been_replied": {
                                    "type": "var",
                                    "name": "has_been_replied{false}",
                                    "doc": {
                                        "brief": "Flag whether CMD has been processed and responded to CMD sender.\\nE.g. CMD CMD_START_APP will be automatically processed in CommProtocol.get_msg function,\\nso the return msg will set this flag to true.",
                                        "maixpy": "maix.protocol.MSG.has_been_replied",
                                        "py_doc": "Flag whether CMD has been processed and responded to CMD sender.\nE.g. CMD CMD_START_APP will be automatically processed in CommProtocol.get_msg function,\nso the return msg will set this flag to true."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool has_been_replied{false}"
                                },
                                "cmd": {
                                    "type": "var",
                                    "name": "cmd",
                                    "doc": {
                                        "brief": "CMD value",
                                        "maixpy": "maix.protocol.MSG.cmd",
                                        "py_doc": "CMD value"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "uint8_t cmd"
                                },
                                "is_resp": {
                                    "type": "var",
                                    "name": "is_resp",
                                    "doc": {
                                        "brief": "message is response or not, contrast with is_req",
                                        "maixpy": "maix.protocol.MSG.is_resp",
                                        "py_doc": "message is response or not, contrast with is_req"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool is_resp"
                                },
                                "body_len": {
                                    "type": "var",
                                    "name": "body_len",
                                    "doc": {
                                        "brief": "Message body length, read only, use set_body() to update",
                                        "attention": "DO NOT manually change this value",
                                        "maixpy": "maix.protocol.MSG.body_len",
                                        "py_doc": "Message body length, read only, use set_body() to update"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int body_len"
                                },
                                "encode_resp_ok": {
                                    "type": "func",
                                    "name": "encode_resp_ok",
                                    "doc": {
                                        "brief": "Encode response ok(success) message",
                                        "param": {
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_resp_ok",
                                        "py_doc": "Encode response ok(success) message\n\nArgs:\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_ok(Bytes *body = nullptr)",
                                    "py_def": "def encode_resp_ok(*args, **kwargs)"
                                },
                                "encode_report": {
                                    "type": "func",
                                    "name": "encode_report",
                                    "doc": {
                                        "brief": "Encode proactively report message",
                                        "param": {
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_report",
                                        "py_doc": "Encode proactively report message\n\nArgs:\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_report(Bytes *body = nullptr)",
                                    "py_def": "def encode_report(*args, **kwargs)"
                                },
                                "encode_resp_err": {
                                    "type": "func",
                                    "name": "encode_resp_err",
                                    "doc": {
                                        "brief": "Encode response error message",
                                        "param": {
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.MSG.encode_resp_err",
                                        "py_doc": "Encode response error message\n\nArgs:\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_err(err::Err code, const std::string &msg)",
                                    "py_def": "def encode_resp_err(*args, **kwargs)"
                                },
                                "set_body": {
                                    "type": "func",
                                    "name": "set_body",
                                    "doc": {
                                        "brief": "Update message body",
                                        "param": {
                                            "body_new": "new body data"
                                        },
                                        "maixpy": "maix.protocol.MSG.set_body",
                                        "py_doc": "Update message body\n\nArgs:\n  - body_new: new body data\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes *",
                                            "body_new",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_body(Bytes *body_new)",
                                    "py_def": "def set_body(self, body_new: maix.Bytes(bytes)) -> None"
                                },
                                "get_body": {
                                    "type": "func",
                                    "name": "get_body",
                                    "doc": {
                                        "brief": "Get message body",
                                        "return": "message body, bytes type",
                                        "maixpy": "maix.protocol.MSG.get_body",
                                        "py_doc": "Get message body\n\nReturns: message body, bytes type\n"
                                    },
                                    "args": [],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *get_body()",
                                    "py_def": "def get_body(*args, **kwargs)"
                                }
                            },
                            "def": "class MSG"
                        },
                        "Protocol": {
                            "type": "class",
                            "name": "Protocol",
                            "doc": {
                                "brief": "Communicate protocol",
                                "maixpy": "maix.protocol.Protocol",
                                "py_doc": "Communicate protocol"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Protocol",
                                    "doc": {
                                        "brief": "Construct a new Protocol object",
                                        "param": {
                                            "buff_size": "Data queue buffer size"
                                        },
                                        "maixpy": "maix.protocol.Protocol.__init__",
                                        "maixcdk": "maix.protocol.Protocol.Protocol",
                                        "py_doc": "Construct a new Protocol object\n\nArgs:\n  - buff_size: Data queue buffer size\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "buff_size",
                                            "1024"
                                        ],
                                        [
                                            "uint32_t",
                                            "header",
                                            "maix::protocol::HEADER"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Protocol(int buff_size = 1024, uint32_t header=maix::protocol::HEADER)",
                                    "py_def": "def __init__(self, buff_size: int = 1024, header: int = 3148663466) -> None"
                                },
                                "buff_size": {
                                    "type": "func",
                                    "name": "buff_size",
                                    "doc": {
                                        "brief": "Data queue buffer size",
                                        "maixpy": "maix.protocol.Protocol.buff_size",
                                        "py_doc": "Data queue buffer size"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int buff_size()",
                                    "py_def": "def buff_size(self) -> int"
                                },
                                "push_data": {
                                    "type": "func",
                                    "name": "push_data",
                                    "doc": {
                                        "brief": "Add data to data queue",
                                        "param": {
                                            "new_data": "new data"
                                        },
                                        "return": "error code, maybe err.Err.ERR_BUFF_FULL",
                                        "maixpy": "maix.protocol.Protocol.push_data",
                                        "py_doc": "Add data to data queue\n\nArgs:\n  - new_data: new data\n\n\nReturns: error code, maybe err.Err.ERR_BUFF_FULL\n"
                                    },
                                    "args": [
                                        [
                                            "const Bytes *",
                                            "new_data",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err push_data(const Bytes *new_data)",
                                    "py_def": "def push_data(self, new_data: maix.Bytes(bytes)) -> maix.err.Err"
                                },
                                "decode": {
                                    "type": "func",
                                    "name": "decode",
                                    "doc": {
                                        "brief": "Decode data in data queue and return a message",
                                        "param": {
                                            "new_data": "new data add to data queue, if null, only decode."
                                        },
                                        "return": "decoded message, if nullptr, means no message decoded.",
                                        "maixpy": "maix.protocol.Protocol.decode",
                                        "py_doc": "Decode data in data queue and return a message\n\nArgs:\n  - new_data: new data add to data queue, if null, only decode.\n\n\nReturns: decoded message, if nullptr, means no message decoded.\n"
                                    },
                                    "args": [
                                        [
                                            "const Bytes *",
                                            "new_data",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "protocol::MSG*",
                                    "static": false,
                                    "def": "protocol::MSG *decode(const Bytes *new_data = nullptr)",
                                    "py_def": "def decode(self, new_data: maix.Bytes(bytes) = None) -> MSG"
                                },
                                "encode_resp_ok": {
                                    "type": "func",
                                    "name": "encode_resp_ok",
                                    "doc": {
                                        "brief": "Encode response ok(success) message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "response body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_resp_ok",
                                        "py_doc": "Encode response ok(success) message to buffer\n\nArgs:\n  - cmd: CMD value\n  - body: response body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_ok(uint8_t cmd, Bytes *body = nullptr)",
                                    "py_def": "def encode_resp_ok(*args, **kwargs)"
                                },
                                "encode_report": {
                                    "type": "func",
                                    "name": "encode_report",
                                    "doc": {
                                        "brief": "Encode proactively report message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "body": "report body, can be null"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_report",
                                        "py_doc": "Encode proactively report message to buffer\n\nArgs:\n  - cmd: CMD value\n  - body: report body, can be null\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "Bytes *",
                                            "body",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_report(uint8_t cmd, Bytes *body = nullptr)",
                                    "py_def": "def encode_report(*args, **kwargs)"
                                },
                                "encode_resp_err": {
                                    "type": "func",
                                    "name": "encode_resp_err",
                                    "doc": {
                                        "brief": "Encode response error message to buffer",
                                        "param": {
                                            "cmd": "CMD value",
                                            "code": "error code",
                                            "msg": "error message"
                                        },
                                        "return": "encoded data, if nullptr, means error, and the error code is -err.Err",
                                        "maixpy": "maix.protocol.Protocol.encode_resp_err",
                                        "py_doc": "Encode response error message to buffer\n\nArgs:\n  - cmd: CMD value\n  - code: error code\n  - msg: error message\n\n\nReturns: encoded data, if nullptr, means error, and the error code is -err.Err\n"
                                    },
                                    "args": [
                                        [
                                            "uint8_t",
                                            "cmd",
                                            null
                                        ],
                                        [
                                            "err::Err",
                                            "code",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "msg",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": false,
                                    "def": "Bytes *encode_resp_err(uint8_t cmd, err::Err code, const std::string &msg)",
                                    "py_def": "def encode_resp_err(*args, **kwargs)"
                                }
                            },
                            "def": "class Protocol"
                        },
                        "crc16_IBM": {
                            "type": "func",
                            "name": "crc16_IBM",
                            "doc": {
                                "brief": "CRC16-IBM",
                                "param": {
                                    "data": "data, bytes type."
                                },
                                "return": "CRC16-IBM value, uint16_t type.",
                                "maixpy": "maix.protocol.crc16_IBM",
                                "py_doc": "CRC16-IBM\n\nArgs:\n  - data: data, bytes type.\n\n\nReturns: CRC16-IBM value, uint16_t type.\n"
                            },
                            "args": [
                                [
                                    "const Bytes *",
                                    "data",
                                    null
                                ]
                            ],
                            "ret_type": "uint16_t",
                            "static": false,
                            "def": "uint16_t crc16_IBM(const Bytes *data)",
                            "py_def": "def crc16_IBM(data: maix.Bytes(bytes)) -> int"
                        }
                    },
                    "auto_add": true
                },
                "time": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.time module"
                    },
                    "members": {
                        "time": {
                            "type": "func",
                            "name": "time",
                            "doc": {
                                "brief": "Get current time in s",
                                "return": "current time in s, double type",
                                "attention": "If board have no RTC battery, when bootup and connect to network,\nsystem will automatically sync time by NTP, will cause time() have big change,\ne.g. before NTP: 10(s), after: 1718590639.5149617(s).\nIf you want to calculate time interval, please use ticks_s().",
                                "maixpy": "maix.time.time",
                                "py_doc": "Get current time in s\n\nReturns: current time in s, double type\n"
                            },
                            "args": [],
                            "ret_type": "double",
                            "static": false,
                            "def": "double time()",
                            "py_def": "def time() -> float"
                        },
                        "time_ms": {
                            "type": "func",
                            "name": "time_ms",
                            "doc": {
                                "brief": "Get current time in ms",
                                "return": "current time in ms, uint64_t type",
                                "attention": "If board have no RTC battery, when bootup and connect to network,\nsystem will automatically sync time by NTP, will cause time() have big change,\ne.g. before NTP: 10000(ms), after: 1718590639000(ms)\nIf you want to calculate time interval, please use ticks_ms().",
                                "maixpy": "maix.time.time_ms",
                                "py_doc": "Get current time in ms\n\nReturns: current time in ms, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_ms()",
                            "py_def": "def time_ms() -> int"
                        },
                        "time_s": {
                            "type": "func",
                            "name": "time_s",
                            "doc": {
                                "brief": "Get current time in s",
                                "return": "current time in s, uint64_t type",
                                "attention": "If board have no RTC battery, when bootup and connect to network,\nsystem will automatically sync time by NTP, will cause time() have big change,\ne.g. before NTP: 10(s), after: 1718590639(s)",
                                "maixpy": "maix.time.time_s",
                                "py_doc": "Get current time in s\n\nReturns: current time in s, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_s()",
                            "py_def": "def time_s() -> int"
                        },
                        "time_us": {
                            "type": "func",
                            "name": "time_us",
                            "doc": {
                                "brief": "Get current time in us",
                                "return": "current time in us, uint64_t type",
                                "attention": "If board have no RTC battery, when bootup and connect to network,\nsystem will automatically sync time by NTP, will cause time() have big change,\ne.g. before NTP: 10000000(us), after: 1718590639000000(s)\nIf you want to calculate time interval, please use ticks_us().",
                                "maixpy": "maix.time.time_us",
                                "py_doc": "Get current time in us\n\nReturns: current time in us, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t time_us()",
                            "py_def": "def time_us() -> int"
                        },
                        "time_diff": {
                            "type": "func",
                            "name": "time_diff",
                            "doc": {
                                "brief": "Calculate time difference in s.",
                                "param": {
                                    "last": "last time",
                                    "now": "current time, can be -1 if use current time"
                                },
                                "return": "time difference",
                                "attention": "If board have no RTC battery, when bootup and connect to network,\nsystem will automatically sync time by NTP, will cause time() have big change, and lead to big value.\ne.g. before NTP: 1(s), after: 1718590500(s)\nIf you want to calculate time interval, please use ticks_diff().",
                                "maixpy": "maix.time.time_diff",
                                "py_doc": "Calculate time difference in s.\n\nArgs:\n  - last: last time\n  - now: current time, can be -1 if use current time\n\n\nReturns: time difference\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "last",
                                    null
                                ],
                                [
                                    "double",
                                    "now",
                                    "-1"
                                ]
                            ],
                            "ret_type": "double",
                            "static": false,
                            "def": "double time_diff(double last, double now = -1)",
                            "py_def": "def time_diff(last: float, now: float = -1) -> float"
                        },
                        "ticks_s": {
                            "type": "func",
                            "name": "ticks_s",
                            "doc": {
                                "brief": "Get current time in s since bootup",
                                "return": "current time in s, double type",
                                "maixpy": "maix.time.ticks_s",
                                "py_doc": "Get current time in s since bootup\n\nReturns: current time in s, double type\n"
                            },
                            "args": [],
                            "ret_type": "double",
                            "static": false,
                            "def": "double ticks_s()",
                            "py_def": "def ticks_s() -> float"
                        },
                        "ticks_ms": {
                            "type": "func",
                            "name": "ticks_ms",
                            "doc": {
                                "brief": "Get current time in ms since bootup",
                                "return": "current time in ms, uint64_t type",
                                "maixpy": "maix.time.ticks_ms",
                                "py_doc": "Get current time in ms since bootup\n\nReturns: current time in ms, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t ticks_ms()",
                            "py_def": "def ticks_ms() -> int"
                        },
                        "ticks_us": {
                            "type": "func",
                            "name": "ticks_us",
                            "doc": {
                                "brief": "Get current time in us since bootup",
                                "return": "current time in us, uint64_t type",
                                "maixpy": "maix.time.ticks_us",
                                "py_doc": "Get current time in us since bootup\n\nReturns: current time in us, uint64_t type\n"
                            },
                            "args": [],
                            "ret_type": "uint64_t",
                            "static": false,
                            "def": "uint64_t ticks_us()",
                            "py_def": "def ticks_us() -> int"
                        },
                        "ticks_diff": {
                            "type": "func",
                            "name": "ticks_diff",
                            "doc": {
                                "brief": "Calculate time difference in s.",
                                "param": {
                                    "last": "last time",
                                    "now": "current time, can be -1 if use current time"
                                },
                                "return": "time difference",
                                "maixpy": "maix.time.ticks_diff",
                                "py_doc": "Calculate time difference in s.\n\nArgs:\n  - last: last time\n  - now: current time, can be -1 if use current time\n\n\nReturns: time difference\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "last",
                                    null
                                ],
                                [
                                    "double",
                                    "now",
                                    "-1"
                                ]
                            ],
                            "ret_type": "double",
                            "static": false,
                            "def": "double ticks_diff(double last, double now = -1)",
                            "py_def": "def ticks_diff(last: float, now: float = -1) -> float"
                        },
                        "sleep": {
                            "type": "func",
                            "name": "sleep",
                            "doc": {
                                "brief": "Sleep seconds",
                                "param": {
                                    "s": "seconds, double type"
                                },
                                "maixpy": "maix.time.sleep",
                                "py_doc": "Sleep seconds\n\nArgs:\n  - s: seconds, double type\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "s",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep(double s)"
                        },
                        "sleep_ms": {
                            "type": "func",
                            "name": "sleep_ms",
                            "doc": {
                                "brief": "Sleep milliseconds",
                                "param": {
                                    "ms": "milliseconds, uint64_t type"
                                },
                                "maixpy": "maix.time.sleep_ms",
                                "py_doc": "Sleep milliseconds\n\nArgs:\n  - ms: milliseconds, uint64_t type\n"
                            },
                            "args": [
                                [
                                    "uint64_t",
                                    "ms",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep_ms(uint64_t ms)"
                        },
                        "sleep_us": {
                            "type": "func",
                            "name": "sleep_us",
                            "doc": {
                                "brief": "Sleep microseconds",
                                "param": {
                                    "us": "microseconds, uint64_t type"
                                },
                                "maixpy": "maix.time.sleep_us",
                                "py_doc": "Sleep microseconds\n\nArgs:\n  - us: microseconds, uint64_t type\n"
                            },
                            "args": [
                                [
                                    "uint64_t",
                                    "us",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void sleep_us(uint64_t us)"
                        },
                        "fps": {
                            "type": "func",
                            "name": "fps",
                            "doc": {
                                "brief": "Calculate FPS since last call this method.\\nAttention, this method is not multi thread safe, only call this method in one threads.\\nIf you want to use in multi threads, please use time.FPS class.\\nFPS is average value of recent n(buff_len) times, and you can call fps_set_buff_len(10) to change buffer length, default is 20.\\nMultiple invoke this function will calculate fps between two invoke, and you can also call fps_start() fisrt to manually assign fps calulate start point.",
                                "return": "float type, current fps since last call this method",
                                "maixpy": "maix.time.fps",
                                "py_doc": "Calculate FPS since last call this method.\nAttention, this method is not multi thread safe, only call this method in one threads.\nIf you want to use in multi threads, please use time.FPS class.\nFPS is average value of recent n(buff_len) times, and you can call fps_set_buff_len(10) to change buffer length, default is 20.\nMultiple invoke this function will calculate fps between two invoke, and you can also call fps_start() fisrt to manually assign fps calulate start point.\n\nReturns: float type, current fps since last call this method\n"
                            },
                            "args": [],
                            "ret_type": "float",
                            "static": false,
                            "def": "float fps()",
                            "py_def": "def fps() -> float"
                        },
                        "fps_start": {
                            "type": "func",
                            "name": "fps_start",
                            "doc": {
                                "brief": "Manually set fps calculation start point, then you can call fps() function to calculate fps between fps_start() and fps().",
                                "maixpy": "maix.time.fps_start",
                                "py_doc": "Manually set fps calculation start point, then you can call fps() function to calculate fps between fps_start() and fps()."
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void fps_start()",
                            "py_def": "def fps_start() -> None"
                        },
                        "fps_set_buff_len": {
                            "type": "func",
                            "name": "fps_set_buff_len",
                            "doc": {
                                "brief": "Set fps method buffer length, by default the buffer length is 10.",
                                "param": {
                                    "len": "Buffer length to store recent fps value."
                                },
                                "maixpy": "maix.time.fps_set_buff_len",
                                "py_doc": "Set fps method buffer length, by default the buffer length is 10.\n\nArgs:\n  - len: Buffer length to store recent fps value.\n"
                            },
                            "args": [
                                [
                                    "int",
                                    "len",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void fps_set_buff_len(int len)",
                            "py_def": "def fps_set_buff_len(len: int) -> None"
                        },
                        "FPS": {
                            "type": "class",
                            "name": "FPS",
                            "doc": {
                                "brief": "FPS class to use average filter to calculate FPS.",
                                "maixpy": "maix.time.FPS",
                                "py_doc": "FPS class to use average filter to calculate FPS."
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "FPS",
                                    "doc": {
                                        "brief": "FPS class constructor",
                                        "param": {
                                            "buff_len": "Average buffer length, default 20, that is, fps() function will return the average fps in recent buff_len times fps."
                                        },
                                        "maixpy": "maix.time.FPS.__init__",
                                        "maixcdk": "maix.time.FPS.FPS",
                                        "py_doc": "FPS class constructor\n\nArgs:\n  - buff_len: Average buffer length, default 20, that is, fps() function will return the average fps in recent buff_len times fps.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "buff_len",
                                            "20"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "FPS(int buff_len = 20)",
                                    "py_def": "def __init__(self, buff_len: int = 20) -> None"
                                },
                                "start": {
                                    "type": "func",
                                    "name": "start",
                                    "doc": {
                                        "brief": "Manually set fps calculation start point, then you can call fps() function to calculate fps between start() and fps().",
                                        "maixpy": "maix.time.FPS.start",
                                        "py_doc": "Manually set fps calculation start point, then you can call fps() function to calculate fps between start() and fps()."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void start()",
                                    "py_def": "def start(self) -> None"
                                },
                                "fps": {
                                    "type": "func",
                                    "name": "fps",
                                    "doc": {
                                        "brief": "The same as end function.",
                                        "return": "float type, current fps since last call this method",
                                        "maixpy": "maix.time.FPS.fps",
                                        "py_doc": "The same as end function.\n\nReturns: float type, current fps since last call this method\n"
                                    },
                                    "args": [],
                                    "ret_type": "float",
                                    "static": false,
                                    "def": "float fps()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "end",
                                            "doc": {
                                                "brief": "Calculate FPS since last call this method.\\nFPS is average value of recent n(buff_len) times, and you can call fps_set_buff_len(10) to change buffer length, default is 20.\\nMultiple invoke this function will calculate fps between two invoke, and you can also call fps_start() fisrt to manually assign fps calulate start point.",
                                                "return": "float type, current fps since last call this method",
                                                "maixpy": "maix.time.FPS.fps",
                                                "py_doc": "Calculate FPS since last call this method.\nFPS is average value of recent n(buff_len) times, and you can call fps_set_buff_len(10) to change buffer length, default is 20.\nMultiple invoke this function will calculate fps between two invoke, and you can also call fps_start() fisrt to manually assign fps calulate start point.\n\nReturns: float type, current fps since last call this method\n"
                                            },
                                            "args": [],
                                            "ret_type": "inline float",
                                            "static": false,
                                            "def": "inline float end()"
                                        }
                                    ],
                                    "py_def": "def fps(self) -> float"
                                },
                                "set_buff_len": {
                                    "type": "func",
                                    "name": "set_buff_len",
                                    "doc": {
                                        "brief": "Set fps method buffer length, by default the buffer length is 10.",
                                        "param": {
                                            "len": "Buffer length to store recent fps value."
                                        },
                                        "maixpy": "maix.time.FPS.set_buff_len",
                                        "py_doc": "Set fps method buffer length, by default the buffer length is 10.\n\nArgs:\n  - len: Buffer length to store recent fps value.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "len",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_buff_len(int len)",
                                    "py_def": "def set_buff_len(self, len: int) -> None"
                                }
                            },
                            "def": "class FPS"
                        },
                        "DateTime": {
                            "type": "class",
                            "name": "DateTime",
                            "doc": {
                                "brief": "Date and time class",
                                "maixpy": "maix.time.DateTime",
                                "py_doc": "Date and time class"
                            },
                            "members": {
                                "year": {
                                    "type": "var",
                                    "name": "year",
                                    "doc": {
                                        "brief": "Year",
                                        "maixpy": "maix.time.DateTime.year",
                                        "py_doc": "Year"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int year"
                                },
                                "month": {
                                    "type": "var",
                                    "name": "month",
                                    "doc": {
                                        "brief": "Month, 1~12",
                                        "maixpy": "maix.time.DateTime.month",
                                        "py_doc": "Month, 1~12"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int month"
                                },
                                "day": {
                                    "type": "var",
                                    "name": "day",
                                    "doc": {
                                        "brief": "Day",
                                        "maixpy": "maix.time.DateTime.day",
                                        "py_doc": "Day"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int day"
                                },
                                "hour": {
                                    "type": "var",
                                    "name": "hour",
                                    "doc": {
                                        "brief": "Hour",
                                        "maixpy": "maix.time.DateTime.hour",
                                        "py_doc": "Hour"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int hour"
                                },
                                "minute": {
                                    "type": "var",
                                    "name": "minute",
                                    "doc": {
                                        "brief": "Minute",
                                        "maixpy": "maix.time.DateTime.minute",
                                        "py_doc": "Minute"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int minute"
                                },
                                "second": {
                                    "type": "var",
                                    "name": "second",
                                    "doc": {
                                        "brief": "Second",
                                        "maixpy": "maix.time.DateTime.second",
                                        "py_doc": "Second"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int second"
                                },
                                "microsecond": {
                                    "type": "var",
                                    "name": "microsecond",
                                    "doc": {
                                        "brief": "Microsecond",
                                        "maixpy": "maix.time.DateTime.microsecond",
                                        "py_doc": "Microsecond"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int microsecond"
                                },
                                "yearday": {
                                    "type": "var",
                                    "name": "yearday",
                                    "doc": {
                                        "brief": "Year day",
                                        "maixpy": "maix.time.DateTime.yearday",
                                        "py_doc": "Year day"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int yearday"
                                },
                                "weekday": {
                                    "type": "var",
                                    "name": "weekday",
                                    "doc": {
                                        "brief": "Weekday, 0 is Monday, 6 is Sunday",
                                        "maixpy": "maix.time.DateTime.weekday",
                                        "py_doc": "Weekday, 0 is Monday, 6 is Sunday"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int weekday"
                                },
                                "zone": {
                                    "type": "var",
                                    "name": "zone",
                                    "doc": {
                                        "brief": "Time zone",
                                        "maixpy": "maix.time.DateTime.zone",
                                        "py_doc": "Time zone"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float zone"
                                },
                                "zone_name": {
                                    "type": "var",
                                    "name": "zone_name",
                                    "doc": {
                                        "brief": "Time zone name",
                                        "maixpy": "maix.time.DateTime.zone_name",
                                        "py_doc": "Time zone name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string zone_name"
                                },
                                "__init__": {
                                    "type": "func",
                                    "name": "DateTime",
                                    "doc": {
                                        "brief": "Constructor",
                                        "param": {
                                            "year": "year",
                                            "month": "month",
                                            "day": "day",
                                            "hour": "hour",
                                            "minute": "minute",
                                            "second": "second",
                                            "microsecond": "microsecond",
                                            "yearday": "year day",
                                            "weekday": "weekday",
                                            "zone": "time zone"
                                        },
                                        "maixcdk": "maix.time.DateTime.DateTime",
                                        "maixpy": "maix.time.DateTime.__init__",
                                        "py_doc": "Constructor\n\nArgs:\n  - year: year\n  - month: month\n  - day: day\n  - hour: hour\n  - minute: minute\n  - second: second\n  - microsecond: microsecond\n  - yearday: year day\n  - weekday: weekday\n  - zone: time zone\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "year",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "month",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "day",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "hour",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "minute",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "second",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "microsecond",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "yearday",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "weekday",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "zone",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "DateTime(int year = 0, int month = 0, int day = 0, int hour = 0, int minute = 0, int second = 0, int microsecond = 0, int yearday = 0, int weekday = 0, int zone = 0)",
                                    "py_def": "def __init__(self, year: int = 0, month: int = 0, day: int = 0, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0, yearday: int = 0, weekday: int = 0, zone: int = 0) -> None"
                                },
                                "strftime": {
                                    "type": "func",
                                    "name": "strftime",
                                    "doc": {
                                        "brief": "Convert to string",
                                        "return": "date time string",
                                        "maixpy": "maix.time.DateTime.strftime",
                                        "py_doc": "Convert to string\n\nReturns: date time string\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "format",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string strftime(const std::string &format)",
                                    "py_def": "def strftime(self, format: str) -> str"
                                },
                                "timestamp": {
                                    "type": "func",
                                    "name": "timestamp",
                                    "doc": {
                                        "brief": "Convert to float timestamp",
                                        "return": "float timestamp",
                                        "maixpy": "maix.time.DateTime.timestamp",
                                        "py_doc": "Convert to float timestamp\n\nReturns: float timestamp\n"
                                    },
                                    "args": [],
                                    "ret_type": "double",
                                    "static": false,
                                    "def": "double timestamp()",
                                    "py_def": "def timestamp(self) -> float"
                                }
                            },
                            "def": "class DateTime"
                        },
                        "now": {
                            "type": "func",
                            "name": "now",
                            "doc": {
                                "brief": "Get current UTC date and time",
                                "return": "current date and time, DateTime type",
                                "maixpy": "maix.time.now",
                                "py_doc": "Get current UTC date and time\n\nReturns: current date and time, DateTime type\n"
                            },
                            "args": [],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *now()",
                            "py_def": "def now() -> DateTime"
                        },
                        "localtime": {
                            "type": "func",
                            "name": "localtime",
                            "doc": {
                                "brief": "Get local time",
                                "return": "local time, DateTime type",
                                "maixpy": "maix.time.localtime",
                                "py_doc": "Get local time\n\nReturns: local time, DateTime type\n"
                            },
                            "args": [],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *localtime()",
                            "py_def": "def localtime() -> DateTime"
                        },
                        "strptime": {
                            "type": "func",
                            "name": "strptime",
                            "doc": {
                                "brief": "DateTime from string",
                                "param": {
                                    "str": "date time string",
                                    "format": "date time format"
                                },
                                "return": "DateTime",
                                "maixpy": "maix.time.strptime",
                                "py_doc": "DateTime from string\n\nArgs:\n  - str: date time string\n  - format: date time format\n\n\nReturns: DateTime\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "str",
                                    null
                                ],
                                [
                                    "const std::string &",
                                    "format",
                                    null
                                ]
                            ],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *strptime(const std::string &str, const std::string &format)",
                            "py_def": "def strptime(str: str, format: str) -> DateTime"
                        },
                        "gmtime": {
                            "type": "func",
                            "name": "gmtime",
                            "doc": {
                                "brief": "timestamp to DateTime(time zone is UTC (value 0))",
                                "param": {
                                    "timestamp": "double timestamp"
                                },
                                "return": "DateTime",
                                "maixpy": "maix.time.gmtime",
                                "py_doc": "timestamp to DateTime(time zone is UTC (value 0))\n\nArgs:\n  - timestamp: double timestamp\n\n\nReturns: DateTime\n"
                            },
                            "args": [
                                [
                                    "double",
                                    "timestamp",
                                    null
                                ]
                            ],
                            "ret_type": "time::DateTime*",
                            "static": false,
                            "def": "time::DateTime *gmtime(double timestamp)",
                            "py_def": "def gmtime(timestamp: float) -> DateTime"
                        },
                        "timezone": {
                            "type": "func",
                            "name": "timezone",
                            "doc": {
                                "brief": "Set or get timezone",
                                "param": {
                                    "timezone": "string type, can be empty and default to empty, if empty, only return crrent timezone, a \"region/city\" string, e.g. Asia/Shanghai, Etc/UTC, you can get all by list_timezones function."
                                },
                                "return": "string type, return current timezone setting.",
                                "attention": "when set new timezone, time setting not take effect in this process for some API, so you need to restart program.",
                                "maixpy": "maix.time.timezone",
                                "py_doc": "Set or get timezone\n\nArgs:\n  - timezone: string type, can be empty and default to empty, if empty, only return crrent timezone, a \"region/city\" string, e.g. Asia/Shanghai, Etc/UTC, you can get all by list_timezones function.\n\n\nReturns: string type, return current timezone setting.\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "timezone",
                                    "\"\""
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string timezone(const std::string &timezone = \"\")",
                            "overload": [
                                {
                                    "type": "func",
                                    "name": "timezone2",
                                    "doc": {
                                        "brief": "Set or get timezone",
                                        "param": {
                                            "region": "string type, which region to set, can be empty means only get current, default empty.",
                                            "city": "string type, which city to set, can be empty means only get current, default empty."
                                        },
                                        "return": "list type, return current timezone setting, first is region, second is city.",
                                        "attention": "when set new timezone, time setting not take effect in this process for some API, so you need to restart program.",
                                        "maixpy": "maix.time.timezone",
                                        "py_doc": "Set or get timezone\n\nArgs:\n  - region: string type, which region to set, can be empty means only get current, default empty.\n  - city: string type, which city to set, can be empty means only get current, default empty.\n\n\nReturns: list type, return current timezone setting, first is region, second is city.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "region",
                                            "\"\""
                                        ],
                                        [
                                            "const std::string &",
                                            "city",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> timezone2(const std::string &region = \"\", const std::string &city = \"\")"
                                }
                            ],
                            "py_def": "def timezone(timezone: str = '') -> str"
                        },
                        "list_timezones": {
                            "type": "func",
                            "name": "list_timezones",
                            "doc": {
                                "brief": "List all timezone info",
                                "return": "A dict with key are regions, and value are region's cities.",
                                "maixpy": "maix.time.list_timezones",
                                "py_doc": "List all timezone info\n\nReturns: A dict with key are regions, and value are region's cities.\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, std::vector<std::string>>",
                            "static": false,
                            "def": "std::map<std::string, std::vector<std::string>> list_timezones()",
                            "py_def": "def list_timezones() -> dict[str, list[str]]"
                        },
                        "ntp_timetuple": {
                            "type": "func",
                            "name": "ntp_timetuple",
                            "doc": {
                                "brief": "Retrieves time from an NTP server\\nThis function fetches the current time from the specified NTP server and port,\\nreturning a tuple containing the time details.",
                                "param": {
                                    "host": "The hostname or IP address of the NTP server.",
                                    "port": "The port number of the NTP server. Use -1 for the default port 123.",
                                    "retry": "The number of retry attempts. Must be at least 1.",
                                    "timeout_ms": "The timeout duration in milliseconds. Must be non-negative."
                                },
                                "return": "A list of 6 elements: [year, month, day, hour, minute, second]",
                                "maixpy": "maix.time.ntp_timetuple",
                                "py_doc": "Retrieves time from an NTP server\nThis function fetches the current time from the specified NTP server and port,\nreturning a tuple containing the time details.\n\nArgs:\n  - host: The hostname or IP address of the NTP server.\n  - port: The port number of the NTP server. Use -1 for the default port 123.\n  - retry: The number of retry attempts. Must be at least 1.\n  - timeout_ms: The timeout duration in milliseconds. Must be non-negative.\n\n\nReturns: A list of 6 elements: [year, month, day, hour, minute, second]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "host",
                                    null
                                ],
                                [
                                    "int",
                                    "port",
                                    "-1"
                                ],
                                [
                                    "uint8_t",
                                    "retry",
                                    "3"
                                ],
                                [
                                    "int",
                                    "timeout_ms",
                                    "0"
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> ntp_timetuple(std::string host, int port=-1, uint8_t retry=3, int timeout_ms=0)",
                            "py_def": "def ntp_timetuple(host: str, port: int = -1, retry: int = 3, timeout_ms: int = 0) -> list[int]"
                        },
                        "ntp_timetuple_with_config": {
                            "type": "func",
                            "name": "ntp_timetuple_with_config",
                            "doc": {
                                "brief": "Retrieves time from an NTP server using a configuration file\\nThis function reads the configuration from a YAML file to fetch the current time\\nfrom a list of specified NTP servers, returning a tuple containing the time details.",
                                "param": {
                                    "path": "The path to the YAML configuration file, which should include:\n- Config:\n- retry: Number of retry attempts (must be at least 1)\n- total_timeout_ms: Total timeout duration in milliseconds (must be non-negative)\n- NtpServers:\n- host: Hostname or IP address of the NTP server\n- port: Port number of the NTP server (use 123 for default)\nExample YAML configuration:\nConfig:\n- retry: 3\n- total_timeout_ms: 10000\nNtpServers:\n- host: \"pool.ntp.org\"\nport: 123\n- host: \"time.nist.gov\"\nport: 123\n- host: \"time.windows.com\"\nport: 123"
                                },
                                "return": "A list of 6 elements: [year, month, day, hour, minute, second]",
                                "maixpy": "maix.time.ntp_timetuple_with_config",
                                "py_doc": "Retrieves time from an NTP server using a configuration file\nThis function reads the configuration from a YAML file to fetch the current time\nfrom a list of specified NTP servers, returning a tuple containing the time details.\n\nArgs:\n  - path: The path to the YAML configuration file, which should include:\n- Config:\n- retry: Number of retry attempts (must be at least 1)\n- total_timeout_ms: Total timeout duration in milliseconds (must be non-negative)\n- NtpServers:\n- host: Hostname or IP address of the NTP server\n- port: Port number of the NTP server (use 123 for default)\nExample YAML configuration:\nConfig:\n- retry: 3\n- total_timeout_ms: 10000\nNtpServers:\n- host: \"pool.ntp.org\"\nport: 123\n- host: \"time.nist.gov\"\nport: 123\n- host: \"time.windows.com\"\nport: 123\n\n\nReturns: A list of 6 elements: [year, month, day, hour, minute, second]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> ntp_timetuple_with_config(std::string path)",
                            "py_def": "def ntp_timetuple_with_config(path: str) -> list[int]"
                        },
                        "ntp_sync_sys_time": {
                            "type": "func",
                            "name": "ntp_sync_sys_time",
                            "doc": {
                                "brief": "Retrieves time from an NTP server and synchronizes the system time\\nThis function fetches the current time from the specified NTP server and port,\\nthen synchronizes the system time with the retrieved time.",
                                "param": {
                                    "host": "The hostname or IP address of the NTP server.",
                                    "port": "The port number of the NTP server. Use 123 for the default port.",
                                    "retry": "The number of retry attempts. Must be at least 1.",
                                    "timeout_ms": "The timeout duration in milliseconds. Must be non-negative."
                                },
                                "return": "A list of 6 elements: [year, month, day, hour, minute, second]",
                                "maixpy": "maix.time.ntp_sync_sys_time",
                                "py_doc": "Retrieves time from an NTP server and synchronizes the system time\nThis function fetches the current time from the specified NTP server and port,\nthen synchronizes the system time with the retrieved time.\n\nArgs:\n  - host: The hostname or IP address of the NTP server.\n  - port: The port number of the NTP server. Use 123 for the default port.\n  - retry: The number of retry attempts. Must be at least 1.\n  - timeout_ms: The timeout duration in milliseconds. Must be non-negative.\n\n\nReturns: A list of 6 elements: [year, month, day, hour, minute, second]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "host",
                                    null
                                ],
                                [
                                    "int",
                                    "port",
                                    "-1"
                                ],
                                [
                                    "uint8_t",
                                    "retry",
                                    "3"
                                ],
                                [
                                    "int",
                                    "timeout_ms",
                                    "0"
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> ntp_sync_sys_time(std::string host, int port=-1, uint8_t retry=3, int timeout_ms=0)",
                            "py_def": "def ntp_sync_sys_time(host: str, port: int = -1, retry: int = 3, timeout_ms: int = 0) -> list[int]"
                        },
                        "ntp_sync_sys_time_with_config": {
                            "type": "func",
                            "name": "ntp_sync_sys_time_with_config",
                            "doc": {
                                "brief": "Retrieves time from an NTP server using a configuration file and synchronizes the system time\\nThis function reads the configuration from a YAML file to fetch the current time\\nfrom a list of specified NTP servers, then synchronizes the system time with the retrieved time.",
                                "param": {
                                    "path": "The path to the YAML configuration file, which should include:\n- Config:\n- retry: Number of retry attempts (must be at least 1)\n- total_timeout_ms: Total timeout duration in milliseconds (must be non-negative)\n- NtpServers:\n- host: Hostname or IP address of the NTP server\n- port: Port number of the NTP server (use 123 for default)\nExample YAML configuration:\nConfig:\n- retry: 3\n- total_timeout_ms: 10000\nNtpServers:\n- host: \"pool.ntp.org\"\nport: 123\n- host: \"time.nist.gov\"\nport: 123\n- host: \"time.windows.com\"\nport: 123"
                                },
                                "return": "A vector of integers containing the time details: [year, month, day, hour, minute, second]",
                                "maixpy": "maix.time.ntp_sync_sys_time_with_config",
                                "py_doc": "Retrieves time from an NTP server using a configuration file and synchronizes the system time\nThis function reads the configuration from a YAML file to fetch the current time\nfrom a list of specified NTP servers, then synchronizes the system time with the retrieved time.\n\nArgs:\n  - path: The path to the YAML configuration file, which should include:\n- Config:\n- retry: Number of retry attempts (must be at least 1)\n- total_timeout_ms: Total timeout duration in milliseconds (must be non-negative)\n- NtpServers:\n- host: Hostname or IP address of the NTP server\n- port: Port number of the NTP server (use 123 for default)\nExample YAML configuration:\nConfig:\n- retry: 3\n- total_timeout_ms: 10000\nNtpServers:\n- host: \"pool.ntp.org\"\nport: 123\n- host: \"time.nist.gov\"\nport: 123\n- host: \"time.windows.com\"\nport: 123\n\n\nReturns: A vector of integers containing the time details: [year, month, day, hour, minute, second]\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "path",
                                    null
                                ]
                            ],
                            "ret_type": "std::vector<int>",
                            "static": false,
                            "def": "std::vector<int> ntp_sync_sys_time_with_config(std::string path)",
                            "py_def": "def ntp_sync_sys_time_with_config(path: str) -> list[int]"
                        }
                    },
                    "auto_add": true
                },
                "example": {
                    "type": "module",
                    "doc": {
                        "brief": "example module, this will be maix.example module in MaixPy, maix::example namespace in MaixCDK",
                        "maixpy": "maix.example",
                        "py_doc": "example module, this will be maix.example module in MaixPy, maix::example namespace in MaixCDK"
                    },
                    "members": {
                        "Test": {
                            "type": "class",
                            "name": "Test",
                            "doc": {
                                "brief": "Test class",
                                "maixpy": "maix.example.Test",
                                "py_doc": "Test class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Test",
                                    "doc": {
                                        "brief": "Test constructor",
                                        "maixpy": "maix.example.Test.__init__",
                                        "maixcdk": "maix.example.Test.Test",
                                        "py_doc": "Test constructor"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Test()",
                                    "py_def": "def __init__(self) -> None"
                                }
                            },
                            "def": "class Test"
                        },
                        "Kind": {
                            "type": "enum",
                            "name": "Kind",
                            "doc": {
                                "brief": "Example enum(not recommend! See Kind2)",
                                "maixpy": "maix.example.Kind",
                                "py_doc": "Example enum(not recommend! See Kind2)"
                            },
                            "values": [
                                [
                                    "KIND_NONE",
                                    "0",
                                    "Kind none, value always 0, other enum value will auto increase"
                                ],
                                [
                                    "KIND_DOG",
                                    "",
                                    "Kind dog"
                                ],
                                [
                                    "KIND_CAT",
                                    "",
                                    "Kind cat, value is auto generated according to KING_DOG"
                                ],
                                [
                                    "KIND_BIRD",
                                    "",
                                    ""
                                ],
                                [
                                    "KIND_MAX",
                                    "",
                                    "Max Kind quantity\nYou can get max Kind value by KIND_MAX - 1"
                                ]
                            ],
                            "def": "enum Kind\n        {\n            KIND_NONE = 0, /** Kind none, value always 0, other enum value will auto increase */\n            KIND_DOG,      /** Kind dog*/\n            KIND_CAT,      // Kind cat, value is auto generated according to KING_DOG\n            KIND_BIRD,\n            KIND_MAX /* Max Kind quantity,\n                        You can get max Kind value by KIND_MAX - 1\n                     */\n        }"
                        },
                        "Kind2": {
                            "type": "enum",
                            "name": "class",
                            "doc": {
                                "brief": "Example enum class(recommend!)",
                                "maixpy": "maix.example.Kind2",
                                "py_doc": "Example enum class(recommend!)"
                            },
                            "values": [
                                [
                                    "NONE",
                                    "0",
                                    "Kind none, value always 0, other enum value will auto increase"
                                ],
                                [
                                    "DOG",
                                    "",
                                    "Kind dog"
                                ],
                                [
                                    "CAT",
                                    "",
                                    "Kind cat, value is auto generated according to KING_DOG"
                                ],
                                [
                                    "BIRD",
                                    "",
                                    ""
                                ],
                                [
                                    "MAX",
                                    "",
                                    "Max Kind quantity\nYou can get max Kind value by KIND_MAX - 1"
                                ]
                            ],
                            "def": "enum class Kind2\n        {\n            NONE = 0, /** Kind none, value always 0, other enum value will auto increase */\n            DOG,      /** Kind dog*/\n            CAT,      // Kind cat, value is auto generated according to KING_DOG\n            BIRD,\n            MAX       /* Max Kind quantity,\n                         You can get max Kind value by KIND_MAX - 1\n                      */\n        }"
                        },
                        "var1": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Example module variable",
                                "attention": "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake.",
                                "maixpy": "maix.example.var1",
                                "py_doc": "Example module variable"
                            },
                            "value": "\"Sipeed\"",
                            "static": false,
                            "readonly": true,
                            "def": "const std::string var1 = \"Sipeed\""
                        },
                        "list_var": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Tensor data type size in bytes",
                                "attention": [
                                    "DO NOT use C/C++ array directly for python API, the python wrapper not support it.\nUse std::vector instead.",
                                    "It's a copy of this variable in MaixPy,\nso change it in C++ (e.g. update var in hello function) will not take effect the var inMaixPy.\nSo we add const for this var to avoid this mistake."
                                ],
                                "maixpy": "maix.example.list_var",
                                "py_doc": "Tensor data type size in bytes"
                            },
                            "value": "{\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9}",
                            "static": false,
                            "readonly": true,
                            "def": "const std::vector<int> list_var = {\n            0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
                        },
                        "test_var": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "Example module variable test_var",
                                "attention": "It's a copy of this variable in MaixPy, so if you change it in C++, it will not take effect in MaixPy.\nAnd change it in MaixPy will not take effect in C++ as well !!!\nIf you want to use vars shared between C++ and MaixPy, you can create a class and use its member.",
                                "maixpy": "maix.example.test_var",
                                "py_doc": "Example module variable test_var"
                            },
                            "value": "100",
                            "static": false,
                            "readonly": false,
                            "def": "int test_var = 100"
                        },
                        "hello": {
                            "type": "func",
                            "name": "hello",
                            "doc": {
                                "brief": "say hello to someone",
                                "param": {
                                    "name": "direction [in], name of someone, string type"
                                },
                                "return": "string type, content is hello + name",
                                "maixpy": "maix.example.hello",
                                "py_doc": "say hello to someone\n\nArgs:\n  - name: direction [in], name of someone, string type\n\n\nReturns: string type, content is hello + name\n"
                            },
                            "args": [
                                [
                                    "std::string",
                                    "name",
                                    null
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string hello(std::string name)",
                            "py_def": "def hello(name: str) -> str"
                        },
                        "Example": {
                            "type": "class",
                            "name": "Example",
                            "doc": {
                                "brief": "Example class\\nthis class will be export to MaixPy as maix.example.Example",
                                "maixpy": "maix.example.Example",
                                "py_doc": "Example class\nthis class will be export to MaixPy as maix.example.Example"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Example",
                                    "doc": {
                                        "brief": "Example constructor\\nthis constructor will be export to MaixPy as maix.example.Example.__init__",
                                        "param": {
                                            "name": "direction [in], name of Example, string type",
                                            "age": "direction [in], age of Example, int type, default is 18, value range is [0, 100]"
                                        },
                                        "attention": "to make auto generate code work, param Kind should with full namespace name `example::Kind` instead of `Kind`,\nnamespace `maix` can be ignored.",
                                        "maixpy": "maix.example.Example.__init__",
                                        "maixcdk": "maix.example.Example.Example",
                                        "py_doc": "Example constructor\nthis constructor will be export to MaixPy as maix.example.Example.__init__\n\nArgs:\n  - name: direction [in], name of Example, string type\n  - age: direction [in], age of Example, int type, default is 18, value range is [0, 100]\n"
                                    },
                                    "args": [
                                        [
                                            "std::string &",
                                            "name",
                                            null
                                        ],
                                        [
                                            "int",
                                            "age",
                                            "18"
                                        ],
                                        [
                                            "example::Kind",
                                            "pet",
                                            "example::KIND_NONE"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Example(std::string &name, int age = 18, example::Kind pet = example::KIND_NONE)",
                                    "py_def": "def __init__(self, name: str, age: int = 18, pet: Kind = ...) -> None"
                                },
                                "get_name": {
                                    "type": "func",
                                    "name": "get_name",
                                    "doc": {
                                        "brief": "get name of Example\\nyou can also get name by property `name`.",
                                        "return": "name of Example, string type",
                                        "maixpy": "maix.example.Example.get_name",
                                        "py_doc": "get name of Example\nyou can also get name by property `name`.\n\nReturns: name of Example, string type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string get_name()",
                                    "py_def": "def get_name(self) -> str"
                                },
                                "get_age": {
                                    "type": "func",
                                    "name": "get_age",
                                    "doc": {
                                        "brief": "get age of Example",
                                        "return": "age of Example, int type, value range is [0, 100]",
                                        "maixpy": "maix.example.Example.get_age",
                                        "py_doc": "get age of Example\n\nReturns: age of Example, int type, value range is [0, 100]\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int get_age()",
                                    "py_def": "def get_age(self) -> int"
                                },
                                "set_name": {
                                    "type": "func",
                                    "name": "set_name",
                                    "doc": {
                                        "brief": "set name of Example",
                                        "param": {
                                            "name": "name of Example, string type"
                                        },
                                        "maixpy": "maix.example.Example.set_name",
                                        "py_doc": "set name of Example\n\nArgs:\n  - name: name of Example, string type\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_name(std::string name)",
                                    "py_def": "def set_name(self, name: str) -> None"
                                },
                                "set_age": {
                                    "type": "func",
                                    "name": "set_age",
                                    "doc": {
                                        "brief": "set age of Example",
                                        "param": {
                                            "age": "age of Example, int type, value range is [0, 100]"
                                        },
                                        "maixpy": "maix.example.Example.set_age",
                                        "py_doc": "set age of Example\n\nArgs:\n  - age: age of Example, int type, value range is [0, 100]\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "age",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_age(int age)",
                                    "py_def": "def set_age(self, age: int) -> None"
                                },
                                "set_pet": {
                                    "type": "func",
                                    "name": "set_pet",
                                    "doc": {
                                        "brief": "Example enum member",
                                        "attention": "",
                                        "maixpy": "maix.example.Example.set_pet",
                                        "py_doc": "Example enum member"
                                    },
                                    "args": [
                                        [
                                            "example::Kind",
                                            "pet",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_pet(example::Kind pet)",
                                    "py_def": "def set_pet(self, pet: Kind) -> None"
                                },
                                "get_pet": {
                                    "type": "func",
                                    "name": "get_pet",
                                    "doc": {
                                        "brief": "Example enum member",
                                        "maixpy": "maix.example.Example.get_pet",
                                        "py_doc": "Example enum member"
                                    },
                                    "args": [],
                                    "ret_type": "example::Kind",
                                    "static": false,
                                    "def": "example::Kind get_pet()",
                                    "py_def": "def get_pet(self) -> Kind"
                                },
                                "get_list": {
                                    "type": "func",
                                    "name": "get_list",
                                    "doc": {
                                        "brief": "get list example",
                                        "param": {
                                            "in": "direction [in], input list, items are int type.\nIn MaixPy, you can pass list or tuple to this API"
                                        },
                                        "return": "list, items are int type, content is [1, 2, 3] + in. Alloc item, del in MaixPy will auto free memory.",
                                        "maixpy": "maix.example.Example.get_list",
                                        "py_doc": "get list example\n\nArgs:\n  - in: direction [in], input list, items are int type.\nIn MaixPy, you can pass list or tuple to this API\n\n\nReturns: list, items are int type, content is [1, 2, 3] + in. Alloc item, del in MaixPy will auto free memory.\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<int>",
                                            "in",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<int>*",
                                    "static": false,
                                    "def": "std::vector<int> *get_list(std::vector<int> in)",
                                    "py_def": "def get_list(self, in: list[int]) -> list[int]"
                                },
                                "get_dict": {
                                    "type": "func",
                                    "name": "get_dict",
                                    "doc": {
                                        "brief": "Example dict API",
                                        "param": {
                                            "in": "direction [in], input dict, key is string type, value is int type.\nIn MaixPy, you can pass `dict` to this API"
                                        },
                                        "return": "dict, key is string type, value is int type, content is {\"a\": 1} + in\nIn MaixPy, return type is `dict` object",
                                        "maixpy": "maix.example.Example.get_dict",
                                        "py_doc": "Example dict API\n\nArgs:\n  - in: direction [in], input dict, key is string type, value is int type.\nIn MaixPy, you can pass `dict` to this API\n\n\nReturns: dict, key is string type, value is int type, content is {\"a\": 1} + in\nIn MaixPy, return type is `dict` object\n"
                                    },
                                    "args": [
                                        [
                                            "std::map<std::string, int> &",
                                            "in",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::map<std::string, int>",
                                    "static": false,
                                    "def": "std::map<std::string, int> get_dict(std::map<std::string, int> &in)",
                                    "py_def": "def get_dict(self, in: dict[str, int]) -> dict[str, int]"
                                },
                                "hello": {
                                    "type": "func",
                                    "name": "hello",
                                    "doc": {
                                        "brief": "say hello to someone",
                                        "param": {
                                            "name": "name of someone, string type"
                                        },
                                        "return": "string type, content is Example::hello_str + name",
                                        "maixpy": "maix.example.Example.hello",
                                        "py_doc": "say hello to someone\n\nArgs:\n  - name: name of someone, string type\n\n\nReturns: string type, content is Example::hello_str + name\n"
                                    },
                                    "args": [
                                        [
                                            "std::string",
                                            "name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::string",
                                    "static": true,
                                    "def": "static std::string hello(std::string name)",
                                    "py_def": "def hello(name: str) -> str"
                                },
                                "hello_bytes": {
                                    "type": "func",
                                    "name": "hello_bytes",
                                    "doc": {
                                        "brief": "param is bytes example",
                                        "param": {
                                            "bytes": "bytes type param"
                                        },
                                        "return": "bytes type, return value is bytes changed value",
                                        "maixpy": "maix.example.Example.hello_bytes",
                                        "py_doc": "param is bytes example\n\nArgs:\n  - bytes: bytes type param\n\n\nReturns: bytes type, return value is bytes changed value\n"
                                    },
                                    "args": [
                                        [
                                            "Bytes &",
                                            "bytes",
                                            null
                                        ]
                                    ],
                                    "ret_type": "Bytes*",
                                    "static": true,
                                    "def": "static Bytes *hello_bytes(Bytes &bytes)",
                                    "py_def": "def hello_bytes(*args, **kwargs)"
                                },
                                "callback": {
                                    "type": "func",
                                    "name": "callback",
                                    "doc": {
                                        "brief": "Callback example",
                                        "param": {
                                            "cb": "callback function, param is two int type, return is int type"
                                        },
                                        "return": "int type, return value is cb's return value.",
                                        "maixpy": "maix.example.Example.callback",
                                        "py_doc": "Callback example\n\nArgs:\n  - cb: callback function, param is two int type, return is int type\n\n\nReturns: int type, return value is cb's return value.\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<int(int, int)>",
                                            "cb",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": true,
                                    "def": "static int callback(std::function<int(int, int)> cb)",
                                    "py_def": "def callback(cb: typing.Callable[[int, int], int]) -> int"
                                },
                                "callback2": {
                                    "type": "func",
                                    "name": "callback2",
                                    "doc": {
                                        "brief": "Callback example",
                                        "param": {
                                            "cb": "callback function, param is a int list type and int type, return is int type"
                                        },
                                        "return": "int type, return value is cb's return value.",
                                        "maixpy": "maix.example.Example.callback2",
                                        "py_doc": "Callback example\n\nArgs:\n  - cb: callback function, param is a int list type and int type, return is int type\n\n\nReturns: int type, return value is cb's return value.\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<int(std::vector<int>, int)>",
                                            "cb",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": true,
                                    "def": "static int callback2(std::function<int(std::vector<int>, int)> cb)",
                                    "py_def": "def callback2(cb: typing.Callable[[list[int], int], int]) -> int"
                                },
                                "hello_dict": {
                                    "type": "func",
                                    "name": "hello_dict",
                                    "doc": {
                                        "brief": "Dict param example",
                                        "param": {
                                            "dict": "dict type param, key is string type, value is int type"
                                        },
                                        "maixpy": "maix.example.Example.hello_dict",
                                        "py_doc": "Dict param example\n\nArgs:\n  - dict: dict type param, key is string type, value is int type\n"
                                    },
                                    "args": [
                                        [
                                            "std::map<std::string, int> *",
                                            "dict",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::map<std::string, int>*",
                                    "static": true,
                                    "def": "static std::map<std::string, int> *hello_dict(std::map<std::string, int> *dict)",
                                    "py_def": "def hello_dict(dict: dict[str, int]) -> dict[str, int]"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "name member of Example",
                                        "maixpy": "maix.example.Example.name",
                                        "py_doc": "name member of Example"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string name"
                                },
                                "age": {
                                    "type": "var",
                                    "name": "age",
                                    "doc": {
                                        "brief": "age member of Example, value range should be [0, 100]",
                                        "maixpy": "maix.example.Example.age",
                                        "py_doc": "age member of Example, value range should be [0, 100]"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int age"
                                },
                                "hello_str": {
                                    "type": "var",
                                    "name": "hello_str",
                                    "doc": {
                                        "brief": "hello_str member of Example, default value is \\\"hello \\\"",
                                        "maixpy": "maix.example.Example.hello_str",
                                        "py_doc": "hello_str member of Example, default value is \"hello \""
                                    },
                                    "value": null,
                                    "static": true,
                                    "readonly": false,
                                    "def": "static std::string hello_str"
                                },
                                "var1": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "Example module readonly variable",
                                        "maixpy": "maix.example.Example.var1",
                                        "py_doc": "Example module readonly variable"
                                    },
                                    "value": "\"Example.var1\"",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const std::string var1 = \"Example.var1\""
                                },
                                "var2": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "Example module readonly variable",
                                        "maixpy": "maix.example.Example.var2\n:readonly",
                                        "py_doc": "Example module readonly variable"
                                    },
                                    "value": "\"Example.var2\"",
                                    "static": false,
                                    "readonly": true,
                                    "def": "std::string var2 = \"Example.var2\""
                                },
                                "dict_test": {
                                    "type": "func",
                                    "name": "dict_test",
                                    "doc": {
                                        "brief": "dict_test, return dict type, and element is pointer type(alloc in C++).\\nHere when the returned Tensor object will auto delete by Python GC.",
                                        "maixpy": "maix.example.Example.dict_test",
                                        "py_doc": "dict_test, return dict type, and element is pointer type(alloc in C++).\nHere when the returned Tensor object will auto delete by Python GC."
                                    },
                                    "args": [],
                                    "ret_type": "std::map<std::string, example::Test *>*",
                                    "static": true,
                                    "def": "static std::map<std::string, example::Test *> *dict_test()",
                                    "py_def": "def dict_test() -> dict[str, Test]"
                                }
                            },
                            "def": "class Example"
                        },
                        "change_arg_name": {
                            "type": "func",
                            "name": "change_arg_name",
                            "doc": {
                                "brief": "Change arg name example",
                                "param": {
                                    "e": "Example object"
                                },
                                "return": "same as arg",
                                "maixpy": "maix.example.change_arg_name",
                                "py_doc": "Change arg name example\n\nArgs:\n  - e: Example object\n\n\nReturns: same as arg\n"
                            },
                            "args": [
                                [
                                    "example::Example *",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "example::Example*",
                            "static": false,
                            "def": "example::Example *change_arg_name(example::Example *e)",
                            "py_def": "def change_arg_name(e: Example) -> Example"
                        },
                        "change_arg_name2": {
                            "type": "func",
                            "name": "change_arg_name2",
                            "doc": {
                                "brief": "Change arg name example",
                                "param": {
                                    "e": "Example object"
                                },
                                "maixpy": "maix.example.change_arg_name2",
                                "py_doc": "Change arg name example\n\nArgs:\n  - e: Example object\n"
                            },
                            "args": [
                                [
                                    "example::Example &",
                                    "e",
                                    null
                                ]
                            ],
                            "ret_type": "void",
                            "static": false,
                            "def": "void change_arg_name2(example::Example &e)",
                            "py_def": "def change_arg_name2(e: Example) -> None"
                        }
                    },
                    "auto_add": false
                },
                "util": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.util module"
                    },
                    "members": {
                        "do_exit_function": {
                            "type": "func",
                            "name": "do_exit_function",
                            "doc": {
                                "brief": "exec all of exit function",
                                "maixpy": "maix.util.do_exit_function",
                                "py_doc": "exec all of exit function"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void do_exit_function()",
                            "py_def": "def do_exit_function() -> None"
                        },
                        "register_atexit": {
                            "type": "func",
                            "name": "register_atexit",
                            "doc": {
                                "brief": "Registering default processes that need to be executed on exit",
                                "maixpy": "maix.util.register_atexit",
                                "py_doc": "Registering default processes that need to be executed on exit"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void register_atexit()",
                            "py_def": "def register_atexit() -> None"
                        }
                    },
                    "auto_add": true
                },
                "thread": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.thread module"
                    },
                    "members": {
                        "Thread": {
                            "type": "class",
                            "name": "Thread",
                            "doc": {
                                "brief": "thread class",
                                "maixpy": "maix.thread.Thread",
                                "py_doc": "thread class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Thread",
                                    "doc": {
                                        "brief": "create thread",
                                        "param": {
                                            "func": "direction [in], thread function, one `args` parameter, void* type, no return value",
                                            "args": "direction [in], thread function parameter"
                                        },
                                        "maixpy": "maix.thread.Thread.__init__",
                                        "maixcdk": "maix.thread.Thread.Thread",
                                        "py_doc": "create thread\n\nArgs:\n  - func: direction [in], thread function, one `args` parameter, void* type, no return value\n  - args: direction [in], thread function parameter\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<void(void *)>",
                                            "func",
                                            null
                                        ],
                                        [
                                            "void *",
                                            "args",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Thread(std::function<void(void *)> func, void *args = nullptr)",
                                    "py_def": "def __init__(self, func: typing.Callable[[capsule], None], args: capsule = None) -> None"
                                },
                                "join": {
                                    "type": "func",
                                    "name": "join",
                                    "doc": {
                                        "brief": "wait thread exit",
                                        "maixpy": "maix.thread.Thread.join",
                                        "py_doc": "wait thread exit"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void join()",
                                    "py_def": "def join(self) -> None"
                                },
                                "detach": {
                                    "type": "func",
                                    "name": "detach",
                                    "doc": {
                                        "brief": "detach thread, detach will auto start thread and you can't use join anymore.",
                                        "maixpy": "maix.thread.Thread.detach",
                                        "py_doc": "detach thread, detach will auto start thread and you can't use join anymore."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void detach()",
                                    "py_def": "def detach(self) -> None"
                                },
                                "joinable": {
                                    "type": "func",
                                    "name": "joinable",
                                    "doc": {
                                        "brief": "Check if thread is joinable",
                                        "return": "true if thread is joinable",
                                        "maixpy": "maix.thread.Thread.joinable",
                                        "py_doc": "Check if thread is joinable\n\nReturns: true if thread is joinable\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool joinable()",
                                    "py_def": "def joinable(self) -> bool"
                                }
                            },
                            "def": "class Thread"
                        }
                    },
                    "auto_add": true
                },
                "sys": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.sys module"
                    },
                    "members": {
                        "os_version": {
                            "type": "func",
                            "name": "os_version",
                            "doc": {
                                "brief": "Get system version",
                                "return": "version string, e.g. \"maixcam-2024-08-13-maixpy-v4.4.20\"",
                                "maixpy": "maix.sys.os_version",
                                "py_doc": "Get system version\n\nReturns: version string, e.g. \"maixcam-2024-08-13-maixpy-v4.4.20\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string os_version()",
                            "py_def": "def os_version() -> str"
                        },
                        "maixpy_version": {
                            "type": "func",
                            "name": "maixpy_version",
                            "doc": {
                                "brief": "Get MaixPy version, if get failed will return empty string.",
                                "return": "version  string, e.g. \"4.4.21\"",
                                "maixpy": "maix.sys.maixpy_version",
                                "py_doc": "Get MaixPy version, if get failed will return empty string.\n\nReturns: version  string, e.g. \"4.4.21\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string maixpy_version()",
                            "py_def": "def maixpy_version() -> str"
                        },
                        "device_name": {
                            "type": "func",
                            "name": "device_name",
                            "doc": {
                                "brief": "Get device name",
                                "return": "device name, e.g. \"MaixCAM\"",
                                "maixpy": "maix.sys.device_name",
                                "py_doc": "Get device name\n\nReturns: device name, e.g. \"MaixCAM\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string device_name()",
                            "py_def": "def device_name() -> str"
                        },
                        "host_name": {
                            "type": "func",
                            "name": "host_name",
                            "doc": {
                                "brief": "Get host name",
                                "return": "host name, e.g. \"maixcam-2f9f\"",
                                "maixpy": "maix.sys.host_name",
                                "py_doc": "Get host name\n\nReturns: host name, e.g. \"maixcam-2f9f\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string host_name()",
                            "py_def": "def host_name() -> str"
                        },
                        "host_domain": {
                            "type": "func",
                            "name": "host_domain",
                            "doc": {
                                "brief": "Get host domain",
                                "return": "host domain, e.g. \"maixcam-2f9f.local\"",
                                "maixpy": "maix.sys.host_domain",
                                "py_doc": "Get host domain\n\nReturns: host domain, e.g. \"maixcam-2f9f.local\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string host_domain()",
                            "py_def": "def host_domain() -> str"
                        },
                        "ip_address": {
                            "type": "func",
                            "name": "ip_address",
                            "doc": {
                                "brief": "Get ip address",
                                "return": "ip address, dict type, e.g. {\"eth0\": \"192.168.0.195\", \"wlan0\": \"192.168.0.123\", \"usb0\": \"10.47.159.1\"}",
                                "maixpy": "maix.sys.ip_address",
                                "py_doc": "Get ip address\n\nReturns: ip address, dict type, e.g. {\"eth0\": \"192.168.0.195\", \"wlan0\": \"192.168.0.123\", \"usb0\": \"10.47.159.1\"}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, std::string>",
                            "static": false,
                            "def": "std::map<std::string, std::string> ip_address()",
                            "py_def": "def ip_address() -> dict[str, str]"
                        },
                        "mac_address": {
                            "type": "func",
                            "name": "mac_address",
                            "doc": {
                                "brief": "Get mac address",
                                "return": "mac address, dict type, e.g. {\"eth0\": \"00:0c:29:2f:9f:00\", \"wlan0\": \"00:0c:29:2f:9f:01\", \"usb0\": \"00:0c:29:2f:9f:02\"}",
                                "maixpy": "maix.sys.mac_address",
                                "py_doc": "Get mac address\n\nReturns: mac address, dict type, e.g. {\"eth0\": \"00:0c:29:2f:9f:00\", \"wlan0\": \"00:0c:29:2f:9f:01\", \"usb0\": \"00:0c:29:2f:9f:02\"}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, std::string>",
                            "static": false,
                            "def": "std::map<std::string, std::string> mac_address()",
                            "py_def": "def mac_address() -> dict[str, str]"
                        },
                        "device_key": {
                            "type": "func",
                            "name": "device_key",
                            "doc": {
                                "brief": "Get device key, can be unique id of device",
                                "return": "device key, 32 bytes hex string, e.g. \"1234567890abcdef1234567890abcdef\"",
                                "maixpy": "maix.sys.device_key",
                                "py_doc": "Get device key, can be unique id of device\n\nReturns: device key, 32 bytes hex string, e.g. \"1234567890abcdef1234567890abcdef\"\n"
                            },
                            "args": [],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string device_key()",
                            "py_def": "def device_key() -> str"
                        },
                        "memory_info": {
                            "type": "func",
                            "name": "memory_info",
                            "doc": {
                                "brief": "Get memory info",
                                "return": "memory info, dict type, e.g. {\"total\": 1024, \"used\": 512, \"hw_total\": 256*1024*1024}\ntotal: total memory size in Byte.\nused: used memory size in Byte.\nhw_total: total memory size in Byte of hardware, the total <= hw_total\uff0c\nOS kernel may reserve some memory for some hardware like camera, npu, display etc.",
                                "maixpy": "maix.sys.memory_info",
                                "py_doc": "Get memory info\n\nReturns: memory info, dict type, e.g. {\"total\": 1024, \"used\": 512, \"hw_total\": 256*1024*1024}\ntotal: total memory size in Byte.\nused: used memory size in Byte.\nhw_total: total memory size in Byte of hardware, the total <= hw_total\uff0c\nOS kernel may reserve some memory for some hardware like camera, npu, display etc.\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, int>",
                            "static": false,
                            "def": "std::map<std::string, int> memory_info()",
                            "py_def": "def memory_info() -> dict[str, int]"
                        },
                        "bytes_to_human": {
                            "type": "func",
                            "name": "bytes_to_human",
                            "doc": {
                                "brief": "Bytes to human readable string",
                                "param": {
                                    "bytes:": "bytes size\uff0ce.g. 1234B = 1234/1024 = 1.205 KB",
                                    "precision:": "decimal precision, default 2",
                                    "base:": "base number, default 1024",
                                    "unit:": "unit string, e.g. \"B\"",
                                    "sep:": "separator string, e.g. \" \""
                                },
                                "return": "human readable string, e.g. \"1.21 KB\"",
                                "maixpy": "maix.sys.bytes_to_human",
                                "py_doc": "Bytes to human readable string\n\nArgs:\n  - bytes:: bytes size\uff0ce.g. 1234B = 1234/1024 = 1.205 KB\n  - precision:: decimal precision, default 2\n  - base:: base number, default 1024\n  - unit:: unit string, e.g. \"B\"\n  - sep:: separator string, e.g. \" \"\n\n\nReturns: human readable string, e.g. \"1.21 KB\"\n"
                            },
                            "args": [
                                [
                                    "unsigned long long",
                                    "bytes",
                                    null
                                ],
                                [
                                    "int",
                                    "precision",
                                    "2"
                                ],
                                [
                                    "int",
                                    "base",
                                    "1024"
                                ],
                                [
                                    "const std::string &",
                                    "unit",
                                    "\"B\""
                                ],
                                [
                                    "const std::string &",
                                    "sep",
                                    "\" \""
                                ]
                            ],
                            "ret_type": "std::string",
                            "static": false,
                            "def": "std::string bytes_to_human(unsigned long long bytes, int precision = 2, int base = 1024, const std::string &unit = \"B\", const std::string &sep = \" \")",
                            "py_def": "def bytes_to_human(bytes: int, precision: int = 2, base: int = 1024, unit: str = 'B', sep: str = ' ') -> str"
                        },
                        "cpu_freq": {
                            "type": "func",
                            "name": "cpu_freq",
                            "doc": {
                                "brief": "Get CPU frequency",
                                "return": "CPU frequency, dict type, e.g. {\"cpu0\": 1000000000, \"cpu1\": 1000000000}",
                                "maixpy": "maix.sys.cpu_freq",
                                "py_doc": "Get CPU frequency\n\nReturns: CPU frequency, dict type, e.g. {\"cpu0\": 1000000000, \"cpu1\": 1000000000}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, unsigned long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long> cpu_freq()",
                            "py_def": "def cpu_freq() -> dict[str, int]"
                        },
                        "cpu_temp": {
                            "type": "func",
                            "name": "cpu_temp",
                            "doc": {
                                "brief": "Get CPU temperature",
                                "return": "CPU temperature, unit dgree, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}",
                                "maixpy": "maix.sys.cpu_temp",
                                "py_doc": "Get CPU temperature\n\nReturns: CPU temperature, unit dgree, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, float>",
                            "static": false,
                            "def": "std::map<std::string, float> cpu_temp()",
                            "py_def": "def cpu_temp() -> dict[str, float]"
                        },
                        "cpu_usage": {
                            "type": "func",
                            "name": "cpu_usage",
                            "doc": {
                                "brief": "Get CPU usage",
                                "return": "CPU usage, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}",
                                "maixpy": "maix.sys.cpu_usage",
                                "py_doc": "Get CPU usage\n\nReturns: CPU usage, dict type, e.g. {\"cpu\": 50.0, \"cpu0\": 50, \"cpu1\": 50}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, float>",
                            "static": false,
                            "def": "std::map<std::string, float> cpu_usage()",
                            "py_def": "def cpu_usage() -> dict[str, float]"
                        },
                        "npu_freq": {
                            "type": "func",
                            "name": "npu_freq",
                            "doc": {
                                "brief": "Get NPU frequency",
                                "return": "NPU frequency, dict type, e.g. {\"npu0\": 500000000}",
                                "maixpy": "maix.sys.npu_freq",
                                "py_doc": "Get NPU frequency\n\nReturns: NPU frequency, dict type, e.g. {\"npu0\": 500000000}\n"
                            },
                            "args": [],
                            "ret_type": "std::map<std::string, unsigned long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long> npu_freq()",
                            "py_def": "def npu_freq() -> dict[str, int]"
                        },
                        "disk_usage": {
                            "type": "func",
                            "name": "disk_usage",
                            "doc": {
                                "brief": "Get disk usage",
                                "param": {
                                    "path:": "disk path, default \"/\""
                                },
                                "return": "disk usage, dict type, e.g. {\"total\": 1024, \"used\": 512}",
                                "maixpy": "maix.sys.disk_usage",
                                "py_doc": "Get disk usage\n\nArgs:\n  - path:: disk path, default \"/\"\n\n\nReturns: disk usage, dict type, e.g. {\"total\": 1024, \"used\": 512}\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "path",
                                    "\"/\""
                                ]
                            ],
                            "ret_type": "std::map<std::string, unsigned long long>",
                            "static": false,
                            "def": "std::map<std::string, unsigned long long> disk_usage(const std::string &path = \"/\")",
                            "py_def": "def disk_usage(path: str = '/') -> dict[str, int]"
                        },
                        "disk_partitions": {
                            "type": "func",
                            "name": "disk_partitions",
                            "doc": {
                                "brief": "Get disk partition and mount point info",
                                "param": {
                                    "only_disk": "only return real disk, tempfs sysfs etc. not return, default true."
                                },
                                "return": "disk partition and mount point info, list type, e.g. [{\"device\": \"/dev/mmcblk0p1\", \"mountpoint\": \"/mnt/sdcard\", \"fstype\": \"vfat\"}]",
                                "maixpy": "maix.sys.disk_partitions",
                                "py_doc": "Get disk partition and mount point info\n\nArgs:\n  - only_disk: only return real disk, tempfs sysfs etc. not return, default true.\n\n\nReturns: disk partition and mount point info, list type, e.g. [{\"device\": \"/dev/mmcblk0p1\", \"mountpoint\": \"/mnt/sdcard\", \"fstype\": \"vfat\"}]\n"
                            },
                            "args": [
                                [
                                    "bool",
                                    "only_disk",
                                    "true"
                                ]
                            ],
                            "ret_type": "std::vector<std::map<std::string, std::string>>",
                            "static": false,
                            "def": "std::vector<std::map<std::string, std::string>> disk_partitions(bool only_disk = true)",
                            "py_def": "def disk_partitions(only_disk: bool = True) -> list[dict[str, str]]"
                        },
                        "register_default_signal_handle": {
                            "type": "func",
                            "name": "register_default_signal_handle",
                            "doc": {
                                "brief": "register default signal handle",
                                "maixpy": "maix.sys.register_default_signal_handle",
                                "py_doc": "register default signal handle"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void register_default_signal_handle()"
                        },
                        "poweroff": {
                            "type": "func",
                            "name": "poweroff",
                            "doc": {
                                "brief": "Power off device",
                                "maixpy": "maix.sys.poweroff",
                                "py_doc": "Power off device"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void poweroff()",
                            "py_def": "def poweroff() -> None"
                        },
                        "reboot": {
                            "type": "func",
                            "name": "reboot",
                            "doc": {
                                "brief": "Power off device and power on",
                                "maixpy": "maix.sys.reboot",
                                "py_doc": "Power off device and power on"
                            },
                            "args": [],
                            "ret_type": "void",
                            "static": false,
                            "def": "void reboot()",
                            "py_def": "def reboot() -> None"
                        }
                    },
                    "auto_add": true
                },
                "i18n": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.i18n module"
                    },
                    "members": {
                        "locales": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "i18n locales list",
                                "maixpy": "maix.i18n.locales",
                                "py_doc": "i18n locales list"
                            },
                            "value": "{\n        \"en\",\n        \"zh\",\n        \"zh-tw\",\n        \"ja\"}",
                            "static": true,
                            "readonly": false,
                            "def": "static std::vector<std::string> locales = {\n        \"en\",\n        \"zh\",\n        \"zh-tw\",\n        \"ja\"}"
                        },
                        "names": {
                            "type": "var",
                            "name": "",
                            "doc": {
                                "brief": "i18n language names list",
                                "maixpy": "maix.i18n.names",
                                "py_doc": "i18n language names list"
                            },
                            "value": "{\n        \"English\",\n        \"\u7b80\u4f53\u4e2d\u6587\",\n        \"\u7e41\u9ad4\u4e2d\u6587\",\n        \"\u65e5\u672c\u8a9e\"}",
                            "static": false,
                            "readonly": true,
                            "def": "const static std::vector<std::string> names = {\n        \"English\",\n        \"\u7b80\u4f53\u4e2d\u6587\",\n        \"\u7e41\u9ad4\u4e2d\u6587\",\n        \"\u65e5\u672c\u8a9e\"}"
                        },
                        "get_locale": {
                            "type": "func",
                            "name": "get_locale",
                            "doc": {
                                "brief": "Get system config of locale.",
                                "return": "language locale, e.g. en, zh, zh_CN, zh_TW, etc.",
                                "maixpy": "maix.i18n.get_locale",
                                "py_doc": "Get system config of locale.\n\nReturns: language locale, e.g. en, zh, zh_CN, zh_TW, etc.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_locale()",
                            "py_def": "def get_locale() -> str"
                        },
                        "get_language_name": {
                            "type": "func",
                            "name": "get_language_name",
                            "doc": {
                                "brief": "Get system config of language name.",
                                "return": "language name, e.g. English, \u7b80\u4f53\u4e2d\u6587, \u7e41\u9ad4\u4e2d\u6587, etc.",
                                "maixpy": "maix.i18n.get_language_name",
                                "py_doc": "Get system config of language name.\n\nReturns: language name, e.g. English, \u7b80\u4f53\u4e2d\u6587, \u7e41\u9ad4\u4e2d\u6587, etc.\n"
                            },
                            "args": [],
                            "ret_type": "string",
                            "static": false,
                            "def": "string get_language_name()",
                            "py_def": "def get_language_name() -> str"
                        },
                        "load_trans_yaml": {
                            "type": "func",
                            "name": "load_trans_yaml",
                            "doc": {
                                "brief": "Load translations from yaml files.",
                                "param": {
                                    "locales_dir": "translation yaml files directory."
                                },
                                "return": "A dict contains all translations, e.g. {\"zh\":{\"hello\": \"\u4f60\u597d\"}, \"en\":{\"hello\": \"hello\"}}, you should delete it after use in C++.",
                                "maixpy": "maix.i18n.load_trans_yaml",
                                "py_doc": "Load translations from yaml files.\n\nArgs:\n  - locales_dir: translation yaml files directory.\n\n\nReturns: A dict contains all translations, e.g. {\"zh\":{\"hello\": \"\u4f60\u597d\"}, \"en\":{\"hello\": \"hello\"}}, you should delete it after use in C++.\n"
                            },
                            "args": [
                                [
                                    "const std::string &",
                                    "locales_dir",
                                    null
                                ]
                            ],
                            "ret_type": "const std::map<string, std::map<string, string>>*",
                            "static": false,
                            "def": "const std::map<string, std::map<string, string>> *load_trans_yaml(const std::string &locales_dir)",
                            "py_def": "def load_trans_yaml(locales_dir: str) -> dict[str, dict[str, str]]"
                        },
                        "Trans": {
                            "type": "class",
                            "name": "Trans",
                            "doc": {
                                "brief": "Translate helper class.",
                                "maixpy": "maix.i18n.Trans",
                                "py_doc": "Translate helper class."
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Trans",
                                    "doc": {
                                        "brief": "Translate helper class constructor.\\nBy default locale is get by `i18n.get_locale()` function which set by system settings.\\nBut you can also manually set by `set_locale` function temporarily.",
                                        "param": {
                                            "locales_dict": "locales dict, e.g. {\"zh\": {\"Confirm\": \"\u786e\u8ba4\", \"OK\": \"\u597d\u7684\"}, \"en\": {\"Confirm\": \"Confirm\", \"OK\": \"OK\"}}"
                                        },
                                        "maixpy": "maix.i18n.Trans.__init__",
                                        "maixcdk": "maix.i18n.Trans.Trans",
                                        "py_doc": "Translate helper class constructor.\nBy default locale is get by `i18n.get_locale()` function which set by system settings.\nBut you can also manually set by `set_locale` function temporarily.\n\nArgs:\n  - locales_dict: locales dict, e.g. {\"zh\": {\"Confirm\": \"\u786e\u8ba4\", \"OK\": \"\u597d\u7684\"}, \"en\": {\"Confirm\": \"Confirm\", \"OK\": \"OK\"}}\n"
                                    },
                                    "args": [
                                        [
                                            "const std::map<string, const std::map<string, string>> &",
                                            "locales_dict",
                                            "std::map<string, const std::map<string, string>>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Trans(const std::map<string, const std::map<string, string>> &locales_dict = std::map<string, const std::map<string, string>>())",
                                    "py_def": "def __init__(self, locales_dict: dict[str, dict[str, str]] = {}) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load translation from yaml files generated by `maixtool i18n` command.",
                                        "param": {
                                            "locales_dir": "the translation files directory."
                                        },
                                        "return": "err.Err type, no error will return err.Err.ERR_NONE.",
                                        "maixpy": "maix.i18n.Trans.load",
                                        "py_doc": "Load translation from yaml files generated by `maixtool i18n` command.\n\nArgs:\n  - locales_dir: the translation files directory.\n\n\nReturns: err.Err type, no error will return err.Err.ERR_NONE.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "locales_dir",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const std::string &locales_dir)",
                                    "py_def": "def load(self, locales_dir: str) -> maix.err.Err"
                                },
                                "update_dict": {
                                    "type": "func",
                                    "name": "update_dict",
                                    "doc": {
                                        "brief": "Update translation dict.",
                                        "param": {
                                            "dict": "the new translation dict."
                                        },
                                        "return": "err.Err type, no error will return err.Err.ERR_NONE.",
                                        "maixpy": "maix.i18n.Trans.update_dict",
                                        "py_doc": "Update translation dict.\n\nArgs:\n  - dict: the new translation dict.\n\n\nReturns: err.Err type, no error will return err.Err.ERR_NONE.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::map<std::string, const std::map<std::string, std::string>> &",
                                            "dict",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err update_dict(const std::map<std::string, const std::map<std::string, std::string>> &dict)",
                                    "py_def": "def update_dict(self, dict: dict[str, dict[str, str]]) -> maix.err.Err"
                                },
                                "tr": {
                                    "type": "func",
                                    "name": "tr",
                                    "doc": {
                                        "brief": "Translate string by key.",
                                        "param": {
                                            "key": "string key, e.g. \"Confirm\"",
                                            "locale": "locale name, if not assign, use default locale set by system settings or set_locale function."
                                        },
                                        "return": "translated string, if find translation, return it, or return key, e.g. \"\u786e\u8ba4\", \"Confirm\", etc.",
                                        "maixpy": "maix.i18n.Trans.tr",
                                        "py_doc": "Translate string by key.\n\nArgs:\n  - key: string key, e.g. \"Confirm\"\n  - locale: locale name, if not assign, use default locale set by system settings or set_locale function.\n\n\nReturns: translated string, if find translation, return it, or return key, e.g. \"\u786e\u8ba4\", \"Confirm\", etc.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "key",
                                            null
                                        ],
                                        [
                                            "const string",
                                            "locale",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "string",
                                    "static": false,
                                    "def": "string tr(const string &key, const string locale = \"\")",
                                    "py_def": "def tr(self, key: str, locale: str = '') -> str"
                                },
                                "set_locale": {
                                    "type": "func",
                                    "name": "set_locale",
                                    "doc": {
                                        "brief": "Set locale temporarily, will not affect system settings.",
                                        "param": {
                                            "locale": "locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales"
                                        },
                                        "maixpy": "maix.i18n.Trans.set_locale",
                                        "py_doc": "Set locale temporarily, will not affect system settings.\n\nArgs:\n  - locale: locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "locale",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_locale(const string &locale)",
                                    "py_def": "def set_locale(self, locale: str) -> None"
                                },
                                "get_locale": {
                                    "type": "func",
                                    "name": "get_locale",
                                    "doc": {
                                        "brief": "Get current locale.",
                                        "return": "locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales",
                                        "maixpy": "maix.i18n.Trans.get_locale",
                                        "py_doc": "Get current locale.\n\nReturns: locale name, e.g. \"zh\", \"en\", etc. @see maix.i18n.locales\n"
                                    },
                                    "args": [],
                                    "ret_type": "string",
                                    "static": false,
                                    "def": "string get_locale()",
                                    "py_def": "def get_locale(self) -> str"
                                }
                            },
                            "def": "class Trans"
                        }
                    },
                    "auto_add": true
                },
                "peripheral": {
                    "type": "module",
                    "doc": {
                        "brief": "Chip's peripheral driver",
                        "maixpy": "maix.peripheral",
                        "py_doc": "Chip's peripheral driver"
                    },
                    "members": {
                        "key": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.key module"
                            },
                            "members": {
                                "Keys": {
                                    "type": "enum",
                                    "name": "Keys{",
                                    "doc": {
                                        "brief": "Keys enum, id the same as linux input.h(input-event-codes.h)",
                                        "maixpy": "maix.peripheral.key.Keys",
                                        "py_doc": "Keys enum, id the same as linux input.h(input-event-codes.h)"
                                    },
                                    "values": [
                                        [
                                            "KEY_NONE",
                                            "0x000",
                                            ""
                                        ],
                                        [
                                            "KEY_ESC",
                                            "0x001",
                                            ""
                                        ],
                                        [
                                            "KEY_OK",
                                            "0x160",
                                            ""
                                        ],
                                        [
                                            "KEY_OPTION",
                                            "0x165",
                                            ""
                                        ],
                                        [
                                            "KEY_NEXT",
                                            "0x197",
                                            ""
                                        ],
                                        [
                                            "KEY_PREV",
                                            "0x19c",
                                            ""
                                        ]
                                    ],
                                    "def": "enum Keys{\n        KEY_NONE   = 0x000,\n        KEY_ESC    = 0x001,\n        KEY_OK     = 0x160,\n        KEY_OPTION = 0x165,\n        KEY_NEXT   = 0x197,\n        KEY_PREV   = 0x19c\n    }"
                                },
                                "State": {
                                    "type": "enum",
                                    "name": "State{",
                                    "doc": {
                                        "brief": "Key state enum",
                                        "maixpy": "maix.peripheral.key.State",
                                        "py_doc": "Key state enum"
                                    },
                                    "values": [
                                        [
                                            "KEY_RELEASED",
                                            "0",
                                            ""
                                        ],
                                        [
                                            "KEY_PRESSED",
                                            "1",
                                            ""
                                        ]
                                    ],
                                    "def": "enum State{\n        KEY_RELEASED  = 0,\n        KEY_PRESSED   = 1,\n    }"
                                },
                                "Key": {
                                    "type": "class",
                                    "name": "Key",
                                    "doc": {
                                        "brief": "Key input class",
                                        "maixpy": "maix.peripheral.key.Key",
                                        "py_doc": "Key input class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Key",
                                            "doc": {
                                                "brief": "Key Device constructor",
                                                "param": {
                                                    "callback": "When key triggered and callback is not empty(empty In MaixPy is None, in C++ is nullptr),\ncallback will be called with args key(key.Keys) and value(key.State).\nIf set to null, you can get key value by read() function.\nThis callback called in a standalone thread, so you can block a while in callback, and you should be carefully when operate shared data.",
                                                    "open": "auto open device in constructor, if false, you need call open() to open device"
                                                },
                                                "maixpy": "maix.peripheral.key.Key.__init__",
                                                "maixcdk": "maix.peripheral.key.Key.Key",
                                                "py_doc": "Key Device constructor\n\nArgs:\n  - callback: When key triggered and callback is not empty(empty In MaixPy is None, in C++ is nullptr),\ncallback will be called with args key(key.Keys) and value(key.State).\nIf set to null, you can get key value by read() function.\nThis callback called in a standalone thread, so you can block a while in callback, and you should be carefully when operate shared data.\n  - open: auto open device in constructor, if false, you need call open() to open device\n"
                                            },
                                            "args": [
                                                [
                                                    "std::function<void(int, int)>",
                                                    "callback",
                                                    "nullptr"
                                                ],
                                                [
                                                    "bool",
                                                    "open",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Key(std::function<void(int, int)> callback = nullptr, bool open = true)",
                                            "py_def": "def __init__(self, callback: typing.Callable[[int, int], None] = None, open: bool = True) -> None"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open(Initialize) key device, if already opened, will close first and then open.",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.key.Key.open",
                                                "py_doc": "Open(Initialize) key device, if already opened, will close first and then open.\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open()",
                                            "py_def": "def open(self) -> maix.err.Err"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close key device",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.key.Key.close",
                                                "py_doc": "Close key device\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()",
                                            "py_def": "def close(self) -> maix.err.Err"
                                        },
                                        "is_opened": {
                                            "type": "func",
                                            "name": "is_opened",
                                            "doc": {
                                                "brief": "Check key device is opened",
                                                "return": "bool type, true means opened, false means closed",
                                                "maixpy": "maix.peripheral.key.Key.is_opened",
                                                "py_doc": "Check key device is opened\n\nReturns: bool type, true means opened, false means closed\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_opened()",
                                            "py_def": "def is_opened(self) -> bool"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Read key input, and return key and value, if callback is set, DO NOT call this function manually.",
                                                "return": "list type, first is key(maix.key.Keys), second is value(maix.key.State), if no key input, return [0, 0]",
                                                "throw": "If read failed, will throw maix.err.Exception.",
                                                "maixpy": "maix.peripheral.key.Key.read",
                                                "py_doc": "Read key input, and return key and value, if callback is set, DO NOT call this function manually.\n\nReturns: list type, first is key(maix.key.Keys), second is value(maix.key.State), if no key input, return [0, 0]\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::pair<int, int>",
                                            "static": false,
                                            "def": "std::pair<int, int> read()",
                                            "py_def": "def read(self) -> tuple[int, int]"
                                        }
                                    },
                                    "def": "class Key"
                                },
                                "add_default_listener": {
                                    "type": "func",
                                    "name": "add_default_listener",
                                    "doc": {
                                        "brief": "Add default listener, if you want to exit app when press ok button, you can just call this function.\\nThis function is auto called in MaixPy' startup code, so you don't need to call it in MaixPy.\\nCreate Key object will auto call rm_default_listener() to cancel the default ok button function.\\nWhen ok button pressed, a SIGINT signal will be raise and call app.set_exit_flag(True).",
                                        "maixpy": "maix.peripheral.key.add_default_listener",
                                        "py_doc": "Add default listener, if you want to exit app when press ok button, you can just call this function.\nThis function is auto called in MaixPy' startup code, so you don't need to call it in MaixPy.\nCreate Key object will auto call rm_default_listener() to cancel the default ok button function.\nWhen ok button pressed, a SIGINT signal will be raise and call app.set_exit_flag(True)."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_default_listener()"
                                },
                                "rm_default_listener": {
                                    "type": "func",
                                    "name": "rm_default_listener",
                                    "doc": {
                                        "brief": "Remove default listener, if you want to cancel the default ok button function(exit app), you can just call this function.",
                                        "maixpy": "maix.peripheral.key.rm_default_listener",
                                        "py_doc": "Remove default listener, if you want to cancel the default ok button function(exit app), you can just call this function."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void rm_default_listener()"
                                }
                            },
                            "auto_add": true
                        },
                        "i2c": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.i2c module"
                            },
                            "members": {
                                "AddrSize": {
                                    "type": "enum",
                                    "name": "AddrSize",
                                    "doc": {
                                        "brief": "Address size enum",
                                        "maixpy": "maix.peripheral.i2c.AddrSize",
                                        "py_doc": "Address size enum"
                                    },
                                    "values": [
                                        [
                                            "SEVEN_BIT",
                                            "7",
                                            "7-bit address mode"
                                        ],
                                        [
                                            "TEN_BIT",
                                            "10",
                                            "10-bit address mode"
                                        ]
                                    ],
                                    "def": "enum AddrSize\n    {\n        SEVEN_BIT = 7,   // 7-bit address mode\n        TEN_BIT   = 10   // 10-bit address mode\n    }"
                                },
                                "Mode": {
                                    "type": "enum",
                                    "name": "Mode",
                                    "doc": {
                                        "brief": "I2C mode enum",
                                        "maixpy": "maix.peripheral.i2c.Mode",
                                        "py_doc": "I2C mode enum"
                                    },
                                    "values": [
                                        [
                                            "MASTER",
                                            "0x00",
                                            "master mode"
                                        ],
                                        [
                                            "SLAVE",
                                            "0x01",
                                            "slave mode"
                                        ]
                                    ],
                                    "def": "enum Mode\n    {\n        MASTER = 0x00, // master mode\n        SLAVE = 0x01   // slave mode\n    }"
                                },
                                "list_devices": {
                                    "type": "func",
                                    "name": "list_devices",
                                    "doc": {
                                        "brief": "Get supported i2c bus devices.",
                                        "return": "i2c bus devices list, int type, is the i2c bus id.",
                                        "maixpy": "maix.peripheral.i2c.list_devices",
                                        "py_doc": "Get supported i2c bus devices.\n\nReturns: i2c bus devices list, int type, is the i2c bus id.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> list_devices()",
                                    "py_def": "def list_devices() -> list[int]"
                                },
                                "I2C": {
                                    "type": "class",
                                    "name": "I2C",
                                    "doc": {
                                        "brief": "Peripheral i2c class",
                                        "maixpy": "maix.peripheral.i2c.I2C",
                                        "py_doc": "Peripheral i2c class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "I2C",
                                            "doc": {
                                                "brief": "I2C Device constructor\\nthis constructor will be export to MaixPy as _maix.example.Example.__init__",
                                                "param": {
                                                    "id": "direction [in], i2c bus id, int type, e.g. 0, 1, 2",
                                                    "freq": "direction [in], i2c clock, int type, default is 100000(100kbit/s), will auto set fast mode if freq > 100000.",
                                                    "mode": "direction [in], mode of i2c, i2c.Mode.SLAVE or i2c.Mode.MASTER.",
                                                    "addr_size": "direction [in], address length of i2c, i2c.AddrSize.SEVEN_BIT or i2c.AddrSize.TEN_BIT."
                                                },
                                                "throw": "err::Exception if open i2c device failed.",
                                                "maixpy": "maix.peripheral.i2c.I2C.__init__",
                                                "py_doc": "I2C Device constructor\nthis constructor will be export to MaixPy as _maix.example.Example.__init__\n\nArgs:\n  - id: direction [in], i2c bus id, int type, e.g. 0, 1, 2\n  - freq: direction [in], i2c clock, int type, default is 100000(100kbit/s), will auto set fast mode if freq > 100000.\n  - mode: direction [in], mode of i2c, i2c.Mode.SLAVE or i2c.Mode.MASTER.\n  - addr_size: direction [in], address length of i2c, i2c.AddrSize.SEVEN_BIT or i2c.AddrSize.TEN_BIT.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "i2c::Mode",
                                                    "mode",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "100000"
                                                ],
                                                [
                                                    "i2c::AddrSize",
                                                    "addr_size",
                                                    "i2c::AddrSize::SEVEN_BIT"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "I2C(int id, i2c::Mode mode, int freq = 100000, i2c::AddrSize addr_size = i2c::AddrSize::SEVEN_BIT)",
                                            "py_def": "def __init__(self, id: int, mode: Mode, freq: int = 100000, addr_size: AddrSize = ...) -> None"
                                        },
                                        "scan": {
                                            "type": "func",
                                            "name": "scan",
                                            "doc": {
                                                "brief": "scan all i2c salve address on the bus",
                                                "param": {
                                                    "addr": "If -1, only scan this addr, or scan from 0x08~0x77, default -1."
                                                },
                                                "return": "the list of i2c slave address, int list type.",
                                                "maixpy": "maix.peripheral.i2c.I2C.scan",
                                                "py_doc": "scan all i2c salve address on the bus\n\nArgs:\n  - addr: If -1, only scan this addr, or scan from 0x08~0x77, default -1.\n\n\nReturns: the list of i2c slave address, int list type.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "std::vector<int>",
                                            "static": false,
                                            "def": "std::vector<int> scan(int addr = -1)",
                                            "py_def": "def scan(self, addr: int = -1) -> list[int]"
                                        },
                                        "writeto": {
                                            "type": "func",
                                            "name": "writeto",
                                            "doc": {
                                                "brief": "write data to i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "data": "direction [in], data to write, bytes type.\nNote: The range of value should be in [0,255]."
                                                },
                                                "return": "if success, return the length of written data, error occurred will return -err::Err.",
                                                "maixpy": "maix.peripheral.i2c.I2C.writeto",
                                                "py_doc": "write data to i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - data: direction [in], data to write, bytes type.\nNote: The range of value should be in [0,255].\n\n\nReturns: if success, return the length of written data, error occurred will return -err::Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "const Bytes &",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int writeto(int addr, const Bytes &data)",
                                            "py_def": "def writeto(self, addr: int, data: maix.Bytes(bytes)) -> int"
                                        },
                                        "readfrom": {
                                            "type": "func",
                                            "name": "readfrom",
                                            "doc": {
                                                "brief": "read data from i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "len": "direction [in], data length to read, int type"
                                                },
                                                "return": "the list of data read from i2c slave, bytes type, you should delete it after use in C++.\nIf read failed, return nullptr in C++, None in MaixPy.",
                                                "maixpy": "maix.peripheral.i2c.I2C.readfrom",
                                                "py_doc": "read data from i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - len: direction [in], data length to read, int type\n\n\nReturns: the list of data read from i2c slave, bytes type, you should delete it after use in C++.\nIf read failed, return nullptr in C++, None in MaixPy.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "len",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes* readfrom(int addr, int len)",
                                            "py_def": "def readfrom(*args, **kwargs)"
                                        },
                                        "writeto_mem": {
                                            "type": "func",
                                            "name": "writeto_mem",
                                            "doc": {
                                                "brief": "write data to i2c slave's memory address",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "mem_addr": "direction [in], memory address want to write, int type.",
                                                    "data": "direction [in], data to write, bytes type.",
                                                    "mem_addr_size": "direction [in], memory address size, default is 8.",
                                                    "mem_addr_le": "direction [in], memory address little endian, default is false, that is send high byte first."
                                                },
                                                "return": "data length written if success, error occurred will return -err::Err.",
                                                "maixpy": "maix.peripheral.i2c.I2C.writeto_mem",
                                                "py_doc": "write data to i2c slave's memory address\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - mem_addr: direction [in], memory address want to write, int type.\n  - data: direction [in], data to write, bytes type.\n  - mem_addr_size: direction [in], memory address size, default is 8.\n  - mem_addr_le: direction [in], memory address little endian, default is false, that is send high byte first.\n\n\nReturns: data length written if success, error occurred will return -err::Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mem_addr",
                                                    null
                                                ],
                                                [
                                                    "const Bytes &",
                                                    "data",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mem_addr_size",
                                                    "8"
                                                ],
                                                [
                                                    "bool",
                                                    "mem_addr_le",
                                                    "false"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int writeto_mem(int addr, int mem_addr, const Bytes &data, int mem_addr_size = 8, bool mem_addr_le = false)",
                                            "py_def": "def writeto_mem(self, addr: int, mem_addr: int, data: maix.Bytes(bytes), mem_addr_size: int = 8, mem_addr_le: bool = False) -> int"
                                        },
                                        "readfrom_mem": {
                                            "type": "func",
                                            "name": "readfrom_mem",
                                            "doc": {
                                                "brief": "read data from i2c slave",
                                                "param": {
                                                    "addr": "direction [in], i2c slave address, int type",
                                                    "mem_addr": "direction [in], memory address want to read, int type.",
                                                    "len": "direction [in], data length to read, int type",
                                                    "mem_addr_size": "direction [in], memory address size, default is 8.",
                                                    "mem_addr_le": "direction [in], memory address little endian, default is false, that is send high byte first."
                                                },
                                                "return": "the list of data read from i2c slave, bytes type, you should delete it after use in C++.\nIf read failed, return nullptr in C++, None in MaixPy.",
                                                "maixpy": "maix.peripheral.i2c.I2C.readfrom_mem",
                                                "py_doc": "read data from i2c slave\n\nArgs:\n  - addr: direction [in], i2c slave address, int type\n  - mem_addr: direction [in], memory address want to read, int type.\n  - len: direction [in], data length to read, int type\n  - mem_addr_size: direction [in], memory address size, default is 8.\n  - mem_addr_le: direction [in], memory address little endian, default is false, that is send high byte first.\n\n\nReturns: the list of data read from i2c slave, bytes type, you should delete it after use in C++.\nIf read failed, return nullptr in C++, None in MaixPy.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mem_addr",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "len",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "mem_addr_size",
                                                    "8"
                                                ],
                                                [
                                                    "bool",
                                                    "mem_addr_le",
                                                    "false"
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes* readfrom_mem(int addr, int mem_addr, int len, int mem_addr_size = 8, bool mem_addr_le = false)",
                                            "py_def": "def readfrom_mem(*args, **kwargs)"
                                        }
                                    },
                                    "def": "class I2C"
                                }
                            },
                            "auto_add": true
                        },
                        "spi": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.spi module"
                            },
                            "members": {
                                "Mode": {
                                    "type": "enum",
                                    "name": "Mode",
                                    "doc": {
                                        "brief": "SPI mode enum",
                                        "maixpy": "maix.peripheral.spi.Mode",
                                        "py_doc": "SPI mode enum"
                                    },
                                    "values": [
                                        [
                                            "MASTER",
                                            "0x0",
                                            "spi master mode"
                                        ],
                                        [
                                            "SLAVE",
                                            "0x1",
                                            "spi slave mode"
                                        ]
                                    ],
                                    "def": "enum Mode\n    {\n        MASTER = 0x0, // spi master mode\n        SLAVE = 0x1,  // spi slave mode\n    }"
                                },
                                "SPI": {
                                    "type": "class",
                                    "name": "SPI",
                                    "doc": {
                                        "brief": "Peripheral spi class",
                                        "maixpy": "maix.peripheral.spi.SPI",
                                        "py_doc": "Peripheral spi class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "SPI",
                                            "doc": {
                                                "brief": "SPI constructor",
                                                "param": {
                                                    "id": "direction [in], spi bus id, int type",
                                                    "mode": "direction [in], mode of spi, spi.Mode type, spi.Mode.MASTER or spi.Mode.SLAVE.",
                                                    "freq": "direction [in], freq of spi, int type",
                                                    "polarity": "direction [in], polarity of spi, 0 means idle level of clock is low, 1 means high, int type, default is 0.",
                                                    "phase": "direction [in], phase of spi, 0 means data is captured on the first edge of the SPI clock cycle, 1 means second, int type, default is 0.",
                                                    "bits": "direction [in], bits of spi, int type, default is 8.",
                                                    "cs_enable": "direction [in], cs pin active level, default is 0(low)",
                                                    "soft_cs": "direction [in], not use hardware cs, bool type, if set true, you can operate cs pin use gpio manually.",
                                                    "cs": "direction [in], soft cs pin number, std::string type, default is \"GPIOA19\", if SPI support multi hardware cs, you can set it to other value."
                                                },
                                                "maixpy": "maix.peripheral.spi.SPI.__init__",
                                                "py_doc": "SPI constructor\n\nArgs:\n  - id: direction [in], spi bus id, int type\n  - mode: direction [in], mode of spi, spi.Mode type, spi.Mode.MASTER or spi.Mode.SLAVE.\n  - freq: direction [in], freq of spi, int type\n  - polarity: direction [in], polarity of spi, 0 means idle level of clock is low, 1 means high, int type, default is 0.\n  - phase: direction [in], phase of spi, 0 means data is captured on the first edge of the SPI clock cycle, 1 means second, int type, default is 0.\n  - bits: direction [in], bits of spi, int type, default is 8.\n  - cs_enable: direction [in], cs pin active level, default is 0(low)\n  - soft_cs: direction [in], not use hardware cs, bool type, if set true, you can operate cs pin use gpio manually.\n  - cs: direction [in], soft cs pin number, std::string type, default is \"GPIOA19\", if SPI support multi hardware cs, you can set it to other value.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "spi::Mode",
                                                    "mode",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "polarity",
                                                    "0"
                                                ],
                                                [
                                                    "int",
                                                    "phase",
                                                    "0"
                                                ],
                                                [
                                                    "int",
                                                    "bits",
                                                    "8"
                                                ],
                                                [
                                                    "unsigned char",
                                                    "cs_enable",
                                                    "0"
                                                ],
                                                [
                                                    "bool",
                                                    "soft_cs",
                                                    "false"
                                                ],
                                                [
                                                    "std::string",
                                                    "cs",
                                                    "\"GPIOA19\""
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "SPI(int id, spi::Mode mode, int freq, int polarity = 0, int phase = 0,\n            int bits = 8, unsigned char cs_enable=0, bool soft_cs = false, std::string cs = \"GPIOA19\")",
                                            "py_def": "def __init__(self, id: int, mode: Mode, freq: int, polarity: int = 0, phase: int = 0, bits: int = 8, cs_enable: int = 0, soft_cs: bool = False, cs: str = 'GPIOA19') -> None"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "read data from spi",
                                                "param": {
                                                    "length": "direction [in], read length, int type"
                                                },
                                                "return": "bytes data, Bytes type in C++, bytes type in MaixPy. You need to delete it manually after use in C++.",
                                                "maixpy": "maix.peripheral.spi.SPI.read",
                                                "py_doc": "read data from spi\n\nArgs:\n  - length: direction [in], read length, int type\n\n\nReturns: bytes data, Bytes type in C++, bytes type in MaixPy. You need to delete it manually after use in C++.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "length",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *read(int length)",
                                            "py_def": "def read(*args, **kwargs)"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "write data to spi",
                                                "param": {
                                                    "data": "direction [in], data to write, Bytes type in C++, bytes type in MaixPy"
                                                },
                                                "return": "write length, int type, if write failed, return -err::Err code.",
                                                "maixpy": "maix.peripheral.spi.SPI.write",
                                                "py_doc": "write data to spi\n\nArgs:\n  - data: direction [in], data to write, Bytes type in C++, bytes type in MaixPy\n\n\nReturns: write length, int type, if write failed, return -err::Err code.\n"
                                            },
                                            "args": [
                                                [
                                                    "Bytes *",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write(Bytes *data)",
                                            "py_def": "def write(self, data: maix.Bytes(bytes)) -> int"
                                        },
                                        "write_read": {
                                            "type": "func",
                                            "name": "write_read",
                                            "doc": {
                                                "brief": "write data to spi and read data from spi at the same time.",
                                                "param": {
                                                    "data": "direction [in], data to write, Bytes type in C++, bytes type in MaixPy",
                                                    "read_len": "direction [in], read length, int type, should > 0."
                                                },
                                                "return": "read data, Bytes type in C++, bytes type in MaixPy. You need to delete it manually after use in C++.",
                                                "maixpy": "maix.peripheral.spi.SPI.write_read",
                                                "py_doc": "write data to spi and read data from spi at the same time.\n\nArgs:\n  - data: direction [in], data to write, Bytes type in C++, bytes type in MaixPy\n  - read_len: direction [in], read length, int type, should > 0.\n\n\nReturns: read data, Bytes type in C++, bytes type in MaixPy. You need to delete it manually after use in C++.\n"
                                            },
                                            "args": [
                                                [
                                                    "Bytes *",
                                                    "data",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "read_len",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *write_read(Bytes *data, int read_len)",
                                            "py_def": "def write_read(*args, **kwargs)"
                                        },
                                        "is_busy": {
                                            "type": "func",
                                            "name": "is_busy",
                                            "doc": {
                                                "brief": "get busy status of spi",
                                                "return": "busy status, bool type",
                                                "maixpy": "maix.peripheral.spi.SPI.is_busy",
                                                "py_doc": "get busy status of spi\n\nReturns: busy status, bool type\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_busy()",
                                            "py_def": "def is_busy(self) -> bool"
                                        }
                                    },
                                    "def": "class SPI"
                                }
                            },
                            "auto_add": true
                        },
                        "pwm": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.pwm module"
                            },
                            "members": {
                                "PWM": {
                                    "type": "class",
                                    "name": "PWM",
                                    "doc": {
                                        "brief": "Peripheral pwm class",
                                        "maixpy": "maix.peripheral.pwm.PWM",
                                        "py_doc": "Peripheral pwm class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "PWM",
                                            "doc": {
                                                "brief": "PWM constructor",
                                                "param": {
                                                    "pin": "direction [in], pwm id, int type, like 0, 1, 2 etc.",
                                                    "freq": "direction [in], pwm frequency, unit: Hz. int type. default is 1000",
                                                    "duty": "direction [in], pwm duty. double type. range is [0, 100], default is 0.",
                                                    "enable": "direction [in], enable pwm output right now. bool type. default is true, if false, you need to call enable() to enable pwm output.",
                                                    "duty_val": "direction [in], pwm duty value, int type. default -1 means not set and auto calculate by freq and duty.\nThis arg directly set pwm duty value, if set, will ignore duty arg.\nduty_val = duty / 100 * T_ns, T_ns = 1 / freq * 1000000000."
                                                },
                                                "throw": "If args error or init pwm failed, will throw err::Exception",
                                                "maixpy": "maix.peripheral.pwm.PWM.__init__",
                                                "py_doc": "PWM constructor\n\nArgs:\n  - pin: direction [in], pwm id, int type, like 0, 1, 2 etc.\n  - freq: direction [in], pwm frequency, unit: Hz. int type. default is 1000\n  - duty: direction [in], pwm duty. double type. range is [0, 100], default is 0.\n  - enable: direction [in], enable pwm output right now. bool type. default is true, if false, you need to call enable() to enable pwm output.\n  - duty_val: direction [in], pwm duty value, int type. default -1 means not set and auto calculate by freq and duty.\nThis arg directly set pwm duty value, if set, will ignore duty arg.\nduty_val = duty / 100 * T_ns, T_ns = 1 / freq * 1000000000.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "freq",
                                                    "1000"
                                                ],
                                                [
                                                    "double",
                                                    "duty",
                                                    "0"
                                                ],
                                                [
                                                    "bool",
                                                    "enable",
                                                    "true"
                                                ],
                                                [
                                                    "int",
                                                    "duty_val",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "PWM(int id, int freq = 1000, double duty = 0, bool enable = true, int duty_val = -1)",
                                            "py_def": "def __init__(self, id: int, freq: int = 1000, duty: float = 0, enable: bool = True, duty_val: int = -1) -> None"
                                        },
                                        "duty": {
                                            "type": "func",
                                            "name": "duty",
                                            "doc": {
                                                "brief": "get or set pwm duty",
                                                "param": {
                                                    "duty": "direction [in], pwm duty, double type, value in [0, 100], default -1 means only read."
                                                },
                                                "return": "current duty, float type, if set and set failed will return -err::Err",
                                                "maixpy": "maix.peripheral.pwm.PWM.duty",
                                                "py_doc": "get or set pwm duty\n\nArgs:\n  - duty: direction [in], pwm duty, double type, value in [0, 100], default -1 means only read.\n\n\nReturns: current duty, float type, if set and set failed will return -err::Err\n"
                                            },
                                            "args": [
                                                [
                                                    "double",
                                                    "duty",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "double",
                                            "static": false,
                                            "def": "double duty(double duty = -1)",
                                            "py_def": "def duty(self, duty: float = -1) -> float"
                                        },
                                        "duty_val": {
                                            "type": "func",
                                            "name": "duty_val",
                                            "doc": {
                                                "brief": "set pwm duty value",
                                                "param": {
                                                    "duty_val": "direction [in], pwm duty value. int type. default is -1\nduty_val > 0 means set duty_val\nduty_val == -1 or not set, return current duty_val"
                                                },
                                                "return": "int type\nwhen get duty_val, return current duty_val, else return -err::Err code.",
                                                "maixpy": "maix.peripheral.pwm.PWM.duty_val",
                                                "py_doc": "set pwm duty value\n\nArgs:\n  - duty_val: direction [in], pwm duty value. int type. default is -1\nduty_val > 0 means set duty_val\nduty_val == -1 or not set, return current duty_val\n\n\nReturns: int type\nwhen get duty_val, return current duty_val, else return -err::Err code.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "duty_val",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int duty_val(int duty_val = -1)",
                                            "py_def": "def duty_val(self, duty_val: int = -1) -> int"
                                        },
                                        "freq": {
                                            "type": "func",
                                            "name": "freq",
                                            "doc": {
                                                "brief": "get or set pwm frequency",
                                                "param": {
                                                    "freq": "direction [in], pwm frequency. int type. default is -1\nfreq >= 0, set freq\nfreq == -1 or not set, return current freq"
                                                },
                                                "return": "int type, current freq, if set and set failed will return -err::Err",
                                                "maixpy": "maix.peripheral.pwm.PWM.freq",
                                                "py_doc": "get or set pwm frequency\n\nArgs:\n  - freq: direction [in], pwm frequency. int type. default is -1\nfreq >= 0, set freq\nfreq == -1 or not set, return current freq\n\n\nReturns: int type, current freq, if set and set failed will return -err::Err\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "freq",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int freq(int freq = -1)",
                                            "py_def": "def freq(self, freq: int = -1) -> int"
                                        },
                                        "enable": {
                                            "type": "func",
                                            "name": "enable",
                                            "doc": {
                                                "brief": "set pwm enable",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.pwm.PWM.enable",
                                                "py_doc": "set pwm enable\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err enable()",
                                            "py_def": "def enable(self) -> maix.err.Err"
                                        },
                                        "disable": {
                                            "type": "func",
                                            "name": "disable",
                                            "doc": {
                                                "brief": "set pwm disable",
                                                "return": "err::Err type, err.Err.ERR_NONE means success",
                                                "maixpy": "maix.peripheral.pwm.PWM.disable",
                                                "py_doc": "set pwm disable\n\nReturns: err::Err type, err.Err.ERR_NONE means success\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err disable()",
                                            "py_def": "def disable(self) -> maix.err.Err"
                                        },
                                        "is_enabled": {
                                            "type": "func",
                                            "name": "is_enabled",
                                            "doc": {
                                                "brief": "get pwm enable status",
                                                "return": "bool type, true means enable, false means disable",
                                                "maixpy": "maix.peripheral.pwm.PWM.is_enabled",
                                                "py_doc": "get pwm enable status\n\nReturns: bool type, true means enable, false means disable\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_enabled()",
                                            "py_def": "def is_enabled(self) -> bool"
                                        }
                                    },
                                    "def": "class PWM"
                                }
                            },
                            "auto_add": true
                        },
                        "wdt": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.wdt module"
                            },
                            "members": {
                                "WDT": {
                                    "type": "class",
                                    "name": "WDT",
                                    "doc": {
                                        "brief": "Peripheral wdt class",
                                        "maixpy": "maix.peripheral.wdt.WDT",
                                        "py_doc": "Peripheral wdt class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "WDT",
                                            "doc": {
                                                "brief": "WDT constructor, after construct, the wdt will auto start.",
                                                "param": {
                                                    "id": "direction [in], id of wdt, int type",
                                                    "feed_ms": "direction [in], feed interval, int type, unit is ms, you must feed wdt in this interval, or system will restart."
                                                },
                                                "maixpy": "maix.peripheral.wdt.WDT.__init__",
                                                "py_doc": "WDT constructor, after construct, the wdt will auto start.\n\nArgs:\n  - id: direction [in], id of wdt, int type\n  - feed_ms: direction [in], feed interval, int type, unit is ms, you must feed wdt in this interval, or system will restart.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "id",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "feed_ms",
                                                    null
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "WDT(int id, int feed_ms)",
                                            "py_def": "def __init__(self, id: int, feed_ms: int) -> None"
                                        },
                                        "feed": {
                                            "type": "func",
                                            "name": "feed",
                                            "doc": {
                                                "brief": "feed wdt",
                                                "return": "error code, if feed success, return err::ERR_NONE",
                                                "maixpy": "maix.peripheral.wdt.WDT.feed",
                                                "py_doc": "feed wdt\n\nReturns: error code, if feed success, return err::ERR_NONE\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int feed()",
                                            "py_def": "def feed(self) -> int"
                                        },
                                        "stop": {
                                            "type": "func",
                                            "name": "stop",
                                            "doc": {
                                                "brief": "stop wdt",
                                                "maixpy": "maix.peripheral.wdt.WDT.stop",
                                                "py_doc": "stop wdt"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int stop()",
                                            "py_def": "def stop(self) -> int"
                                        },
                                        "restart": {
                                            "type": "func",
                                            "name": "restart",
                                            "doc": {
                                                "brief": "restart wdt, stop and start watchdog timer.",
                                                "maixpy": "maix.peripheral.wdt.WDT.restart",
                                                "py_doc": "restart wdt, stop and start watchdog timer."
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int restart()",
                                            "py_def": "def restart(self) -> int"
                                        }
                                    },
                                    "def": "class WDT"
                                }
                            },
                            "auto_add": true
                        },
                        "adc": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.adc module"
                            },
                            "members": {
                                "RES_BIT_8": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "8-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_8",
                                        "py_doc": "8-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "8",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_8 = 8"
                                },
                                "RES_BIT_10": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "10-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_10",
                                        "py_doc": "10-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "10",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_10 = 10"
                                },
                                "RES_BIT_12": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "12-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_12",
                                        "py_doc": "12-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "12",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_12 = 12"
                                },
                                "RES_BIT_16": {
                                    "type": "var",
                                    "name": "",
                                    "doc": {
                                        "brief": "16-bit resolution, supported by the actual hardware",
                                        "maixpy": "maix.peripheral.adc.RES_BIT_16",
                                        "py_doc": "16-bit resolution, supported by the actual hardware"
                                    },
                                    "value": "16",
                                    "static": false,
                                    "readonly": true,
                                    "def": "const int RES_BIT_16 = 16"
                                },
                                "ADC": {
                                    "type": "class",
                                    "name": "ADC",
                                    "doc": {
                                        "brief": "Peripheral adc class",
                                        "maixpy": "maix.peripheral.adc.ADC",
                                        "py_doc": "Peripheral adc class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "ADC",
                                            "doc": {
                                                "brief": "ADC constructor",
                                                "param": {
                                                    "pin": "direction [in], adc pin, int type",
                                                    "resolution": "direction [in], adc resolution. default is -1, means use default resolution\noption:\nresolution = adc.RES_BIT_8, means 8-bit resolution\nresolution = adc.RES_BIT_10, means 10-bit resolution\nresolution = adc.RES_BIT_12, means 12-bit resolution\nresolution = adc.RES_BIT_16, means 16-bit resolution\nthe default resolution is determined by actual hardware.",
                                                    "vref": "direction [in], adc refer voltage. default is -1, means use default refer voltage.\nthe default vref is determined by actual hardware. range: [0.0, 10.0]"
                                                },
                                                "maixpy": "maix.peripheral.adc.ADC.__init__",
                                                "py_doc": "ADC constructor\n\nArgs:\n  - pin: direction [in], adc pin, int type\n  - resolution: direction [in], adc resolution. default is -1, means use default resolution\noption:\nresolution = adc.RES_BIT_8, means 8-bit resolution\nresolution = adc.RES_BIT_10, means 10-bit resolution\nresolution = adc.RES_BIT_12, means 12-bit resolution\nresolution = adc.RES_BIT_16, means 16-bit resolution\nthe default resolution is determined by actual hardware.\n  - vref: direction [in], adc refer voltage. default is -1, means use default refer voltage.\nthe default vref is determined by actual hardware. range: [0.0, 10.0]\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "pin",
                                                    null
                                                ],
                                                [
                                                    "int",
                                                    "resolution",
                                                    null
                                                ],
                                                [
                                                    "float",
                                                    "vref",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "ADC(int pin, int resolution, float vref = -1)",
                                            "py_def": "def __init__(self, pin: int, resolution: int, vref: float = -1) -> None"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "read adc value",
                                                "return": "adc data, int type\nif resolution is 8-bit, return value range is [0, 255]\nif resolution is 10-bit, return value range is [0, 1023]\nif resolution is 12-bit, return value range is [0, 4095]\nif resolution is 16-bit, return value range is [0, 65535]",
                                                "maixpy": "maix.peripheral.adc.ADC.read",
                                                "py_doc": "read adc value\n\nReturns: adc data, int type\nif resolution is 8-bit, return value range is [0, 255]\nif resolution is 10-bit, return value range is [0, 1023]\nif resolution is 12-bit, return value range is [0, 4095]\nif resolution is 16-bit, return value range is [0, 65535]\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int read()",
                                            "py_def": "def read(self) -> int"
                                        },
                                        "read_vol": {
                                            "type": "func",
                                            "name": "read_vol",
                                            "doc": {
                                                "brief": "read adc voltage",
                                                "return": "adc voltage, float type\u3002the range is [0.0, vref]",
                                                "maixpy": "maix.peripheral.adc.ADC.read_vol",
                                                "py_doc": "read adc voltage\n\nReturns: adc voltage, float type\u3002the range is [0.0, vref]\n"
                                            },
                                            "args": [],
                                            "ret_type": "float",
                                            "static": false,
                                            "def": "float read_vol()",
                                            "py_def": "def read_vol(self) -> float"
                                        }
                                    },
                                    "def": "class ADC"
                                }
                            },
                            "auto_add": true
                        },
                        "pinmap": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.pinmap module"
                            },
                            "members": {
                                "get_pins": {
                                    "type": "func",
                                    "name": "get_pins",
                                    "doc": {
                                        "brief": "Get all pins of devices",
                                        "return": "pin name list, string type.",
                                        "maixpy": "maix.peripheral.pinmap.get_pins",
                                        "py_doc": "Get all pins of devices\n\nReturns: pin name list, string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> get_pins()",
                                    "py_def": "def get_pins() -> list[str]"
                                },
                                "get_pin_functions": {
                                    "type": "func",
                                    "name": "get_pin_functions",
                                    "doc": {
                                        "brief": "Get all function of a pin",
                                        "param": {
                                            "pin": "pin name, string type."
                                        },
                                        "return": "function list, function name is string type.",
                                        "throw": "If pin name error will throwout err.Err.ERR_ARGS error.",
                                        "maixpy": "maix.peripheral.pinmap.get_pin_functions",
                                        "py_doc": "Get all function of a pin\n\nArgs:\n  - pin: pin name, string type.\n\n\nReturns: function list, function name is string type.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "pin",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> get_pin_functions(const std::string &pin)",
                                    "py_def": "def get_pin_functions(pin: str) -> list[str]"
                                },
                                "set_pin_function": {
                                    "type": "func",
                                    "name": "set_pin_function",
                                    "doc": {
                                        "brief": "Set function of a pin",
                                        "param": {
                                            "pin": "pin name, string type.",
                                            "func": "which function should this pin use."
                                        },
                                        "return": "if set ok, will return err.Err.ERR_NONE, else error occurs.",
                                        "maixpy": "maix.peripheral.pinmap.set_pin_function",
                                        "py_doc": "Set function of a pin\n\nArgs:\n  - pin: pin name, string type.\n  - func: which function should this pin use.\n\n\nReturns: if set ok, will return err.Err.ERR_NONE, else error occurs.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "pin",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "func",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err set_pin_function(const std::string &pin, const std::string &func)",
                                    "py_def": "def set_pin_function(pin: str, func: str) -> maix.err.Err"
                                }
                            },
                            "auto_add": true
                        },
                        "uart": {
                            "type": "module",
                            "doc": {
                                "brief": "maix uart peripheral driver",
                                "maixpy": "maix.peripheral.uart",
                                "py_doc": "maix uart peripheral driver"
                            },
                            "members": {
                                "PARITY": {
                                    "type": "enum",
                                    "name": "PARITY",
                                    "doc": {
                                        "brief": "uart parity enum",
                                        "maixpy": "maix.peripheral.uart.PARITY",
                                        "py_doc": "uart parity enum"
                                    },
                                    "values": [
                                        [
                                            "PARITY_NONE",
                                            "0x00",
                                            "no parity"
                                        ],
                                        [
                                            "PARITY_ODD",
                                            "0x01",
                                            "odd parity"
                                        ],
                                        [
                                            "PARITY_EVEN",
                                            "0x02",
                                            "even parity"
                                        ],
                                        [
                                            "PARITY_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum PARITY\n    {\n        PARITY_NONE = 0x00,  // no parity\n        PARITY_ODD  = 0x01,  // odd parity\n        PARITY_EVEN = 0x02,  // even parity\n        PARITY_MAX\n    }"
                                },
                                "STOP": {
                                    "type": "enum",
                                    "name": "STOP",
                                    "doc": {
                                        "brief": "uart stop bits",
                                        "maixpy": "maix.peripheral.uart.STOP",
                                        "py_doc": "uart stop bits"
                                    },
                                    "values": [
                                        [
                                            "STOP_1",
                                            "0x01",
                                            "1 stop bit"
                                        ],
                                        [
                                            "STOP_2",
                                            "0x02",
                                            "2 stop bits"
                                        ],
                                        [
                                            "STOP_1_5",
                                            "0x03",
                                            "1.5 stop bits"
                                        ],
                                        [
                                            "STOP_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum STOP\n    {\n        STOP_1   = 0x01,  // 1 stop bit\n        STOP_2   = 0x02,  // 2 stop bits\n        STOP_1_5 = 0x03,  // 1.5 stop bits\n        STOP_MAX\n    }"
                                },
                                "BITS": {
                                    "type": "enum",
                                    "name": "BITS",
                                    "doc": {
                                        "brief": "uart stop bits",
                                        "maixpy": "maix.peripheral.uart.BITS",
                                        "py_doc": "uart stop bits"
                                    },
                                    "values": [
                                        [
                                            "BITS_5",
                                            "5",
                                            "5 data bits"
                                        ],
                                        [
                                            "BITS_6",
                                            "6",
                                            "6 data bits"
                                        ],
                                        [
                                            "BITS_7",
                                            "7",
                                            "7 data bits"
                                        ],
                                        [
                                            "BITS_8",
                                            "8",
                                            "8 data bits"
                                        ],
                                        [
                                            "BITS_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum BITS\n    {\n        BITS_5 = 5,  // 5 data bits\n        BITS_6 = 6,  // 6 data bits\n        BITS_7 = 7,  // 7 data bits\n        BITS_8 = 8,  // 8 data bits\n        BITS_MAX\n    }"
                                },
                                "FLOW_CTRL": {
                                    "type": "enum",
                                    "name": "FLOW_CTRL",
                                    "doc": {
                                        "brief": "uart flow control",
                                        "maixpy": "maix.peripheral.uart.FLOW_CTRL",
                                        "py_doc": "uart flow control"
                                    },
                                    "values": [
                                        [
                                            "FLOW_CTRL_NONE",
                                            "0",
                                            "no flow control"
                                        ],
                                        [
                                            "FLOW_CTRL_HW",
                                            "1",
                                            "hardware flow control"
                                        ],
                                        [
                                            "FLOW_CTRL_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum FLOW_CTRL\n    {\n        FLOW_CTRL_NONE = 0,  // no flow control\n        FLOW_CTRL_HW   = 1,  // hardware flow control\n        FLOW_CTRL_MAX\n    }"
                                },
                                "list_devices": {
                                    "type": "func",
                                    "name": "list_devices",
                                    "doc": {
                                        "brief": "Get supported uart ports.",
                                        "return": "uart ports list, string type.",
                                        "maixpy": "maix.peripheral.uart.list_devices",
                                        "py_doc": "Get supported uart ports.\n\nReturns: uart ports list, string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> list_devices()",
                                    "py_def": "def list_devices() -> list[str]"
                                },
                                "UART": {
                                    "type": "class",
                                    "name": "UART",
                                    "doc": {
                                        "brief": "maix uart peripheral driver",
                                        "maixpy": "maix.peripheral.uart.UART",
                                        "py_doc": "maix uart peripheral driver"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "UART",
                                            "doc": {
                                                "brief": "UART constructor. You need to call open() to open the device.",
                                                "param": {
                                                    "port": "uart port. string type, can get it by uart.list_devices().\nIf empty, will not open device in constructor, default empty.\nif not empty, will auto open device in constructor, open fail will throw err.Exception.",
                                                    "baudrate": "baudrate of uart. int type, default 115200.",
                                                    "databits": "databits, values @see uart.DATA_BITS",
                                                    "parity": "parity, values @see uart.PARITY",
                                                    "stopbits": "stopbits, values @see uart.STOP_BITS",
                                                    "flow_control": "flow_control, values @see uart.FLOW_CTRL"
                                                },
                                                "maixpy": "maix.peripheral.uart.UART.__init__",
                                                "py_doc": "UART constructor. You need to call open() to open the device.\n\nArgs:\n  - port: uart port. string type, can get it by uart.list_devices().\nIf empty, will not open device in constructor, default empty.\nif not empty, will auto open device in constructor, open fail will throw err.Exception.\n  - baudrate: baudrate of uart. int type, default 115200.\n  - databits: databits, values @see uart.DATA_BITS\n  - parity: parity, values @see uart.PARITY\n  - stopbits: stopbits, values @see uart.STOP_BITS\n  - flow_control: flow_control, values @see uart.FLOW_CTRL\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "port",
                                                    "\"\""
                                                ],
                                                [
                                                    "int",
                                                    "baudrate",
                                                    "115200"
                                                ],
                                                [
                                                    "uart::BITS",
                                                    "databits",
                                                    "uart::BITS_8"
                                                ],
                                                [
                                                    "uart::PARITY",
                                                    "parity",
                                                    "uart::PARITY_NONE"
                                                ],
                                                [
                                                    "uart::STOP",
                                                    "stopbits",
                                                    "uart::STOP_1"
                                                ],
                                                [
                                                    "uart::FLOW_CTRL",
                                                    "flow_ctrl",
                                                    "uart::FLOW_CTRL_NONE"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "UART(const std::string &port = \"\", int baudrate = 115200, uart::BITS databits = uart::BITS_8,\n            uart::PARITY parity = uart::PARITY_NONE, uart::STOP stopbits = uart::STOP_1,\n            uart::FLOW_CTRL flow_ctrl = uart::FLOW_CTRL_NONE)",
                                            "py_def": "def __init__(self, port: str = '', baudrate: int = 115200, databits: BITS = ..., parity: PARITY = ..., stopbits: STOP = ..., flow_ctrl: FLOW_CTRL = ...) -> None"
                                        },
                                        "set_port": {
                                            "type": "func",
                                            "name": "set_port",
                                            "doc": {
                                                "brief": "Set port",
                                                "param": {
                                                    "port": "uart port. string type, can get it by uart.list_devices()."
                                                },
                                                "return": "set port error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.set_port",
                                                "py_doc": "Set port\n\nArgs:\n  - port: uart port. string type, can get it by uart.list_devices().\n\n\nReturns: set port error code, err.Err type.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "port",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err set_port(const std::string &port)",
                                            "py_def": "def set_port(self, port: str) -> maix.err.Err"
                                        },
                                        "get_port": {
                                            "type": "func",
                                            "name": "get_port",
                                            "doc": {
                                                "brief": "Get port",
                                                "return": "uart port, string type.",
                                                "maixpy": "maix.peripheral.uart.UART.get_port",
                                                "py_doc": "Get port\n\nReturns: uart port, string type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::string",
                                            "static": false,
                                            "def": "std::string get_port()",
                                            "py_def": "def get_port(self) -> str"
                                        },
                                        "set_baudrate": {
                                            "type": "func",
                                            "name": "set_baudrate",
                                            "doc": {
                                                "brief": "Set baud rate",
                                                "param": {
                                                    "baudrate": "baudrate of uart. int type, default 115200."
                                                },
                                                "return": "set baud rate error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.set_baudrate",
                                                "py_doc": "Set baud rate\n\nArgs:\n  - baudrate: baudrate of uart. int type, default 115200.\n\n\nReturns: set baud rate error code, err.Err type.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "baudrate",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err set_baudrate(int baudrate)",
                                            "py_def": "def set_baudrate(self, baudrate: int) -> maix.err.Err"
                                        },
                                        "get_baudrate": {
                                            "type": "func",
                                            "name": "get_baudrate",
                                            "doc": {
                                                "brief": "Get baud rate",
                                                "return": "baud rate, int type.",
                                                "maixpy": "maix.peripheral.uart.UART.get_baudrate",
                                                "py_doc": "Get baud rate\n\nReturns: baud rate, int type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int get_baudrate()",
                                            "py_def": "def get_baudrate(self) -> int"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open uart device, before open, port must be set in constructor or by set_port().\\nIf already opened, do nothing and return err.ERR_NONE.",
                                                "return": "open device error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.open",
                                                "py_doc": "Open uart device, before open, port must be set in constructor or by set_port().\nIf already opened, do nothing and return err.ERR_NONE.\n\nReturns: open device error code, err.Err type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open()",
                                            "py_def": "def open(self) -> maix.err.Err"
                                        },
                                        "is_open": {
                                            "type": "func",
                                            "name": "is_open",
                                            "doc": {
                                                "brief": "Check if device is opened.",
                                                "return": "true if opened, false if not opened.",
                                                "maixpy": "maix.peripheral.uart.UART.is_open",
                                                "py_doc": "Check if device is opened.\n\nReturns: true if opened, false if not opened.\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_open()",
                                            "py_def": "def is_open(self) -> bool"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close uart device, if already closed, do nothing and return err.ERR_NONE.",
                                                "return": "close device error code, err.Err type.",
                                                "maixpy": "maix.peripheral.uart.UART.close",
                                                "py_doc": "Close uart device, if already closed, do nothing and return err.ERR_NONE.\n\nReturns: close device error code, err.Err type.\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()",
                                            "py_def": "def close(self) -> maix.err.Err"
                                        },
                                        "set_received_callback": {
                                            "type": "func",
                                            "name": "set_received_callback",
                                            "doc": {
                                                "brief": "Set received callback function",
                                                "param": {
                                                    "callback": "function to call when received data"
                                                },
                                                "maixpy": "maix.peripheral.uart.UART.set_received_callback",
                                                "py_doc": "Set received callback function\n\nArgs:\n  - callback: function to call when received data\n"
                                            },
                                            "args": [
                                                [
                                                    "std::function<void(uart::UART&, Bytes&)>",
                                                    "callback",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void set_received_callback(std::function<void(uart::UART&, Bytes&)> callback)",
                                            "py_def": "def set_received_callback(self, callback: typing.Callable[[UART, maix.Bytes(bytes)], None]) -> None"
                                        },
                                        "write_str": {
                                            "type": "func",
                                            "name": "write_str",
                                            "doc": {
                                                "brief": "Send string data",
                                                "param": {
                                                    "str": "string data"
                                                },
                                                "return": "sent data length, < 0 means error, value is -err.Err.",
                                                "maixpy": "maix.peripheral.uart.UART.write_str",
                                                "py_doc": "Send string data\n\nArgs:\n  - str: string data\n\n\nReturns: sent data length, < 0 means error, value is -err.Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "const std::string &",
                                                    "str",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write_str(const std::string &str)",
                                            "py_def": "def write_str(self, str: str) -> int"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "Send data to uart",
                                                "param": {
                                                    "data": "direction [in], data to send, bytes type. If you want to send str type, use str.encode() to convert."
                                                },
                                                "return": "sent length, int type, if < 0 means error, value is -err.Err.",
                                                "maixpy": "maix.peripheral.uart.UART.write",
                                                "py_doc": "Send data to uart\n\nArgs:\n  - data: direction [in], data to send, bytes type. If you want to send str type, use str.encode() to convert.\n\n\nReturns: sent length, int type, if < 0 means error, value is -err.Err.\n"
                                            },
                                            "args": [
                                                [
                                                    "Bytes &",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int write(Bytes &data)",
                                            "py_def": "def write(self, data: maix.Bytes(bytes)) -> int"
                                        },
                                        "available": {
                                            "type": "func",
                                            "name": "available",
                                            "doc": {
                                                "brief": "Check if data available or wait data available.",
                                                "param": {
                                                    "timeout": "unit ms, timeout to wait data, default 0.\n0 means check data available and return immediately,\n> 0 means wait until data available or timeout.\n- 1 means wait until data available."
                                                },
                                                "return": "available data number, 0 if timeout or no data, <0 if error, value is -err.Err, can be err::ERR_IO\uff0c err::ERR_CANCEL, err::ERR_NOT_OPEN.",
                                                "throw": "err.Exception if fatal error.",
                                                "maixpy": "maix.peripheral.uart.UART.available",
                                                "py_doc": "Check if data available or wait data available.\n\nArgs:\n  - timeout: unit ms, timeout to wait data, default 0.\n0 means check data available and return immediately,\n> 0 means wait until data available or timeout.\n- 1 means wait until data available.\n\n\nReturns: available data number, 0 if timeout or no data, <0 if error, value is -err.Err, can be err::ERR_IO\uff0c err::ERR_CANCEL, err::ERR_NOT_OPEN.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "timeout",
                                                    "0"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int available(int timeout = 0)",
                                            "py_def": "def available(self, timeout: int = 0) -> int"
                                        },
                                        "read": {
                                            "type": "func",
                                            "name": "read",
                                            "doc": {
                                                "brief": "Recv data from uart",
                                                "param": {
                                                    "len": "max data length want to receive, default -1.\n-1 means read data in uart receive buffer.\n>0 means read len data want to receive.\nother values is invalid.",
                                                    "timeout": "unit ms, timeout to receive data, default 0.\n0 means read data in uart receive buffer and return immediately,\n-1 means block until read len data,\n>0 means block until read len data or timeout."
                                                },
                                                "return": "received data, bytes type.\nAttention, you need to delete the returned object yourself in C++.",
                                                "throw": "Read failed will raise err.Exception error.",
                                                "maixpy": "maix.peripheral.uart.UART.read",
                                                "py_doc": "Recv data from uart\n\nArgs:\n  - len: max data length want to receive, default -1.\n-1 means read data in uart receive buffer.\n>0 means read len data want to receive.\nother values is invalid.\n  - timeout: unit ms, timeout to receive data, default 0.\n0 means read data in uart receive buffer and return immediately,\n-1 means block until read len data,\n>0 means block until read len data or timeout.\n\n\nReturns: received data, bytes type.\nAttention, you need to delete the returned object yourself in C++.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "len",
                                                    "-1"
                                                ],
                                                [
                                                    "int",
                                                    "timeout",
                                                    "0"
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *read(int len = -1, int timeout = 0)",
                                            "py_def": "def read(*args, **kwargs)"
                                        },
                                        "readline": {
                                            "type": "func",
                                            "name": "readline",
                                            "doc": {
                                                "brief": "Read line from uart, that is read until '\\n' or '\\r\\n'.",
                                                "param": {
                                                    "timeout": "unit ms, timeout to receive data, default -1 means block until read '\\n' or '\\r\\n'.\n> 0 means block until read '\\n' or '\\r\\n' or timeout."
                                                },
                                                "return": "received data, bytes type. If timeout will return the current received data despite not read '\\n' or '\\r\\n'.\ne.g. If we want to read b'123\\n', but when we only read b'12', timeout, then return b'12'.",
                                                "maixpy": "maix.peripheral.uart.UART.readline",
                                                "py_doc": "Read line from uart, that is read until '\\n' or '\\r\\n'.\n\nArgs:\n  - timeout: unit ms, timeout to receive data, default -1 means block until read '\\n' or '\\r\\n'.\n> 0 means block until read '\\n' or '\\r\\n' or timeout.\n\n\nReturns: received data, bytes type. If timeout will return the current received data despite not read '\\n' or '\\r\\n'.\ne.g. If we want to read b'123\\n', but when we only read b'12', timeout, then return b'12'.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "timeout",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "Bytes*",
                                            "static": false,
                                            "def": "Bytes *readline(int timeout = -1)",
                                            "py_def": "def readline(*args, **kwargs)"
                                        }
                                    },
                                    "def": "class UART : public comm::CommBase"
                                }
                            },
                            "auto_add": false
                        },
                        "gpio": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.gpio module"
                            },
                            "members": {
                                "Mode": {
                                    "type": "enum",
                                    "name": "Mode",
                                    "doc": {
                                        "brief": "GPIO mode",
                                        "maixpy": "maix.peripheral.gpio.Mode",
                                        "py_doc": "GPIO mode"
                                    },
                                    "values": [
                                        [
                                            "IN",
                                            "0x01",
                                            "input mode"
                                        ],
                                        [
                                            "OUT",
                                            "0x02",
                                            "output mode"
                                        ],
                                        [
                                            "OUT_OD",
                                            "0x03",
                                            "output open drain mode"
                                        ],
                                        [
                                            "MODE_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum Mode\n    {\n        IN     = 0x01,     // input mode\n        OUT    = 0x02,     // output mode\n        OUT_OD = 0x03,     // output open drain mode\n        MODE_MAX\n    }"
                                },
                                "Pull": {
                                    "type": "enum",
                                    "name": "Pull",
                                    "doc": {
                                        "brief": "GPIO pull mode",
                                        "maixpy": "maix.peripheral.gpio.Pull",
                                        "py_doc": "GPIO pull mode"
                                    },
                                    "values": [
                                        [
                                            "PULL_NONE",
                                            "0x00",
                                            "pull none mode"
                                        ],
                                        [
                                            "PULL_UP",
                                            "0x01",
                                            "pull up mode"
                                        ],
                                        [
                                            "PULL_DOWN",
                                            "0x02",
                                            "pull down mode"
                                        ],
                                        [
                                            "PULL_MAX",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum Pull\n    {\n        PULL_NONE = 0x00,  // pull none mode\n        PULL_UP   = 0x01,  // pull up mode\n        PULL_DOWN = 0x02,  // pull down mode\n        PULL_MAX\n    }"
                                },
                                "GPIO": {
                                    "type": "class",
                                    "name": "GPIO",
                                    "doc": {
                                        "brief": "Peripheral gpio class",
                                        "maixpy": "maix.peripheral.gpio.GPIO",
                                        "py_doc": "Peripheral gpio class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "GPIO",
                                            "doc": {
                                                "brief": "GPIO constructor",
                                                "param": {
                                                    "pin": "direction [in], gpio pin name, string type the same as board's pin name, e.g. \"B14\" or \"GPIOB14\", or number string like \"10\" if board no gpiochipe name.",
                                                    "mode": "direction [in], gpio mode. gpio.Mode type, default is gpio.Mode.IN (input) mode.",
                                                    "pull": "direction [in], gpio pull. gpio.Pull type, default is gpio.Pull.PULL_NONE (pull none) mode.\nFor input mode, this will set gpio default status(value), if set to gpio.Pull.PULL_NONE, gpio value will be floating.\nFor output mode, this will set gpio default status(value), if set to gpio.Pull.PULL_UP, gpio value will be 1, else 0."
                                                },
                                                "throw": "err::Exception if open gpio device failed.",
                                                "maixpy": "maix.peripheral.gpio.GPIO.__init__",
                                                "py_doc": "GPIO constructor\n\nArgs:\n  - pin: direction [in], gpio pin name, string type the same as board's pin name, e.g. \"B14\" or \"GPIOB14\", or number string like \"10\" if board no gpiochipe name.\n  - mode: direction [in], gpio mode. gpio.Mode type, default is gpio.Mode.IN (input) mode.\n  - pull: direction [in], gpio pull. gpio.Pull type, default is gpio.Pull.PULL_NONE (pull none) mode.\nFor input mode, this will set gpio default status(value), if set to gpio.Pull.PULL_NONE, gpio value will be floating.\nFor output mode, this will set gpio default status(value), if set to gpio.Pull.PULL_UP, gpio value will be 1, else 0.\n"
                                            },
                                            "args": [
                                                [
                                                    "std::string",
                                                    "pin",
                                                    null
                                                ],
                                                [
                                                    "gpio::Mode",
                                                    "mode",
                                                    "gpio::Mode::IN"
                                                ],
                                                [
                                                    "gpio::Pull",
                                                    "pull",
                                                    "gpio::Pull::PULL_NONE"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "GPIO(std::string pin, gpio::Mode mode = gpio::Mode::IN, gpio::Pull pull = gpio::Pull::PULL_NONE)",
                                            "py_def": "def __init__(self, pin: str, mode: Mode = ..., pull: Pull = ...) -> None"
                                        },
                                        "value": {
                                            "type": "func",
                                            "name": "value",
                                            "doc": {
                                                "brief": "set and get gpio value",
                                                "param": {
                                                    "value": "direction [in], gpio value. int type.\n0, means write gpio to low level\n1, means write gpio to high level\n-1, means read gpio value, not set"
                                                },
                                                "return": "int type, return gpio value, can be 0 or 1",
                                                "maixpy": "maix.peripheral.gpio.GPIO.value",
                                                "py_doc": "set and get gpio value\n\nArgs:\n  - value: direction [in], gpio value. int type.\n0, means write gpio to low level\n1, means write gpio to high level\n-1, means read gpio value, not set\n\n\nReturns: int type, return gpio value, can be 0 or 1\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "value",
                                                    "-1"
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int value(int value = -1)",
                                            "py_def": "def value(self, value: int = -1) -> int"
                                        },
                                        "high": {
                                            "type": "func",
                                            "name": "high",
                                            "doc": {
                                                "brief": "set gpio high (value to 1)",
                                                "maixpy": "maix.peripheral.gpio.GPIO.high",
                                                "py_doc": "set gpio high (value to 1)"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void high()",
                                            "py_def": "def high(self) -> None"
                                        },
                                        "low": {
                                            "type": "func",
                                            "name": "low",
                                            "doc": {
                                                "brief": "set gpio low (value to 0)",
                                                "maixpy": "maix.peripheral.gpio.GPIO.low",
                                                "py_doc": "set gpio low (value to 0)"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void low()",
                                            "py_def": "def low(self) -> None"
                                        },
                                        "toggle": {
                                            "type": "func",
                                            "name": "toggle",
                                            "doc": {
                                                "brief": "gpio toggle",
                                                "maixpy": "maix.peripheral.gpio.GPIO.toggle",
                                                "py_doc": "gpio toggle"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void toggle()",
                                            "py_def": "def toggle(self) -> None"
                                        },
                                        "get_mode": {
                                            "type": "func",
                                            "name": "get_mode",
                                            "doc": {
                                                "brief": "gpio get mode",
                                                "maixpy": "maix.peripheral.gpio.GPIO.get_mode",
                                                "py_doc": "gpio get mode"
                                            },
                                            "args": [],
                                            "ret_type": "gpio::Mode",
                                            "static": false,
                                            "def": "gpio::Mode get_mode()",
                                            "py_def": "def get_mode(self) -> Mode"
                                        },
                                        "get_pull": {
                                            "type": "func",
                                            "name": "get_pull",
                                            "doc": {
                                                "brief": "get gpio pull",
                                                "return": "gpio::Pull type",
                                                "maixpy": "maix.peripheral.gpio.GPIO.get_pull",
                                                "py_doc": "get gpio pull\n\nReturns: gpio::Pull type\n"
                                            },
                                            "args": [],
                                            "ret_type": "gpio::Pull",
                                            "static": false,
                                            "def": "gpio::Pull get_pull()",
                                            "py_def": "def get_pull(self) -> Pull"
                                        },
                                        "reset": {
                                            "type": "func",
                                            "name": "reset",
                                            "doc": {
                                                "brief": "reset gpio",
                                                "param": {
                                                    "mode": "direction [in], gpio mode. gpio.Mode type",
                                                    "pull": "direction [in], gpio pull. gpio.Pull type\nFor input mode, this will set gpio default status(value), if set to gpio.Pull.PULL_NONE, gpio value will be floating.\nFor output mode, this will set gpio default status(value), if set to gpio.Pull.PULL_UP, gpio value will be 1, else 0."
                                                },
                                                "return": "err::Err type",
                                                "maixpy": "maix.peripheral.gpio.GPIO.reset",
                                                "py_doc": "reset gpio\n\nArgs:\n  - mode: direction [in], gpio mode. gpio.Mode type\n  - pull: direction [in], gpio pull. gpio.Pull type\nFor input mode, this will set gpio default status(value), if set to gpio.Pull.PULL_NONE, gpio value will be floating.\nFor output mode, this will set gpio default status(value), if set to gpio.Pull.PULL_UP, gpio value will be 1, else 0.\n\n\nReturns: err::Err type\n"
                                            },
                                            "args": [
                                                [
                                                    "gpio::Mode",
                                                    "mode",
                                                    null
                                                ],
                                                [
                                                    "gpio::Pull",
                                                    "pull",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err reset(gpio::Mode mode, gpio::Pull pull)",
                                            "py_def": "def reset(self, mode: Mode, pull: Pull) -> maix.err.Err"
                                        }
                                    },
                                    "def": "class GPIO"
                                }
                            },
                            "auto_add": true
                        },
                        "hid": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.hid module"
                            },
                            "members": {
                                "DeviceType": {
                                    "type": "enum",
                                    "name": "DeviceType",
                                    "doc": {
                                        "brief": "Device enum of hid",
                                        "maixpy": "maix.peripheral.hid.DeviceType",
                                        "py_doc": "Device enum of hid"
                                    },
                                    "values": [
                                        [
                                            "DEVICE_MOUSE",
                                            "0",
                                            ""
                                        ],
                                        [
                                            "DEVICE_KEYBOARD",
                                            "",
                                            ""
                                        ],
                                        [
                                            "DEVICE_TOUCHPAD",
                                            "",
                                            ""
                                        ]
                                    ],
                                    "def": "enum DeviceType {\n        DEVICE_MOUSE = 0,\n        DEVICE_KEYBOARD,\n        DEVICE_TOUCHPAD\n    }"
                                },
                                "Hid": {
                                    "type": "class",
                                    "name": "Hid",
                                    "doc": {
                                        "brief": "Hid class",
                                        "maixpy": "maix.peripheral.hid.Hid",
                                        "py_doc": "Hid class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "Hid",
                                            "doc": {
                                                "brief": "Hid Device constructor",
                                                "param": {
                                                    "device_type": "Device type, used to select mouse, keyboard, or touchpad.",
                                                    "open": "auto open device in constructor, if false, you need call open() to open device"
                                                },
                                                "maixpy": "maix.peripheral.hid.Hid.__init__",
                                                "py_doc": "Hid Device constructor\n\nArgs:\n  - device_type: Device type, used to select mouse, keyboard, or touchpad.\n  - open: auto open device in constructor, if false, you need call open() to open device\n"
                                            },
                                            "args": [
                                                [
                                                    "hid::DeviceType",
                                                    "device_type",
                                                    null
                                                ],
                                                [
                                                    "bool",
                                                    "open",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Hid(hid::DeviceType device_type, bool open = true)",
                                            "py_def": "def __init__(self, device_type: DeviceType, open: bool = True) -> None"
                                        },
                                        "open": {
                                            "type": "func",
                                            "name": "open",
                                            "doc": {
                                                "brief": "Open hid device",
                                                "return": "err::Err",
                                                "maixpy": "maix.peripheral.hid.Hid.open",
                                                "py_doc": "Open hid device\n\nReturns: err::Err\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err open()",
                                            "py_def": "def open(self) -> maix.err.Err"
                                        },
                                        "close": {
                                            "type": "func",
                                            "name": "close",
                                            "doc": {
                                                "brief": "Close hid device",
                                                "return": "err::Err",
                                                "maixpy": "maix.peripheral.hid.Hid.close",
                                                "py_doc": "Close hid device\n\nReturns: err::Err\n"
                                            },
                                            "args": [],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err close()",
                                            "py_def": "def close(self) -> maix.err.Err"
                                        },
                                        "write": {
                                            "type": "func",
                                            "name": "write",
                                            "doc": {
                                                "brief": "Write data to hid device",
                                                "param": {
                                                    "data": "data to write\nFor the keyboard, 8 bytes of data need to be written, with the format as follows:\ndata =      [0x00,   #\n0x00,   #\n0x00,   # Key value. Refer to the \"Universal Serial Bus HID Usage Tables\" section of the official documentation(https://www.usb.org).\n0x00,   #\n0x00,   #\n0x00,   #\n0x00,   #\n0x00]   #\nFor the mouse, 4 bytes of data need to be written, with the format as follows:\ndata =       [0x00,  # Button state\n0x00: no button pressed\n0x01: press left button\n0x02: press right button\n0x04: press middle button\nx,      # X-axis relative coordinates. Signed number, positive values for x indicate movement to the right\ny,      # Y-axis relative coordinates. Signed number, positive values for y indicate movement downward\n0x00]   # Wheel movement. Signed number, positive values indicate downward movement.\nFor the touchpad, 6 bytes of data need to be written, with the format as follows:\ndata =      [0x00,   # Button state (0: no button pressed, 0x01: press left button, 0x10, press right button.)\nx & 0xFF, (x >> 8) & 0xFF,  # X-axis absolute coordinate, 0 means unused.\nNote: You must map the target position to the range [0x1, 0x7FFF]. This means x value = <position_to_move> * 0x7FFF / <actual_screen_width>\ny & 0xFF, (y >> 8) & 0xFF,  # Y-axis absolute coordinate, 0 means unused.\nNote: You must map the target position to the range [0x1, 0x7FFF]. This means y value = <position_to_move> * 0x7FFF / <actual_screen_height>\n0x00,   # Wheel movement. Signed number, positive values indicate downward movement."
                                                },
                                                "return": "err::Err",
                                                "maixpy": "maix.peripheral.hid.Hid.write",
                                                "py_doc": "Write data to hid device\n\nArgs:\n  - data: data to write\nFor the keyboard, 8 bytes of data need to be written, with the format as follows:\ndata =      [0x00,   #\n0x00,   #\n0x00,   # Key value. Refer to the \"Universal Serial Bus HID Usage Tables\" section of the official documentation(https://www.usb.org).\n0x00,   #\n0x00,   #\n0x00,   #\n0x00,   #\n0x00]   #\nFor the mouse, 4 bytes of data need to be written, with the format as follows:\ndata =       [0x00,  # Button state\n0x00: no button pressed\n0x01: press left button\n0x02: press right button\n0x04: press middle button\nx,      # X-axis relative coordinates. Signed number, positive values for x indicate movement to the right\ny,      # Y-axis relative coordinates. Signed number, positive values for y indicate movement downward\n0x00]   # Wheel movement. Signed number, positive values indicate downward movement.\nFor the touchpad, 6 bytes of data need to be written, with the format as follows:\ndata =      [0x00,   # Button state (0: no button pressed, 0x01: press left button, 0x10, press right button.)\nx & 0xFF, (x >> 8) & 0xFF,  # X-axis absolute coordinate, 0 means unused.\nNote: You must map the target position to the range [0x1, 0x7FFF]. This means x value = <position_to_move> * 0x7FFF / <actual_screen_width>\ny & 0xFF, (y >> 8) & 0xFF,  # Y-axis absolute coordinate, 0 means unused.\nNote: You must map the target position to the range [0x1, 0x7FFF]. This means y value = <position_to_move> * 0x7FFF / <actual_screen_height>\n0x00,   # Wheel movement. Signed number, positive values indicate downward movement.\n\n\nReturns: err::Err\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<int> &",
                                                    "data",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err write(std::vector<int> &data)",
                                            "py_def": "def write(self, data: list[int]) -> maix.err.Err"
                                        },
                                        "is_opened": {
                                            "type": "func",
                                            "name": "is_opened",
                                            "doc": {
                                                "brief": "Check if hid device is opened",
                                                "return": "bool",
                                                "maixpy": "maix.peripheral.hid.Hid.is_opened",
                                                "py_doc": "Check if hid device is opened\n\nReturns: bool\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool is_opened()",
                                            "py_def": "def is_opened(self) -> bool"
                                        }
                                    },
                                    "def": "class Hid"
                                }
                            },
                            "auto_add": true
                        },
                        "timer": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.peripheral.timer module"
                            },
                            "members": {
                                "TIMER": {
                                    "type": "class",
                                    "name": "TIMER",
                                    "doc": {
                                        "brief": "Peripheral timer class",
                                        "maixpy": "maix.peripheral.timer.TIMER",
                                        "py_doc": "Peripheral timer class"
                                    },
                                    "members": {
                                        "__init__": {
                                            "type": "func",
                                            "name": "TIMER",
                                            "doc": {
                                                "brief": "TIMER constructor",
                                                "maixpy": "maix.peripheral.timer.TIMER.__init__",
                                                "py_doc": "TIMER constructor"
                                            },
                                            "args": [],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "TIMER()",
                                            "py_def": "def __init__(self) -> None"
                                        }
                                    },
                                    "def": "class TIMER"
                                }
                            },
                            "auto_add": true
                        }
                    },
                    "auto_add": false
                },
                "nn": {
                    "type": "module",
                    "doc": {
                        "brief": "maix.nn module"
                    },
                    "members": {
                        "NanoTrack": {
                            "type": "class",
                            "name": "NanoTrack",
                            "doc": {
                                "brief": "NanoTrack class",
                                "maixpy": "maix.nn.NanoTrack",
                                "py_doc": "NanoTrack class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "NanoTrack",
                                    "doc": {
                                        "brief": "Constructor of NanoTrack class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.NanoTrack.__init__",
                                        "maixcdk": "maix.nn.NanoTrack.NanoTrack",
                                        "py_doc": "Constructor of NanoTrack class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "NanoTrack(const string &model = \"\")",
                                    "py_def": "def __init__(self, model: str = '') -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.NanoTrack.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "init": {
                                    "type": "func",
                                    "name": "init",
                                    "doc": {
                                        "brief": "Init tracker, give tacker first target image and target position.",
                                        "param": {
                                            "img": "Image want to detect, target should be in this image.",
                                            "x": "the target position left top coordinate x.",
                                            "y": "the target position left top coordinate y.",
                                            "w": "the target width.",
                                            "h": "the target height."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "maixpy": "maix.nn.NanoTrack.init",
                                        "py_doc": "Init tracker, give tacker first target image and target position.\n\nArgs:\n  - img: Image want to detect, target should be in this image.\n  - x: the target position left top coordinate x.\n  - y: the target position left top coordinate y.\n  - w: the target width.\n  - h: the target height.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "int",
                                            "w",
                                            null
                                        ],
                                        [
                                            "int",
                                            "h",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void init(image::Image &img, int x, int y, int w, int h)",
                                    "py_def": "def init(self, img: maix.image.Image, x: int, y: int, w: int, h: int) -> None"
                                },
                                "track": {
                                    "type": "func",
                                    "name": "track",
                                    "doc": {
                                        "brief": "Track object acoording to last object position and the init function learned target feature.",
                                        "param": {
                                            "img": "image to detect object and track, can be any resolution, before detect it will crop a area according to last time target's position.",
                                            "threshold": "If score < threshold, will see this new detection is invalid, but remain return this new detecion,  default 0.9."
                                        },
                                        "return": "object, position and score, and detect area in points's first 4 element(x, y, w, h, center_x, center_y, input_size, target_size)",
                                        "maixpy": "maix.nn.NanoTrack.track",
                                        "py_doc": "Track object acoording to last object position and the init function learned target feature.\n\nArgs:\n  - img: image to detect object and track, can be any resolution, before detect it will crop a area according to last time target's position.\n  - threshold: If score < threshold, will see this new detection is invalid, but remain return this new detecion,  default 0.9.\n\n\nReturns: object, position and score, and detect area in points's first 4 element(x, y, w, h, center_x, center_y, input_size, target_size)\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "threshold",
                                            "0.9"
                                        ]
                                    ],
                                    "ret_type": "nn::Object",
                                    "static": false,
                                    "def": "nn::Object track(image::Image &img, float threshold = 0.9)",
                                    "py_def": "def track(self, img: maix.image.Image, threshold: float = 0.9) -> ..."
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.NanoTrack.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.NanoTrack.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.NanoTrack.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.NanoTrack.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.NanoTrack.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.NanoTrack.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class NanoTrack"
                        },
                        "OCR_Box": {
                            "type": "class",
                            "name": "OCR_Box",
                            "doc": {
                                "brief": "Object for OCR detect box",
                                "maixpy": "maix.nn.OCR_Box",
                                "py_doc": "Object for OCR detect box"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "OCR_Box",
                                    "doc": {
                                        "brief": "OCR_Box constructor",
                                        "maixpy": "maix.nn.OCR_Box.__init__",
                                        "maixcdk": "maix.nn.OCR_Box.OCR_Box",
                                        "py_doc": "OCR_Box constructor"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x1",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y1",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "x2",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y2",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "x3",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y3",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "x4",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y4",
                                            "0"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "OCR_Box(int x1 = 0, int y1 = 0, int x2 = 0, int y2 = 0, int x3 = 0, int y3 = 0, int x4 = 0, int y4 = 0)",
                                    "py_def": "def __init__(self, x1: int = 0, y1: int = 0, x2: int = 0, y2: int = 0, x3: int = 0, y3: int = 0, x4: int = 0, y4: int = 0) -> None"
                                },
                                "x1": {
                                    "type": "var",
                                    "name": "x1",
                                    "doc": {
                                        "brief": "left top point of box",
                                        "maixpy": "maix.nn.OCR_Box.x1",
                                        "py_doc": "left top point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x1"
                                },
                                "y1": {
                                    "type": "var",
                                    "name": "y1",
                                    "doc": {
                                        "brief": "left top point of box",
                                        "maixpy": "maix.nn.OCR_Box.y1",
                                        "py_doc": "left top point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y1"
                                },
                                "x2": {
                                    "type": "var",
                                    "name": "x2",
                                    "doc": {
                                        "brief": "right top point of box",
                                        "maixpy": "maix.nn.OCR_Box.x2",
                                        "py_doc": "right top point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x2"
                                },
                                "y2": {
                                    "type": "var",
                                    "name": "y2",
                                    "doc": {
                                        "brief": "right top point of box",
                                        "maixpy": "maix.nn.OCR_Box.y2",
                                        "py_doc": "right top point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y2"
                                },
                                "x3": {
                                    "type": "var",
                                    "name": "x3",
                                    "doc": {
                                        "brief": "right bottom point of box",
                                        "maixpy": "maix.nn.OCR_Box.x3",
                                        "py_doc": "right bottom point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x3"
                                },
                                "y3": {
                                    "type": "var",
                                    "name": "y3",
                                    "doc": {
                                        "brief": "right bottom point of box",
                                        "maixpy": "maix.nn.OCR_Box.y3",
                                        "py_doc": "right bottom point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y3"
                                },
                                "x4": {
                                    "type": "var",
                                    "name": "x4",
                                    "doc": {
                                        "brief": "left bottom point of box",
                                        "maixpy": "maix.nn.OCR_Box.x4",
                                        "py_doc": "left bottom point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x4"
                                },
                                "y4": {
                                    "type": "var",
                                    "name": "y4",
                                    "doc": {
                                        "brief": "left bottom point of box",
                                        "maixpy": "maix.nn.OCR_Box.y4",
                                        "py_doc": "left bottom point of box"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y4"
                                },
                                "to_list": {
                                    "type": "func",
                                    "name": "to_list",
                                    "doc": {
                                        "brief": "convert box point to a list type.",
                                        "return": "list type, element is int type, value [x1, y1, x2, y2, x3, y3, x4, y4].",
                                        "maixpy": "maix.nn.OCR_Box.to_list",
                                        "py_doc": "convert box point to a list type.\n\nReturns: list type, element is int type, value [x1, y1, x2, y2, x3, y3, x4, y4].\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> to_list()",
                                    "py_def": "def to_list(self) -> list[int]"
                                }
                            },
                            "def": "class OCR_Box"
                        },
                        "OCR_Object": {
                            "type": "class",
                            "name": "OCR_Object",
                            "doc": {
                                "brief": "Object for OCR detect result",
                                "maixpy": "maix.nn.OCR_Object",
                                "py_doc": "Object for OCR detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "OCR_Object",
                                    "doc": {
                                        "brief": "Constructor of Object for OCR detect result",
                                        "param": {
                                            "score": "score"
                                        },
                                        "maixpy": "maix.nn.OCR_Object.__init__",
                                        "maixcdk": "maix.nn.OCR_Object.OCR_Object",
                                        "py_doc": "Constructor of Object for OCR detect result\n\nArgs:\n  - score: score\n"
                                    },
                                    "args": [
                                        [
                                            "const nn::OCR_Box &",
                                            "box",
                                            null
                                        ],
                                        [
                                            "const std::vector<int> &",
                                            "idx_list",
                                            null
                                        ],
                                        [
                                            "const std::vector<std::string> &",
                                            "char_list",
                                            null
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "const std::vector<int> &",
                                            "char_pos",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "OCR_Object(const nn::OCR_Box &box, const std::vector<int> &idx_list, const std::vector<std::string> &char_list, float score = 0, const std::vector<int> &char_pos = std::vector<int>())",
                                    "py_def": "def __init__(self, box: OCR_Box, idx_list: list[int], char_list: list[str], score: float = 0, char_pos: list[int] = []) -> None"
                                },
                                "box": {
                                    "type": "var",
                                    "name": "box",
                                    "doc": {
                                        "brief": "OCR_Object box, 4 points box, first point at the left-top, clock-wise.",
                                        "maixpy": "maix.nn.OCR_Object.box",
                                        "py_doc": "OCR_Object box, 4 points box, first point at the left-top, clock-wise."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "nn::OCR_Box box"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "Object score",
                                        "maixpy": "maix.nn.OCR_Object.score",
                                        "py_doc": "Object score"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                },
                                "idx_list": {
                                    "type": "var",
                                    "name": "idx_list",
                                    "doc": {
                                        "brief": "chars' idx list, element is int type.",
                                        "maixpy": "maix.nn.OCR_Object.idx_list",
                                        "py_doc": "chars' idx list, element is int type."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> idx_list"
                                },
                                "char_pos": {
                                    "type": "var",
                                    "name": "char_pos",
                                    "doc": {
                                        "brief": "Chars' position relative to left",
                                        "maixpy": "maix.nn.OCR_Object.char_pos",
                                        "py_doc": "Chars' position relative to left"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> char_pos"
                                },
                                "char_str": {
                                    "type": "func",
                                    "name": "char_str",
                                    "doc": {
                                        "brief": "Get OCR_Object's charactors, return a string type.",
                                        "return": "All charactors in string type.",
                                        "maixpy": "maix.nn.OCR_Object.char_str",
                                        "py_doc": "Get OCR_Object's charactors, return a string type.\n\nReturns: All charactors in string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "const std::string&",
                                    "static": false,
                                    "def": "const std::string &char_str()",
                                    "py_def": "def char_str(self) -> str"
                                },
                                "char_list": {
                                    "type": "func",
                                    "name": "char_list",
                                    "doc": {
                                        "brief": "Get OCR_Object's charactors, return a list type.",
                                        "return": "All charactors in list type.",
                                        "maixpy": "maix.nn.OCR_Object.char_list",
                                        "py_doc": "Get OCR_Object's charactors, return a list type.\n\nReturns: All charactors in list type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "const std::vector<std::string>&",
                                    "static": false,
                                    "def": "const std::vector<std::string> &char_list()",
                                    "py_def": "def char_list(self) -> list[str]"
                                },
                                "update_chars": {
                                    "type": "func",
                                    "name": "update_chars",
                                    "doc": {
                                        "brief": "Set OCR_Object's charactors",
                                        "param": {
                                            "char_list": "All charactors in list type."
                                        },
                                        "maixpy": "maix.nn.OCR_Object.update_chars",
                                        "py_doc": "Set OCR_Object's charactors\n\nArgs:\n  - char_list: All charactors in list type.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::vector<std::string> &",
                                            "char_list",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void update_chars(const std::vector<std::string> &char_list)",
                                    "py_def": "def update_chars(self, char_list: list[str]) -> None"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "OCR_Object info to string",
                                        "return": "OCR_Object info string",
                                        "maixpy": "maix.nn.OCR_Object.__str__",
                                        "maixcdk": "maix.nn.OCR_Object.to_str",
                                        "py_doc": "OCR_Object info to string\n\nReturns: OCR_Object info string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def __str__(self) -> str"
                                }
                            },
                            "def": "class OCR_Object"
                        },
                        "OCR_Objects": {
                            "type": "class",
                            "name": "OCR_Objects",
                            "doc": {
                                "brief": "OCR_Objects Class for detect result",
                                "maixpy": "maix.nn.OCR_Objects",
                                "py_doc": "OCR_Objects Class for detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "OCR_Objects",
                                    "doc": {
                                        "brief": "Constructor of OCR_Objects class",
                                        "maixpy": "maix.nn.OCR_Objects.__init__",
                                        "maixcdk": "maix.nn.OCR_Objects.OCR_Objects",
                                        "py_doc": "Constructor of OCR_Objects class"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "OCR_Objects()",
                                    "py_def": "def __init__(self) -> None"
                                },
                                "add": {
                                    "type": "func",
                                    "name": "add",
                                    "doc": {
                                        "brief": "Add object to objects",
                                        "throw": "Throw exception if no memory",
                                        "maixpy": "maix.nn.OCR_Objects.add",
                                        "py_doc": "Add object to objects"
                                    },
                                    "args": [
                                        [
                                            "const nn::OCR_Box &",
                                            "box",
                                            null
                                        ],
                                        [
                                            "const std::vector<int> &",
                                            "idx_list",
                                            null
                                        ],
                                        [
                                            "const std::vector<std::string> &",
                                            "char_list",
                                            null
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "const std::vector<int> &",
                                            "char_pos",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "nn::OCR_Object&",
                                    "static": false,
                                    "def": "nn::OCR_Object &add(const nn::OCR_Box &box, const std::vector<int> &idx_list, const std::vector<std::string> &char_list, float score = 0, const std::vector<int> &char_pos = std::vector<int>())",
                                    "py_def": "def add(self, box: OCR_Box, idx_list: list[int], char_list: list[str], score: float = 0, char_pos: list[int] = []) -> OCR_Object"
                                },
                                "remove": {
                                    "type": "func",
                                    "name": "remove",
                                    "doc": {
                                        "brief": "Remove object form objects",
                                        "maixpy": "maix.nn.OCR_Objects.remove",
                                        "py_doc": "Remove object form objects"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err remove(int idx)",
                                    "py_def": "def remove(self, idx: int) -> maix.err.Err"
                                },
                                "at": {
                                    "type": "func",
                                    "name": "at",
                                    "doc": {
                                        "brief": "Get object item",
                                        "maixpy": "maix.nn.OCR_Objects.at",
                                        "py_doc": "Get object item"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "nn::OCR_Object&",
                                    "static": false,
                                    "def": "nn::OCR_Object &at(int idx)",
                                    "py_def": "def at(self, idx: int) -> OCR_Object"
                                },
                                "__item__": {
                                    "type": "func",
                                    "name": "operator[]",
                                    "doc": {
                                        "brief": "Get object item",
                                        "maixpy": "maix.nn.OCR_Objects.__item__",
                                        "maixcdk": "maix.nn.OCR_Objects.[]",
                                        "py_doc": "Get object item"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "nn::OCR_Object&",
                                    "static": false,
                                    "def": "nn::OCR_Object &operator[](int idx)",
                                    "py_def": "def __item__(self, idx: int) -> OCR_Object"
                                },
                                "__len__": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get size",
                                        "maixpy": "maix.nn.OCR_Objects.__len__",
                                        "maixcdk": "maix.nn.OCR_Objects.size",
                                        "py_doc": "Get size"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t size()",
                                    "py_def": "def __len__(self) -> int"
                                },
                                "__iter__": {
                                    "type": "func",
                                    "name": "begin",
                                    "doc": {
                                        "brief": "Begin",
                                        "maixpy": "maix.nn.OCR_Objects.__iter__",
                                        "maixcdk": "maix.nn.OCR_Objects.begin",
                                        "py_doc": "Begin"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<OCR_Object*>::iterator",
                                    "static": false,
                                    "def": "std::vector<OCR_Object*>::iterator begin()",
                                    "py_def": "def __iter__(self) -> typing.Iterator"
                                }
                            },
                            "def": "class OCR_Objects"
                        },
                        "SpeechDevice": {
                            "type": "enum",
                            "name": "SpeechDevice",
                            "doc": {
                                "brief": "speech device",
                                "maixpy": "maix.nn.SpeechDevice",
                                "py_doc": "speech device"
                            },
                            "values": [
                                [
                                    "DEVICE_NONE",
                                    "-1",
                                    ""
                                ],
                                [
                                    "DEVICE_PCM",
                                    "",
                                    ""
                                ],
                                [
                                    "DEVICE_MIC",
                                    "",
                                    ""
                                ],
                                [
                                    "DEVICE_WAV",
                                    "",
                                    ""
                                ]
                            ],
                            "def": "enum SpeechDevice {\n    DEVICE_NONE = -1,\n    DEVICE_PCM,\n    DEVICE_MIC,\n    DEVICE_WAV,\n}"
                        },
                        "SpeechDecoder": {
                            "type": "enum",
                            "name": "SpeechDecoder",
                            "doc": {
                                "brief": "speech decoder type",
                                "maixpy": "maix.nn.SpeechDecoder",
                                "py_doc": "speech decoder type"
                            },
                            "values": [
                                [
                                    "DECODER_RAW",
                                    "1",
                                    ""
                                ],
                                [
                                    "DECODER_DIG",
                                    "2",
                                    ""
                                ],
                                [
                                    "DECODER_LVCSR",
                                    "4",
                                    ""
                                ],
                                [
                                    "DECODER_KWS",
                                    "8",
                                    ""
                                ],
                                [
                                    "DECODER_ALL",
                                    "65535",
                                    ""
                                ]
                            ],
                            "def": "enum SpeechDecoder {\n    DECODER_RAW = 1,\n    DECODER_DIG = 2,\n    DECODER_LVCSR = 4,\n    DECODER_KWS = 8,\n    DECODER_ALL = 65535,\n}"
                        },
                        "Speech": {
                            "type": "class",
                            "name": "Speech",
                            "doc": {
                                "brief": "Speech",
                                "maixpy": "maix.nn.Speech",
                                "py_doc": "Speech"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Speech",
                                    "doc": {
                                        "brief": "Construct a new Speech object",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.Speech.__init__",
                                        "maixcdk": "maix.nn.Speech.Speech",
                                        "py_doc": "Construct a new Speech object\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Speech(const string &model = \"\")",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "Speech",
                                            "doc": {
                                                "brief": "Construct a new Speech object",
                                                "param": {
                                                    "model": "model path, default empty, you can load model later by load function."
                                                },
                                                "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                                "maixpy": "maix.nn.Speech.__init__",
                                                "maixcdk": "maix.nn.Speech.Speech",
                                                "py_doc": "Construct a new Speech object\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n"
                                            },
                                            "args": [
                                                [
                                                    "const string &",
                                                    "model",
                                                    "\"\""
                                                ]
                                            ],
                                            "ret_type": null,
                                            "static": false,
                                            "def": "Speech(const string &model = \"\")"
                                        }
                                    ],
                                    "py_def": "def __init__(self, model: str = '') -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.Speech.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "load",
                                            "doc": {
                                                "brief": "Load model from file",
                                                "param": {
                                                    "model": "Model path want to load"
                                                },
                                                "return": "err::Err",
                                                "maixpy": "maix.nn.Speech.load",
                                                "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                            },
                                            "args": [
                                                [
                                                    "const string &",
                                                    "model",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err load(const string &model)"
                                        }
                                    ],
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "init": {
                                    "type": "func",
                                    "name": "init",
                                    "doc": {
                                        "brief": "Init the ASR library and select the type and name of the audio device.",
                                        "param": {
                                            "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                            "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                        },
                                        "throw": [
                                            "If am model is not loaded, will throw err::ERR_NOT_IMPL.",
                                            "If device is not supported, will throw err::ERR_NOT_IMPL."
                                        ],
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.init",
                                        "py_doc": "Init the ASR library and select the type and name of the audio device.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "nn::SpeechDevice",
                                            "dev_type",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "device_name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err init(nn::SpeechDevice dev_type, const string &device_name)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "init",
                                            "doc": {
                                                "brief": "Init the ASR library and select the type and name of the audio device.",
                                                "param": {
                                                    "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                                    "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                                },
                                                "throw": [
                                                    "If am model is not loaded, will throw err::ERR_NOT_IMPL.",
                                                    "If device is not supported, will throw err::ERR_NOT_IMPL."
                                                ],
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.init",
                                                "py_doc": "Init the ASR library and select the type and name of the audio device.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "nn::SpeechDevice",
                                                    "dev_type",
                                                    null
                                                ],
                                                [
                                                    "const string &",
                                                    "device_name",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err init(nn::SpeechDevice dev_type, const string &device_name)"
                                        }
                                    ],
                                    "py_def": "def init(self, dev_type: SpeechDevice, device_name: str) -> maix.err.Err"
                                },
                                "devive": {
                                    "type": "func",
                                    "name": "devive",
                                    "doc": {
                                        "brief": "Reset the device, usually used for PCM/WAV recognition,\\nsuch as identifying the next WAV file.",
                                        "param": {
                                            "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                            "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                        },
                                        "throw": "If device is not supported, will throw err::ERR_NOT_IMPL.",
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.devive",
                                        "py_doc": "Reset the device, usually used for PCM/WAV recognition,\nsuch as identifying the next WAV file.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "nn::SpeechDevice",
                                            "dev_type",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "device_name",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err devive(nn::SpeechDevice dev_type, const string &device_name)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "devive",
                                            "doc": {
                                                "brief": "Reset the device, usually used for PCM/WAV recognition,\\nsuch as identifying the next WAV file.",
                                                "param": {
                                                    "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                                    "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                                },
                                                "throw": "If device is not supported, will throw err::ERR_NOT_IMPL.",
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.devive",
                                                "py_doc": "Reset the device, usually used for PCM/WAV recognition,\nsuch as identifying the next WAV file.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "nn::SpeechDevice",
                                                    "dev_type",
                                                    null
                                                ],
                                                [
                                                    "const string &",
                                                    "device_name",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err devive(nn::SpeechDevice dev_type, const string &device_name)"
                                        }
                                    ],
                                    "py_def": "def devive(self, dev_type: SpeechDevice, device_name: str) -> maix.err.Err"
                                },
                                "deinit": {
                                    "type": "func",
                                    "name": "deinit",
                                    "doc": {
                                        "brief": "Deinit the ASR library.",
                                        "maixpy": "maix.nn.Speech.deinit",
                                        "py_doc": "Deinit the ASR library."
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void deinit()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "deinit",
                                            "doc": {
                                                "brief": "Deinit the ASR library.",
                                                "maixpy": "maix.nn.Speech.deinit",
                                                "py_doc": "Deinit the ASR library."
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void deinit()"
                                        }
                                    ],
                                    "py_def": "def deinit(self) -> None"
                                },
                                "dec_deinit": {
                                    "type": "func",
                                    "name": "dec_deinit",
                                    "doc": {
                                        "brief": "Deinit the decoder.",
                                        "param": {
                                            "decoder": "decoder type want to deinit\ncan choose between DECODER_RAW, DECODER_DIG, DECODER_LVCSR, DECODER_KWS or DECODER_ALL."
                                        },
                                        "throw": "If device is not supported, will throw err::ERR_NOT_IMPL.",
                                        "maixpy": "maix.nn.Speech.dec_deinit",
                                        "py_doc": "Deinit the decoder.\n\nArgs:\n  - decoder: decoder type want to deinit\ncan choose between DECODER_RAW, DECODER_DIG, DECODER_LVCSR, DECODER_KWS or DECODER_ALL.\n"
                                    },
                                    "args": [
                                        [
                                            "nn::SpeechDecoder",
                                            "decoder",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void dec_deinit(nn::SpeechDecoder decoder)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "dec_deinit",
                                            "doc": {
                                                "brief": "Deinit the decoder.",
                                                "param": {
                                                    "decoder": "decoder type want to deinit\ncan choose between DECODER_RAW, DECODER_DIG, DECODER_LVCSR, DECODER_KWS or DECODER_ALL."
                                                },
                                                "throw": "If device is not supported, will throw err::ERR_NOT_IMPL.",
                                                "maixpy": "maix.nn.Speech.dec_deinit",
                                                "py_doc": "Deinit the decoder.\n\nArgs:\n  - decoder: decoder type want to deinit\ncan choose between DECODER_RAW, DECODER_DIG, DECODER_LVCSR, DECODER_KWS or DECODER_ALL.\n"
                                            },
                                            "args": [
                                                [
                                                    "nn::SpeechDecoder",
                                                    "decoder",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void dec_deinit(nn::SpeechDecoder decoder)"
                                        }
                                    ],
                                    "py_def": "def dec_deinit(self, decoder: SpeechDecoder) -> None"
                                },
                                "raw": {
                                    "type": "func",
                                    "name": "raw",
                                    "doc": {
                                        "brief": "Init raw decoder, it will output the prediction results of the original AM.",
                                        "param": {
                                            "callback": "raw decoder user callback."
                                        },
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.raw",
                                        "py_doc": "Init raw decoder, it will output the prediction results of the original AM.\n\nArgs:\n  - callback: raw decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "std::function<void(std::vector<pnyp_t>, int)>",
                                            "callback",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err raw(std::function<void(std::vector<pnyp_t>, int)> callback)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "raw",
                                            "doc": {
                                                "brief": "Get raw decoder status",
                                                "return": "bool, raw decoder status",
                                                "maixpy": "maix.nn.Speech.raw",
                                                "py_doc": "Get raw decoder status\n\nReturns: bool, raw decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool raw()"
                                        },
                                        {
                                            "type": "func",
                                            "name": "raw",
                                            "doc": {
                                                "brief": "Init raw decoder, it will output the prediction results of the original AM.",
                                                "param": {
                                                    "callback": "raw decoder user callback."
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.raw",
                                                "py_doc": "Init raw decoder, it will output the prediction results of the original AM.\n\nArgs:\n  - callback: raw decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "std::function<void(std::vector<pnyp_t>, int)>",
                                                    "callback",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err raw(std::function<void(std::vector<pnyp_t>, int)> callback)"
                                        },
                                        {
                                            "type": "func",
                                            "name": "raw",
                                            "doc": {
                                                "brief": "Get raw decoder status",
                                                "return": "bool, raw decoder status",
                                                "maixpy": "maix.nn.Speech.raw",
                                                "py_doc": "Get raw decoder status\n\nReturns: bool, raw decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool raw()"
                                        }
                                    ],
                                    "py_def": "def raw(self, callback: typing.Callable[[list[pnyp_t], int], None]) -> maix.err.Err"
                                },
                                "digit": {
                                    "type": "func",
                                    "name": "digit",
                                    "doc": {
                                        "brief": "Init digit decoder, it will output the Chinese digit recognition results within the last 4 seconds.",
                                        "param": {
                                            "blank": "If it exceeds this value, insert a '_' in the output result to indicate idle mute.",
                                            "callback": "digit decoder user callback."
                                        },
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.digit",
                                        "py_doc": "Init digit decoder, it will output the Chinese digit recognition results within the last 4 seconds.\n\nArgs:\n  - blank: If it exceeds this value, insert a '_' in the output result to indicate idle mute.\n  - callback: digit decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "blank",
                                            null
                                        ],
                                        [
                                            "std::function<void(char*, int)>",
                                            "callback",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err digit(int blank, std::function<void(char*, int)> callback)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "digit",
                                            "doc": {
                                                "brief": "Get digit decoder status",
                                                "return": "bool, digit decoder status",
                                                "maixpy": "maix.nn.Speech.digit",
                                                "py_doc": "Get digit decoder status\n\nReturns: bool, digit decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool digit()"
                                        },
                                        {
                                            "type": "func",
                                            "name": "digit",
                                            "doc": {
                                                "brief": "Init digit decoder, it will output the Chinese digit recognition results within the last 4 seconds.",
                                                "param": {
                                                    "blank": "If it exceeds this value, insert a '_' in the output result to indicate idle mute.",
                                                    "callback": "digit decoder user callback."
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.digit",
                                                "py_doc": "Init digit decoder, it will output the Chinese digit recognition results within the last 4 seconds.\n\nArgs:\n  - blank: If it exceeds this value, insert a '_' in the output result to indicate idle mute.\n  - callback: digit decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "blank",
                                                    null
                                                ],
                                                [
                                                    "std::function<void(char*, int)>",
                                                    "callback",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err digit(int blank, std::function<void(char*, int)> callback)"
                                        },
                                        {
                                            "type": "func",
                                            "name": "digit",
                                            "doc": {
                                                "brief": "Get digit decoder status",
                                                "return": "bool, digit decoder status",
                                                "maixpy": "maix.nn.Speech.digit",
                                                "py_doc": "Get digit decoder status\n\nReturns: bool, digit decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool digit()"
                                        }
                                    ],
                                    "py_def": "def digit(self, blank: int, callback: typing.Callable[[str, int], None]) -> maix.err.Err"
                                },
                                "kws": {
                                    "type": "func",
                                    "name": "kws",
                                    "doc": {
                                        "brief": "Init kws decoder, it will output a probability list of all registered keywords in the latest frame,\\nusers can set their own thresholds for wake-up.",
                                        "param": {
                                            "kw_tbl": "Keyword list, filled in with spaces separated by pinyin, for example: xiao3 ai4 tong2 xue2",
                                            "kw_gate": "kw_gate, keyword probability gate table, the number should be the same as kw_tbl",
                                            "auto_similar": "Whether to perform automatic homophone processing,\nsetting it to true will automatically calculate the probability by using pinyin with different tones as homophones",
                                            "callback": "digit decoder user callback."
                                        },
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.kws",
                                        "py_doc": "Init kws decoder, it will output a probability list of all registered keywords in the latest frame,\nusers can set their own thresholds for wake-up.\n\nArgs:\n  - kw_tbl: Keyword list, filled in with spaces separated by pinyin, for example: xiao3 ai4 tong2 xue2\n  - kw_gate: kw_gate, keyword probability gate table, the number should be the same as kw_tbl\n  - auto_similar: Whether to perform automatic homophone processing,\nsetting it to true will automatically calculate the probability by using pinyin with different tones as homophones\n  - callback: digit decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "std::vector<string>",
                                            "kw_tbl",
                                            null
                                        ],
                                        [
                                            "std::vector<float>",
                                            "kw_gate",
                                            null
                                        ],
                                        [
                                            "std::function<void(std::vector<float>, int)>",
                                            "callback",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "auto_similar",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err kws(std::vector<string> kw_tbl, std::vector<float> kw_gate, std::function<void(std::vector<float>, int)> callback, bool auto_similar = true)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "kws",
                                            "doc": {
                                                "brief": "Get kws decoder status",
                                                "return": "bool, kws decoder status",
                                                "maixpy": "maix.nn.Speech.kws",
                                                "py_doc": "Get kws decoder status\n\nReturns: bool, kws decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool kws()"
                                        },
                                        {
                                            "type": "func",
                                            "name": "kws",
                                            "doc": {
                                                "brief": "Init kws decoder, it will output a probability list of all registered keywords in the latest frame,\\nusers can set their own thresholds for wake-up.",
                                                "param": {
                                                    "kw_tbl": "Keyword list, filled in with spaces separated by pinyin, for example: xiao3 ai4 tong2 xue2",
                                                    "kw_gate": "kw_gate, keyword probability gate table, the number should be the same as kw_tbl",
                                                    "auto_similar": "Whether to perform automatic homophone processing,\nsetting it to true will automatically calculate the probability by using pinyin with different tones as homophones",
                                                    "callback": "digit decoder user callback."
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.kws",
                                                "py_doc": "Init kws decoder, it will output a probability list of all registered keywords in the latest frame,\nusers can set their own thresholds for wake-up.\n\nArgs:\n  - kw_tbl: Keyword list, filled in with spaces separated by pinyin, for example: xiao3 ai4 tong2 xue2\n  - kw_gate: kw_gate, keyword probability gate table, the number should be the same as kw_tbl\n  - auto_similar: Whether to perform automatic homophone processing,\nsetting it to true will automatically calculate the probability by using pinyin with different tones as homophones\n  - callback: digit decoder user callback.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "std::vector<string>",
                                                    "kw_tbl",
                                                    null
                                                ],
                                                [
                                                    "std::vector<float>",
                                                    "kw_gate",
                                                    null
                                                ],
                                                [
                                                    "std::function<void(std::vector<float>, int)>",
                                                    "callback",
                                                    null
                                                ],
                                                [
                                                    "bool",
                                                    "auto_similar",
                                                    "true"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err kws(std::vector<string> kw_tbl, std::vector<float> kw_gate, std::function<void(std::vector<float>, int)> callback, bool auto_similar = true)"
                                        },
                                        {
                                            "type": "func",
                                            "name": "kws",
                                            "doc": {
                                                "brief": "Get kws decoder status",
                                                "return": "bool, kws decoder status",
                                                "maixpy": "maix.nn.Speech.kws",
                                                "py_doc": "Get kws decoder status\n\nReturns: bool, kws decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool kws()"
                                        }
                                    ],
                                    "py_def": "def kws(self, kw_tbl: list[str], kw_gate: list[float], callback: typing.Callable[[list[float], int], None], auto_similar: bool = True) -> maix.err.Err"
                                },
                                "lvcsr": {
                                    "type": "func",
                                    "name": "lvcsr",
                                    "doc": {
                                        "brief": "Init lvcsr decoder, it will output continuous speech recognition results (less than 1024 Chinese characters).",
                                        "param": {
                                            "sfst_name": "Sfst file path.",
                                            "sym_name": "Sym file path (output symbol table).",
                                            "phones_txt": "Path to phones.bin (pinyin table).",
                                            "words_txt": "Path to words.bin (dictionary table).",
                                            "callback": "lvcsr decoder user callback.",
                                            "beam": "The beam size for WFST search is set to 8 by default, and it is recommended to be between 3 and 9.\nThe larger the size, the larger the search space, and the more accurate but slower the search.",
                                            "bg_prob": "The absolute value of the natural logarithm of the default probability value for background pinyin\noutside of BEAM-CNT is set to 10 by default.",
                                            "scale": "acoustics_cost = log(pny_prob)*scale.",
                                            "mmap": "use mmap to load the WFST decoding image,\nIf set to true, the beam should be less than 5."
                                        },
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.lvcsr",
                                        "py_doc": "Init lvcsr decoder, it will output continuous speech recognition results (less than 1024 Chinese characters).\n\nArgs:\n  - sfst_name: Sfst file path.\n  - sym_name: Sym file path (output symbol table).\n  - phones_txt: Path to phones.bin (pinyin table).\n  - words_txt: Path to words.bin (dictionary table).\n  - callback: lvcsr decoder user callback.\n  - beam: The beam size for WFST search is set to 8 by default, and it is recommended to be between 3 and 9.\nThe larger the size, the larger the search space, and the more accurate but slower the search.\n  - bg_prob: The absolute value of the natural logarithm of the default probability value for background pinyin\noutside of BEAM-CNT is set to 10 by default.\n  - scale: acoustics_cost = log(pny_prob)*scale.\n  - mmap: use mmap to load the WFST decoding image,\nIf set to true, the beam should be less than 5.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "sfst_name",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "sym_name",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "phones_txt",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "words_txt",
                                            null
                                        ],
                                        [
                                            "std::function<void(std::pair<char*, char*>, int)>",
                                            "callback",
                                            null
                                        ],
                                        [
                                            "float",
                                            "beam",
                                            "8"
                                        ],
                                        [
                                            "float",
                                            "bg_prob",
                                            "10"
                                        ],
                                        [
                                            "float",
                                            "scale",
                                            "0.5"
                                        ],
                                        [
                                            "bool",
                                            "mmap",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err lvcsr(const string &sfst_name, const string &sym_name,\n                       const string &phones_txt, const string &words_txt, \n                       std::function<void(std::pair<char*, char*>, int)> callback,\n                       float beam = 8, float bg_prob = 10, float scale = 0.5, bool mmap = false)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "lvcsr",
                                            "doc": {
                                                "brief": "Get lvcsr decoder status",
                                                "return": "bool, lvcsr decoder status",
                                                "maixpy": "maix.nn.Speech.lvcsr",
                                                "py_doc": "Get lvcsr decoder status\n\nReturns: bool, lvcsr decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool lvcsr()"
                                        },
                                        {
                                            "type": "func",
                                            "name": "lvcsr",
                                            "doc": {
                                                "brief": "Init lvcsr decoder, it will output continuous speech recognition results (less than 1024 Chinese characters).",
                                                "param": {
                                                    "sfst_name": "Sfst file path.",
                                                    "sym_name": "Sym file path (output symbol table).",
                                                    "phones_txt": "Path to phones.bin (pinyin table).",
                                                    "words_txt": "Path to words.bin (dictionary table).",
                                                    "callback": "lvcsr decoder user callback.",
                                                    "beam": "The beam size for WFST search is set to 8 by default, and it is recommended to be between 3 and 9.\nThe larger the size, the larger the search space, and the more accurate but slower the search.",
                                                    "bg_prob": "The absolute value of the natural logarithm of the default probability value for background pinyin\noutside of BEAM-CNT is set to 10 by default.",
                                                    "scale": "acoustics_cost = log(pny_prob)*scale.",
                                                    "mmap": "use mmap to load the WFST decoding image,\nIf set to true, the beam should be less than 5."
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.lvcsr",
                                                "py_doc": "Init lvcsr decoder, it will output continuous speech recognition results (less than 1024 Chinese characters).\n\nArgs:\n  - sfst_name: Sfst file path.\n  - sym_name: Sym file path (output symbol table).\n  - phones_txt: Path to phones.bin (pinyin table).\n  - words_txt: Path to words.bin (dictionary table).\n  - callback: lvcsr decoder user callback.\n  - beam: The beam size for WFST search is set to 8 by default, and it is recommended to be between 3 and 9.\nThe larger the size, the larger the search space, and the more accurate but slower the search.\n  - bg_prob: The absolute value of the natural logarithm of the default probability value for background pinyin\noutside of BEAM-CNT is set to 10 by default.\n  - scale: acoustics_cost = log(pny_prob)*scale.\n  - mmap: use mmap to load the WFST decoding image,\nIf set to true, the beam should be less than 5.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "const string &",
                                                    "sfst_name",
                                                    null
                                                ],
                                                [
                                                    "const string &",
                                                    "sym_name",
                                                    null
                                                ],
                                                [
                                                    "const string &",
                                                    "phones_txt",
                                                    null
                                                ],
                                                [
                                                    "const string &",
                                                    "words_txt",
                                                    null
                                                ],
                                                [
                                                    "std::function<void(std::pair<char*, char*>, int)>",
                                                    "callback",
                                                    null
                                                ],
                                                [
                                                    "float",
                                                    "beam",
                                                    "8"
                                                ],
                                                [
                                                    "float",
                                                    "bg_prob",
                                                    "10"
                                                ],
                                                [
                                                    "float",
                                                    "scale",
                                                    "0.5"
                                                ],
                                                [
                                                    "bool",
                                                    "mmap",
                                                    "false"
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err lvcsr(const string &sfst_name, const string &sym_name,\n                       const string &phones_txt, const string &words_txt, \n                       std::function<void(std::pair<char*, char*>, int)> callback,\n                       float beam = 8, float bg_prob = 10, float scale = 0.5, bool mmap = false)"
                                        },
                                        {
                                            "type": "func",
                                            "name": "lvcsr",
                                            "doc": {
                                                "brief": "Get lvcsr decoder status",
                                                "return": "bool, lvcsr decoder status",
                                                "maixpy": "maix.nn.Speech.lvcsr",
                                                "py_doc": "Get lvcsr decoder status\n\nReturns: bool, lvcsr decoder status\n"
                                            },
                                            "args": [],
                                            "ret_type": "bool",
                                            "static": false,
                                            "def": "bool lvcsr()"
                                        }
                                    ],
                                    "py_def": "def lvcsr(self, sfst_name: str, sym_name: str, phones_txt: str, words_txt: str, callback: typing.Callable[[tuple[str, str], int], None], beam: float = 8, bg_prob: float = 10, scale: float = 0.5, mmap: bool = False) -> maix.err.Err"
                                },
                                "run": {
                                    "type": "func",
                                    "name": "run",
                                    "doc": {
                                        "brief": "Run speech recognition, user can run 1 frame at a time and do other processing after running,\\nor it can run continuously within a thread and be stopped by an external thread.",
                                        "param": {
                                            "frame": "The number of frames per run."
                                        },
                                        "return": "int type, return actual number of frames in the run.",
                                        "maixpy": "maix.nn.Speech.run",
                                        "py_doc": "Run speech recognition, user can run 1 frame at a time and do other processing after running,\nor it can run continuously within a thread and be stopped by an external thread.\n\nArgs:\n  - frame: The number of frames per run.\n\n\nReturns: int type, return actual number of frames in the run.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "frame",
                                            null
                                        ]
                                    ],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int run(int frame)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "run",
                                            "doc": {
                                                "brief": "Run speech recognition, user can run 1 frame at a time and do other processing after running,\\nor it can run continuously within a thread and be stopped by an external thread.",
                                                "param": {
                                                    "frame": "The number of frames per run."
                                                },
                                                "return": "int type, return actual number of frames in the run.",
                                                "maixpy": "maix.nn.Speech.run",
                                                "py_doc": "Run speech recognition, user can run 1 frame at a time and do other processing after running,\nor it can run continuously within a thread and be stopped by an external thread.\n\nArgs:\n  - frame: The number of frames per run.\n\n\nReturns: int type, return actual number of frames in the run.\n"
                                            },
                                            "args": [
                                                [
                                                    "int",
                                                    "frame",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int run(int frame)"
                                        }
                                    ],
                                    "py_def": "def run(self, frame: int) -> int"
                                },
                                "clear": {
                                    "type": "func",
                                    "name": "clear",
                                    "doc": {
                                        "brief": "Reset internal cache operation",
                                        "maixpy": "maix.nn.Speech.clear",
                                        "py_doc": "Reset internal cache operation"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void clear()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "clear",
                                            "doc": {
                                                "brief": "Reset internal cache operation",
                                                "maixpy": "maix.nn.Speech.clear",
                                                "py_doc": "Reset internal cache operation"
                                            },
                                            "args": [],
                                            "ret_type": "void",
                                            "static": false,
                                            "def": "void clear()"
                                        }
                                    ],
                                    "py_def": "def clear(self) -> None"
                                },
                                "frame_time": {
                                    "type": "func",
                                    "name": "frame_time",
                                    "doc": {
                                        "brief": "Get the time of one frame.",
                                        "return": "int type, return the time of one frame.",
                                        "maixpy": "maix.nn.Speech.frame_time",
                                        "py_doc": "Get the time of one frame.\n\nReturns: int type, return the time of one frame.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int frame_time()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "frame_time",
                                            "doc": {
                                                "brief": "Get the time of one frame.",
                                                "return": "int type, return the time of one frame.",
                                                "maixpy": "maix.nn.Speech.frame_time",
                                                "py_doc": "Get the time of one frame.\n\nReturns: int type, return the time of one frame.\n"
                                            },
                                            "args": [],
                                            "ret_type": "int",
                                            "static": false,
                                            "def": "int frame_time()"
                                        }
                                    ],
                                    "py_def": "def frame_time(self) -> int"
                                },
                                "vocab": {
                                    "type": "func",
                                    "name": "vocab",
                                    "doc": {
                                        "brief": "Get the acoustic model dictionary.",
                                        "return": "std::pair<char*, int> type, return the dictionary and length.",
                                        "maixpy": "maix.nn.Speech.vocab",
                                        "py_doc": "Get the acoustic model dictionary.\n\nReturns: std::pair<char*, int> type, return the dictionary and length.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::pair<char*, int>",
                                    "static": false,
                                    "def": "std::pair<char*, int> vocab()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "vocab",
                                            "doc": {
                                                "brief": "Get the acoustic model dictionary.",
                                                "return": "std::pair<char*, int> type, return the dictionary and length.",
                                                "maixpy": "maix.nn.Speech.vocab",
                                                "py_doc": "Get the acoustic model dictionary.\n\nReturns: std::pair<char*, int> type, return the dictionary and length.\n"
                                            },
                                            "args": [],
                                            "ret_type": "std::pair<char*, int>",
                                            "static": false,
                                            "def": "std::pair<char*, int> vocab()"
                                        }
                                    ],
                                    "py_def": "def vocab(self) -> tuple[str, int]"
                                },
                                "similar": {
                                    "type": "func",
                                    "name": "similar",
                                    "doc": {
                                        "brief": "Manually register mute words, and each pinyin can register up to 10 homophones,\\nplease note that using this interface to register homophones will overwrite,\\nthe homophone table automatically generated in the \\\"automatic homophone processing\\\" feature.",
                                        "param": {
                                            "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                            "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                        },
                                        "return": "err::Err type, if init success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.Speech.similar",
                                        "py_doc": "Manually register mute words, and each pinyin can register up to 10 homophones,\nplease note that using this interface to register homophones will overwrite,\nthe homophone table automatically generated in the \"automatic homophone processing\" feature.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "pny",
                                            null
                                        ],
                                        [
                                            "std::vector<std::string>",
                                            "similar_pnys",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err similar(const string &pny, std::vector<std::string> similar_pnys)",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "similar",
                                            "doc": {
                                                "brief": "Manually register mute words, and each pinyin can register up to 10 homophones,\\nplease note that using this interface to register homophones will overwrite,\\nthe homophone table automatically generated in the \\\"automatic homophone processing\\\" feature.",
                                                "param": {
                                                    "dev_type": "device type want to detect, can choose between WAV, PCM, or MIC.",
                                                    "device_name": "device name want to detect, can choose a WAV file, a PCM file, or a MIC device name."
                                                },
                                                "return": "err::Err type, if init success, return err::ERR_NONE",
                                                "maixpy": "maix.nn.Speech.similar",
                                                "py_doc": "Manually register mute words, and each pinyin can register up to 10 homophones,\nplease note that using this interface to register homophones will overwrite,\nthe homophone table automatically generated in the \"automatic homophone processing\" feature.\n\nArgs:\n  - dev_type: device type want to detect, can choose between WAV, PCM, or MIC.\n  - device_name: device name want to detect, can choose a WAV file, a PCM file, or a MIC device name.\n\n\nReturns: err::Err type, if init success, return err::ERR_NONE\n"
                                            },
                                            "args": [
                                                [
                                                    "const string &",
                                                    "pny",
                                                    null
                                                ],
                                                [
                                                    "std::vector<std::string>",
                                                    "similar_pnys",
                                                    null
                                                ]
                                            ],
                                            "ret_type": "err::Err",
                                            "static": false,
                                            "def": "err::Err similar(const string &pny, std::vector<std::string> similar_pnys)"
                                        }
                                    ],
                                    "py_def": "def similar(self, pny: str, similar_pnys: list[str]) -> maix.err.Err"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.Speech.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.Speech.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                },
                                "dev_type": {
                                    "type": "func",
                                    "name": "dev_type",
                                    "doc": {
                                        "brief": "get device type",
                                        "return": "nn::SpeechDevice type, see SpeechDevice of this module",
                                        "maixpy": "maix.nn.Speech.dev_type",
                                        "py_doc": "get device type\n\nReturns: nn::SpeechDevice type, see SpeechDevice of this module\n"
                                    },
                                    "args": [],
                                    "ret_type": "nn::SpeechDevice",
                                    "static": false,
                                    "def": "nn::SpeechDevice dev_type()",
                                    "overload": [
                                        {
                                            "type": "func",
                                            "name": "dev_type",
                                            "doc": {
                                                "brief": "get device type",
                                                "return": "nn::SpeechDevice type, see SpeechDevice of this module",
                                                "maixpy": "maix.nn.Speech.dev_type",
                                                "py_doc": "get device type\n\nReturns: nn::SpeechDevice type, see SpeechDevice of this module\n"
                                            },
                                            "args": [],
                                            "ret_type": "nn::SpeechDevice",
                                            "static": false,
                                            "def": "nn::SpeechDevice dev_type()"
                                        }
                                    ],
                                    "py_def": "def dev_type(self) -> SpeechDevice"
                                }
                            },
                            "def": "class Speech"
                        },
                        "YOLOv8": {
                            "type": "class",
                            "name": "YOLOv8",
                            "doc": {
                                "brief": "YOLOv8 class",
                                "maixpy": "maix.nn.YOLOv8",
                                "py_doc": "YOLOv8 class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "YOLOv8",
                                    "doc": {
                                        "brief": "Constructor of YOLOv8 class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.YOLOv8.__init__",
                                        "maixcdk": "maix.nn.YOLOv8.YOLOv8",
                                        "py_doc": "Constructor of YOLOv8 class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "YOLOv8(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.YOLOv8.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.5.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN.",
                                            "keypoint_th": "keypoint threshold, default 0.5, only for yolov8-pose model."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.\nIf model is yolov8-pose, object's points have value, and if points' value < 0 means that point is invalid(conf < keypoint_th).",
                                        "maixpy": "maix.nn.YOLOv8.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.5.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n  - keypoint_th: keypoint threshold, default 0.5, only for yolov8-pose model.\n\n\nReturns: Object list. In C++, you should delete it after use.\nIf model is yolov8-pose, object's points have value, and if points' value < 0 means that point is invalid(conf < keypoint_th).\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ],
                                        [
                                            "float",
                                            "keypoint_th",
                                            "0.5"
                                        ]
                                    ],
                                    "ret_type": "nn::Objects*",
                                    "static": false,
                                    "def": "nn::Objects *detect(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN, float keypoint_th = 0.5)",
                                    "py_def": "def detect(self, img: maix.image.Image, conf_th: float = 0.5, iou_th: float = 0.45, fit: maix.image.Fit = ..., keypoint_th: float = 0.5) -> ..."
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.YOLOv8.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.YOLOv8.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.YOLOv8.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.YOLOv8.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "draw_pose": {
                                    "type": "func",
                                    "name": "draw_pose",
                                    "doc": {
                                        "brief": "Draw pose keypoints on image",
                                        "param": {
                                            "img": "image object, maix.image.Image type.",
                                            "points": "keypoits, int list type, [x, y, x, y ...]",
                                            "radius": "radius of points.",
                                            "color": "color of points.",
                                            "body": "true, if points' length is 17*2 and body is ture, will draw lines as human body, if set to false won't draw lines, default true."
                                        },
                                        "maixpy": "maix.nn.YOLOv8.draw_pose",
                                        "py_doc": "Draw pose keypoints on image\n\nArgs:\n  - img: image object, maix.image.Image type.\n  - points: keypoits, int list type, [x, y, x, y ...]\n  - radius: radius of points.\n  - color: color of points.\n  - body: true, if points' length is 17*2 and body is ture, will draw lines as human body, if set to false won't draw lines, default true.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "points",
                                            null
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            "4"
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            "image::COLOR_RED"
                                        ],
                                        [
                                            "bool",
                                            "body",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void draw_pose(image::Image &img, std::vector<int> points, int radius = 4, image::Color color = image::COLOR_RED, bool body = true)",
                                    "py_def": "def draw_pose(self, img: maix.image.Image, points: list[int], radius: int = 4, color: maix.image.Color = ..., body: bool = True) -> None"
                                },
                                "draw_seg_mask": {
                                    "type": "func",
                                    "name": "draw_seg_mask",
                                    "doc": {
                                        "brief": "Draw segmentation on image",
                                        "param": {
                                            "img": "image object, maix.image.Image type.",
                                            "seg_mask": "segmentation mask image by detect method, a grayscale image",
                                            "threshold": "only mask's value > threshold will be draw on image, value from 0 to 255."
                                        },
                                        "maixpy": "maix.nn.YOLOv8.draw_seg_mask",
                                        "py_doc": "Draw segmentation on image\n\nArgs:\n  - img: image object, maix.image.Image type.\n  - seg_mask: segmentation mask image by detect method, a grayscale image\n  - threshold: only mask's value > threshold will be draw on image, value from 0 to 255.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "image::Image &",
                                            "seg_mask",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "127"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void draw_seg_mask(image::Image &img, int x, int y, image::Image &seg_mask, int threshold = 127)",
                                    "py_def": "def draw_seg_mask(self, img: maix.image.Image, x: int, y: int, seg_mask: maix.image.Image, threshold: int = 127) -> None"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.YOLOv8.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.YOLOv8.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.YOLOv8.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.YOLOv8.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class YOLOv8"
                        },
                        "Object": {
                            "type": "class",
                            "name": "Object",
                            "doc": {
                                "brief": "Object for detect result",
                                "maixpy": "maix.nn.Object",
                                "py_doc": "Object for detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Object",
                                    "doc": {
                                        "brief": "Constructor of Object for detect result",
                                        "param": {
                                            "x": "left top x",
                                            "y": "left top y",
                                            "w": "width",
                                            "h": "height",
                                            "class_id": "class id",
                                            "score": "score"
                                        },
                                        "maixpy": "maix.nn.Object.__init__",
                                        "maixcdk": "maix.nn.Object.Object",
                                        "py_doc": "Constructor of Object for detect result\n\nArgs:\n  - x: left top x\n  - y: left top y\n  - w: width\n  - h: height\n  - class_id: class id\n  - score: score\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "class_id",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "points",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Object(int x = 0, int y = 0, int w = 0, int h = 0, int class_id = 0, float score = 0, std::vector<int> points = std::vector<int>())",
                                    "py_def": "def __init__(self, x: int = 0, y: int = 0, w: int = 0, h: int = 0, class_id: int = 0, score: float = 0, points: list[int] = []) -> None"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "Object info to string",
                                        "return": "Object info string",
                                        "maixpy": "maix.nn.Object.__str__",
                                        "maixcdk": "maix.nn.Object.to_str",
                                        "py_doc": "Object info to string\n\nReturns: Object info string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "x": {
                                    "type": "var",
                                    "name": "x",
                                    "doc": {
                                        "brief": "Object left top coordinate x",
                                        "maixpy": "maix.nn.Object.x",
                                        "py_doc": "Object left top coordinate x"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x"
                                },
                                "y": {
                                    "type": "var",
                                    "name": "y",
                                    "doc": {
                                        "brief": "Object left top coordinate y",
                                        "maixpy": "maix.nn.Object.y",
                                        "py_doc": "Object left top coordinate y"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y"
                                },
                                "w": {
                                    "type": "var",
                                    "name": "w",
                                    "doc": {
                                        "brief": "Object width",
                                        "maixpy": "maix.nn.Object.w",
                                        "py_doc": "Object width"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int w"
                                },
                                "h": {
                                    "type": "var",
                                    "name": "h",
                                    "doc": {
                                        "brief": "Object height",
                                        "maixpy": "maix.nn.Object.h",
                                        "py_doc": "Object height"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int h"
                                },
                                "class_id": {
                                    "type": "var",
                                    "name": "class_id",
                                    "doc": {
                                        "brief": "Object class id",
                                        "maixpy": "maix.nn.Object.class_id",
                                        "py_doc": "Object class id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int class_id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "Object score",
                                        "maixpy": "maix.nn.Object.score",
                                        "py_doc": "Object score"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                },
                                "points": {
                                    "type": "var",
                                    "name": "points",
                                    "doc": {
                                        "brief": "keypoints",
                                        "maixpy": "maix.nn.Object.points",
                                        "py_doc": "keypoints"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> points"
                                },
                                "seg_mask": {
                                    "type": "var",
                                    "name": "seg_mask",
                                    "doc": {
                                        "brief": "segmentation mask, uint8 list type, shape is h * w but flattened to one dimension, value fron 0 to 255.",
                                        "attention": "For efficiency, it's a pointer in C++, use this carefully!",
                                        "maixpy": "maix.nn.Object.seg_mask",
                                        "py_doc": "segmentation mask, uint8 list type, shape is h * w but flattened to one dimension, value fron 0 to 255."
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "image::Image *seg_mask"
                                }
                            },
                            "def": "class Object"
                        },
                        "ObjectFloat": {
                            "type": "class",
                            "name": "ObjectFloat",
                            "doc": {
                                "brief": "Object for detect result",
                                "maixpy": "maix.nn.ObjectFloat",
                                "py_doc": "Object for detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "ObjectFloat",
                                    "doc": {
                                        "brief": "Constructor of Object for detect result",
                                        "param": {
                                            "x": "left top x",
                                            "y": "left top y",
                                            "w": "width",
                                            "h": "height",
                                            "class_id": "class id",
                                            "score": "score"
                                        },
                                        "maixpy": "maix.nn.ObjectFloat.__init__",
                                        "maixcdk": "maix.nn.ObjectFloat.ObjectFloat",
                                        "py_doc": "Constructor of Object for detect result\n\nArgs:\n  - x: left top x\n  - y: left top y\n  - w: width\n  - h: height\n  - class_id: class id\n  - score: score\n"
                                    },
                                    "args": [
                                        [
                                            "float",
                                            "x",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "y",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "w",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "h",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "class_id",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "points",
                                            "std::vector<float>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "ObjectFloat(float x = 0, float y = 0, float w = 0, float h = 0, float class_id = 0, float score = 0, std::vector<float> points = std::vector<float>())",
                                    "py_def": "def __init__(self, x: float = 0, y: float = 0, w: float = 0, h: float = 0, class_id: float = 0, score: float = 0, points: list[float] = []) -> None"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "Object info to string",
                                        "return": "Object info string",
                                        "maixpy": "maix.nn.ObjectFloat.__str__",
                                        "maixcdk": "maix.nn.ObjectFloat.to_str",
                                        "py_doc": "Object info to string\n\nReturns: Object info string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "x": {
                                    "type": "var",
                                    "name": "x",
                                    "doc": {
                                        "brief": "Object left top coordinate x",
                                        "maixpy": "maix.nn.ObjectFloat.x",
                                        "py_doc": "Object left top coordinate x"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float x"
                                },
                                "y": {
                                    "type": "var",
                                    "name": "y",
                                    "doc": {
                                        "brief": "Object left top coordinate y",
                                        "maixpy": "maix.nn.ObjectFloat.y",
                                        "py_doc": "Object left top coordinate y"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float y"
                                },
                                "w": {
                                    "type": "var",
                                    "name": "w",
                                    "doc": {
                                        "brief": "Object width",
                                        "maixpy": "maix.nn.ObjectFloat.w",
                                        "py_doc": "Object width"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float w"
                                },
                                "h": {
                                    "type": "var",
                                    "name": "h",
                                    "doc": {
                                        "brief": "Object height",
                                        "maixpy": "maix.nn.ObjectFloat.h",
                                        "py_doc": "Object height"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float h"
                                },
                                "class_id": {
                                    "type": "var",
                                    "name": "class_id",
                                    "doc": {
                                        "brief": "Object class id",
                                        "maixpy": "maix.nn.ObjectFloat.class_id",
                                        "py_doc": "Object class id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float class_id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "Object score",
                                        "maixpy": "maix.nn.ObjectFloat.score",
                                        "py_doc": "Object score"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                },
                                "points": {
                                    "type": "var",
                                    "name": "points",
                                    "doc": {
                                        "brief": "keypoints",
                                        "maixpy": "maix.nn.ObjectFloat.points",
                                        "py_doc": "keypoints"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> points"
                                }
                            },
                            "def": "class ObjectFloat"
                        },
                        "Objects": {
                            "type": "class",
                            "name": "Objects",
                            "doc": {
                                "brief": "Objects Class for detect result",
                                "maixpy": "maix.nn.Objects",
                                "py_doc": "Objects Class for detect result"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Objects",
                                    "doc": {
                                        "brief": "Constructor of Objects class",
                                        "maixpy": "maix.nn.Objects.__init__",
                                        "maixcdk": "maix.nn.Objects.Objects",
                                        "py_doc": "Constructor of Objects class"
                                    },
                                    "args": [],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Objects()",
                                    "py_def": "def __init__(self) -> None"
                                },
                                "add": {
                                    "type": "func",
                                    "name": "add",
                                    "doc": {
                                        "brief": "Add object to objects",
                                        "throw": "Throw exception if no memory",
                                        "maixpy": "maix.nn.Objects.add",
                                        "py_doc": "Add object to objects"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "class_id",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "points",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "nn::Object&",
                                    "static": false,
                                    "def": "nn::Object &add(int x = 0, int y = 0, int w = 0, int h = 0, int class_id = 0, float score = 0, std::vector<int> points = std::vector<int>())",
                                    "py_def": "def add(self, x: int = 0, y: int = 0, w: int = 0, h: int = 0, class_id: int = 0, score: float = 0, points: list[int] = []) -> Object"
                                },
                                "remove": {
                                    "type": "func",
                                    "name": "remove",
                                    "doc": {
                                        "brief": "Remove object form objects",
                                        "maixpy": "maix.nn.Objects.remove",
                                        "py_doc": "Remove object form objects"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err remove(int idx)",
                                    "py_def": "def remove(self, idx: int) -> maix.err.Err"
                                },
                                "at": {
                                    "type": "func",
                                    "name": "at",
                                    "doc": {
                                        "brief": "Get object item",
                                        "maixpy": "maix.nn.Objects.at",
                                        "py_doc": "Get object item"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "nn::Object&",
                                    "static": false,
                                    "def": "nn::Object &at(int idx)",
                                    "py_def": "def at(self, idx: int) -> Object"
                                },
                                "__item__": {
                                    "type": "func",
                                    "name": "operator[]",
                                    "doc": {
                                        "brief": "Get object item",
                                        "maixpy": "maix.nn.Objects.__item__",
                                        "maixcdk": "maix.nn.Objects.[]",
                                        "py_doc": "Get object item"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "nn::Object&",
                                    "static": false,
                                    "def": "nn::Object &operator[](int idx)",
                                    "py_def": "def __item__(self, idx: int) -> Object"
                                },
                                "__len__": {
                                    "type": "func",
                                    "name": "size",
                                    "doc": {
                                        "brief": "Get size",
                                        "maixpy": "maix.nn.Objects.__len__",
                                        "maixcdk": "maix.nn.Objects.size",
                                        "py_doc": "Get size"
                                    },
                                    "args": [],
                                    "ret_type": "size_t",
                                    "static": false,
                                    "def": "size_t size()",
                                    "py_def": "def __len__(self) -> int"
                                },
                                "__iter__": {
                                    "type": "func",
                                    "name": "begin",
                                    "doc": {
                                        "brief": "Begin",
                                        "maixpy": "maix.nn.Objects.__iter__",
                                        "maixcdk": "maix.nn.Objects.begin",
                                        "py_doc": "Begin"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<Object*>::iterator",
                                    "static": false,
                                    "def": "std::vector<Object*>::iterator begin()",
                                    "py_def": "def __iter__(self) -> typing.Iterator"
                                }
                            },
                            "def": "class Objects"
                        },
                        "MUD": {
                            "type": "class",
                            "name": "MUD",
                            "doc": {
                                "brief": "MUD(model universal describe file) class",
                                "maixpy": "maix.nn.MUD",
                                "py_doc": "MUD(model universal describe file) class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "MUD",
                                    "doc": {
                                        "brief": "MUD constructor",
                                        "param": {
                                            "model_path": "direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function."
                                        },
                                        "maixpy": "maix.nn.MUD.__init__",
                                        "maixcdk": "maix.nn.MUD.MUD",
                                        "py_doc": "MUD constructor\n\nArgs:\n  - model_path: direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const char *",
                                            "model_path",
                                            "nullptr"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "MUD(const char *model_path = nullptr)",
                                    "py_def": "def __init__(self, model_path: str = None) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model_path": "direction [in], model file path, model format can be MUD(model universal describe file) file."
                                        },
                                        "return": "error code, if load success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.MUD.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model_path: direction [in], model file path, model format can be MUD(model universal describe file) file.\n\n\nReturns: error code, if load success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model_path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const std::string &model_path)",
                                    "py_def": "def load(self, model_path: str) -> maix.err.Err"
                                },
                                "type": {
                                    "type": "var",
                                    "name": "type",
                                    "doc": {
                                        "brief": "Model type, string type",
                                        "maixpy": "maix.nn.MUD.type",
                                        "py_doc": "Model type, string type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string type"
                                },
                                "items": {
                                    "type": "var",
                                    "name": "items",
                                    "doc": {
                                        "brief": "Model config items, different model type has different config items",
                                        "maixpy": "maix.nn.MUD.items",
                                        "py_doc": "Model config items, different model type has different config items"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::map<std::string, std::map<std::string, std::string>> items"
                                }
                            },
                            "def": "class MUD"
                        },
                        "LayerInfo": {
                            "type": "class",
                            "name": "LayerInfo",
                            "doc": {
                                "brief": "NN model layer info",
                                "maixpy": "maix.nn.LayerInfo",
                                "py_doc": "NN model layer info"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "LayerInfo",
                                    "doc": {
                                        "brief": "LayerInfo constructor",
                                        "param": {
                                            "name": "direction [in], layer name",
                                            "dtype": "direction [in], layer data type",
                                            "shape": "direction [in], layer shape"
                                        },
                                        "maixpy": "maix.nn.LayerInfo.__init__",
                                        "maixcdk": "maix.nn.LayerInfo.LayerInfo",
                                        "py_doc": "LayerInfo constructor\n\nArgs:\n  - name: direction [in], layer name\n  - dtype: direction [in], layer data type\n  - shape: direction [in], layer shape\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "name",
                                            "\"\""
                                        ],
                                        [
                                            "tensor::DType",
                                            "dtype",
                                            "tensor::DType::FLOAT32"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "shape",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "LayerInfo(const std::string &name =  \"\", tensor::DType dtype = tensor::DType::FLOAT32, std::vector<int> shape = std::vector<int>())",
                                    "py_def": "def __init__(self, name: str = '', dtype: maix.tensor.DType = ..., shape: list[int] = []) -> None"
                                },
                                "name": {
                                    "type": "var",
                                    "name": "name",
                                    "doc": {
                                        "brief": "Layer name",
                                        "maixpy": "maix.nn.LayerInfo.name",
                                        "py_doc": "Layer name"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string   name"
                                },
                                "dtype": {
                                    "type": "var",
                                    "name": "dtype",
                                    "doc": {
                                        "brief": "Layer data type",
                                        "attention": "If model is quantized, this is the real quantized data type like int8 float16,\nin most scene, inputs and outputs we actually use float32 in API like forward.",
                                        "maixpy": "maix.nn.LayerInfo.dtype",
                                        "py_doc": "Layer data type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "tensor::DType dtype"
                                },
                                "shape": {
                                    "type": "var",
                                    "name": "shape",
                                    "doc": {
                                        "brief": "Layer shape",
                                        "maixpy": "maix.nn.LayerInfo.shape",
                                        "py_doc": "Layer shape"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> shape"
                                },
                                "shape_int": {
                                    "type": "func",
                                    "name": "shape_int",
                                    "doc": {
                                        "brief": "Shape as one int type, multiply all dims of shape",
                                        "maixpy": "maix.nn.LayerInfo.shape_int",
                                        "py_doc": "Shape as one int type, multiply all dims of shape"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int shape_int()",
                                    "py_def": "def shape_int(self) -> int"
                                },
                                "to_str": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.nn.LayerInfo.to_str",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def to_str(self) -> str"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "__str__",
                                    "doc": {
                                        "brief": "To string",
                                        "maixpy": "maix.nn.LayerInfo.__str__",
                                        "py_doc": "To string"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string __str__()",
                                    "py_def": "def __str__(self) -> str"
                                }
                            },
                            "def": "class LayerInfo"
                        },
                        "NN": {
                            "type": "class",
                            "name": "NN",
                            "doc": {
                                "brief": "Neural network class",
                                "maixpy": "maix.nn.NN",
                                "py_doc": "Neural network class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "NN",
                                    "doc": {
                                        "brief": "Neural network constructor",
                                        "param": {
                                            "model": "direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "maixpy": "maix.nn.NN.__init__",
                                        "py_doc": "Neural network constructor\n\nArgs:\n  - model: direction [in], model file path, model format can be MUD(model universal describe file) file.\nIf model_path set, will load model from file, load failed will raise err.Exception.\nIf model_path not set, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "NN(const std::string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "direction [in], model file path, model format can be MUD(model universal describe file) file."
                                        },
                                        "return": "error code, if load success, return err::ERR_NONE",
                                        "maixpy": "maix.nn.NN.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: direction [in], model file path, model format can be MUD(model universal describe file) file.\n\n\nReturns: error code, if load success, return err::ERR_NONE\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const std::string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "loaded": {
                                    "type": "func",
                                    "name": "loaded",
                                    "doc": {
                                        "brief": "Is model loaded",
                                        "return": "true if model loaded, else false",
                                        "maixpy": "maix.nn.NN.loaded",
                                        "py_doc": "Is model loaded\n\nReturns: true if model loaded, else false\n"
                                    },
                                    "args": [],
                                    "ret_type": "bool",
                                    "static": false,
                                    "def": "bool loaded()",
                                    "py_def": "def loaded(self) -> bool"
                                },
                                "set_dual_buff": {
                                    "type": "func",
                                    "name": "set_dual_buff",
                                    "doc": {
                                        "brief": "Enable dual buff or disable dual buff",
                                        "param": {
                                            "enable": "true to enable, false to disable"
                                        },
                                        "maixpy": "maix.nn.NN.set_dual_buff",
                                        "py_doc": "Enable dual buff or disable dual buff\n\nArgs:\n  - enable: true to enable, false to disable\n"
                                    },
                                    "args": [
                                        [
                                            "bool",
                                            "enable",
                                            null
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void set_dual_buff(bool enable)",
                                    "py_def": "def set_dual_buff(self, enable: bool) -> None"
                                },
                                "inputs_info": {
                                    "type": "func",
                                    "name": "inputs_info",
                                    "doc": {
                                        "brief": "Get model input layer info",
                                        "return": "input layer info",
                                        "maixpy": "maix.nn.NN.inputs_info",
                                        "py_doc": "Get model input layer info\n\nReturns: input layer info\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<nn::LayerInfo>",
                                    "static": false,
                                    "def": "std::vector<nn::LayerInfo> inputs_info()",
                                    "py_def": "def inputs_info(self) -> list[LayerInfo]"
                                },
                                "outputs_info": {
                                    "type": "func",
                                    "name": "outputs_info",
                                    "doc": {
                                        "brief": "Get model output layer info",
                                        "return": "output layer info",
                                        "maixpy": "maix.nn.NN.outputs_info",
                                        "py_doc": "Get model output layer info\n\nReturns: output layer info\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<nn::LayerInfo>",
                                    "static": false,
                                    "def": "std::vector<nn::LayerInfo> outputs_info()",
                                    "py_def": "def outputs_info(self) -> list[LayerInfo]"
                                },
                                "extra_info": {
                                    "type": "func",
                                    "name": "extra_info",
                                    "doc": {
                                        "brief": "Get model extra info define in MUD file",
                                        "return": "extra info, dict type, key-value object, attention: key and value are all string type.",
                                        "maixpy": "maix.nn.NN.extra_info",
                                        "py_doc": "Get model extra info define in MUD file\n\nReturns: extra info, dict type, key-value object, attention: key and value are all string type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::map<std::string, std::string>",
                                    "static": false,
                                    "def": "std::map<std::string, std::string> extra_info()",
                                    "py_def": "def extra_info(self) -> dict[str, str]"
                                },
                                "forward": {
                                    "type": "func",
                                    "name": "forward",
                                    "doc": {
                                        "brief": "forward run model, get output of model,\\nthis is specially for MaixPy, not efficient, but easy to use in MaixPy",
                                        "param": {
                                            "input": "direction [in], input tensor",
                                            "copy_result": "If set true, will copy result to a new variable; else will use a internal memory, you can only use it until to the next forward.\nDefault true to avoid problems, you can set it to false manually to make speed faster.",
                                            "dual_buff_wait": "bool type, only for dual_buff mode, if true, will inference this image and wait for result, default false."
                                        },
                                        "return": "output tensor. In C++, you should manually delete tensors in return value and return value.\nIf dual_buff mode, it can be NULL(None in MaixPy) means not ready.",
                                        "throw": "if error ocurrs like no memory or arg error, will raise err.Exception.",
                                        "maixpy": "maix.nn.NN.forward",
                                        "py_doc": "forward run model, get output of model,\nthis is specially for MaixPy, not efficient, but easy to use in MaixPy\n\nArgs:\n  - input: direction [in], input tensor\n  - copy_result: If set true, will copy result to a new variable; else will use a internal memory, you can only use it until to the next forward.\nDefault true to avoid problems, you can set it to false manually to make speed faster.\n  - dual_buff_wait: bool type, only for dual_buff mode, if true, will inference this image and wait for result, default false.\n\n\nReturns: output tensor. In C++, you should manually delete tensors in return value and return value.\nIf dual_buff mode, it can be NULL(None in MaixPy) means not ready.\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensors &",
                                            "inputs",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "copy_result",
                                            "true"
                                        ],
                                        [
                                            "bool",
                                            "dual_buff_wait",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensors*",
                                    "static": false,
                                    "def": "tensor::Tensors *forward(tensor::Tensors &inputs, bool copy_result = true, bool dual_buff_wait = false)",
                                    "py_def": "def forward(self, inputs: maix.tensor.Tensors, copy_result: bool = True, dual_buff_wait: bool = False) -> maix.tensor.Tensors"
                                },
                                "forward_image": {
                                    "type": "func",
                                    "name": "forward_image",
                                    "doc": {
                                        "brief": "forward model, param is image",
                                        "param": {
                                            "img": "input image",
                                            "mean": "mean value, a list type, e.g. [0.485, 0.456, 0.406], default is empty list means not normalize.",
                                            "scale": "scale value, a list type, e.g. [1/0.229, 1/0.224, 1/0.225], default is empty list means not normalize.",
                                            "fit": "fit mode, if the image size of input not equal to model's input, it will auto resize use this fit method,\ndefault is image.Fit.FIT_FILL for easy coordinate calculation, but for more accurate result, use image.Fit.FIT_CONTAIN is better.",
                                            "copy_result": "If set true, will copy result to a new variable; else will use a internal memory, you can only use it until to the next forward.\nDefault true to avoid problems, you can set it to false manually to make speed faster.",
                                            "dual_buff_wait": "bool type, only for dual_buff mode, if true, will inference this image and wait for result, default false."
                                        },
                                        "return": "output tensor. In C++, you should manually delete tensors in return value and return value.\nIf dual_buff mode, it can be NULL(None in MaixPy) means not ready.",
                                        "throw": "If error occurs, like arg error or alloc memory failed, will raise err.Exception.",
                                        "maixpy": "maix.nn.NN.forward_image",
                                        "py_doc": "forward model, param is image\n\nArgs:\n  - img: input image\n  - mean: mean value, a list type, e.g. [0.485, 0.456, 0.406], default is empty list means not normalize.\n  - scale: scale value, a list type, e.g. [1/0.229, 1/0.224, 1/0.225], default is empty list means not normalize.\n  - fit: fit mode, if the image size of input not equal to model's input, it will auto resize use this fit method,\ndefault is image.Fit.FIT_FILL for easy coordinate calculation, but for more accurate result, use image.Fit.FIT_CONTAIN is better.\n  - copy_result: If set true, will copy result to a new variable; else will use a internal memory, you can only use it until to the next forward.\nDefault true to avoid problems, you can set it to false manually to make speed faster.\n  - dual_buff_wait: bool type, only for dual_buff mode, if true, will inference this image and wait for result, default false.\n\n\nReturns: output tensor. In C++, you should manually delete tensors in return value and return value.\nIf dual_buff mode, it can be NULL(None in MaixPy) means not ready.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "std::vector<float>",
                                            "mean",
                                            "std::vector<float>()"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "scale",
                                            "std::vector<float>()"
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::Fit::FIT_FILL"
                                        ],
                                        [
                                            "bool",
                                            "copy_result",
                                            "true"
                                        ],
                                        [
                                            "bool",
                                            "dual_buff_wait",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensors*",
                                    "static": false,
                                    "def": "tensor::Tensors *forward_image(image::Image &img, std::vector<float> mean = std::vector<float>(), std::vector<float> scale = std::vector<float>(), image::Fit fit = image::Fit::FIT_FILL, bool copy_result = true, bool dual_buff_wait = false)",
                                    "py_def": "def forward_image(self, img: maix.image.Image, mean: list[float] = [], scale: list[float] = [], fit: maix.image.Fit = ..., copy_result: bool = True, dual_buff_wait: bool = False) -> maix.tensor.Tensors"
                                }
                            },
                            "def": "class NN"
                        },
                        "FaceObject": {
                            "type": "class",
                            "name": "FaceObject",
                            "doc": {
                                "brief": "Face object",
                                "maixpy": "maix.nn.FaceObject",
                                "py_doc": "Face object"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "FaceObject",
                                    "doc": {
                                        "brief": "Constructor",
                                        "maixpy": "maix.nn.FaceObject.__init__",
                                        "maixcdk": "maix.nn.FaceObject.FaceObject",
                                        "py_doc": "Constructor"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "x",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "y",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "w",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "h",
                                            "0"
                                        ],
                                        [
                                            "int",
                                            "class_id",
                                            "0"
                                        ],
                                        [
                                            "float",
                                            "score",
                                            "0"
                                        ],
                                        [
                                            "std::vector<int>",
                                            "points",
                                            "std::vector<int>()"
                                        ],
                                        [
                                            "std::vector<float>",
                                            "feature",
                                            "std::vector<float>()"
                                        ],
                                        [
                                            "image::Image",
                                            "face",
                                            "image::Image()"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "FaceObject(int x = 0, int y = 0, int w = 0, int h = 0, int class_id = 0, float score = 0, std::vector<int> points = std::vector<int>(), std::vector<float> feature = std::vector<float>(), image::Image face = image::Image())",
                                    "py_def": "def __init__(self, x: int = 0, y: int = 0, w: int = 0, h: int = 0, class_id: int = 0, score: float = 0, points: list[int] = [], feature: list[float] = [], face: maix.image.Image = ...) -> None"
                                },
                                "__str__": {
                                    "type": "func",
                                    "name": "to_str",
                                    "doc": {
                                        "brief": "FaceObject info to string",
                                        "return": "FaceObject info string",
                                        "maixpy": "maix.nn.FaceObject.__str__",
                                        "maixcdk": "maix.nn.FaceObject.to_str",
                                        "py_doc": "FaceObject info to string\n\nReturns: FaceObject info string\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::string",
                                    "static": false,
                                    "def": "std::string to_str()",
                                    "py_def": "def __str__(self) -> str"
                                },
                                "x": {
                                    "type": "var",
                                    "name": "x",
                                    "doc": {
                                        "brief": "FaceObject left top coordinate x",
                                        "maixpy": "maix.nn.FaceObject.x",
                                        "py_doc": "FaceObject left top coordinate x"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int x"
                                },
                                "y": {
                                    "type": "var",
                                    "name": "y",
                                    "doc": {
                                        "brief": "FaceObject left top coordinate y",
                                        "maixpy": "maix.nn.FaceObject.y",
                                        "py_doc": "FaceObject left top coordinate y"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int y"
                                },
                                "w": {
                                    "type": "var",
                                    "name": "w",
                                    "doc": {
                                        "brief": "FaceObject width",
                                        "maixpy": "maix.nn.FaceObject.w",
                                        "py_doc": "FaceObject width"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int w"
                                },
                                "h": {
                                    "type": "var",
                                    "name": "h",
                                    "doc": {
                                        "brief": "FaceObject height",
                                        "maixpy": "maix.nn.FaceObject.h",
                                        "py_doc": "FaceObject height"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int h"
                                },
                                "class_id": {
                                    "type": "var",
                                    "name": "class_id",
                                    "doc": {
                                        "brief": "FaceObject class id",
                                        "maixpy": "maix.nn.FaceObject.class_id",
                                        "py_doc": "FaceObject class id"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "int class_id"
                                },
                                "score": {
                                    "type": "var",
                                    "name": "score",
                                    "doc": {
                                        "brief": "FaceObject score",
                                        "maixpy": "maix.nn.FaceObject.score",
                                        "py_doc": "FaceObject score"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "float score"
                                },
                                "points": {
                                    "type": "var",
                                    "name": "points",
                                    "doc": {
                                        "brief": "keypoints",
                                        "maixpy": "maix.nn.FaceObject.points",
                                        "py_doc": "keypoints"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<int> points"
                                },
                                "feature": {
                                    "type": "var",
                                    "name": "feature",
                                    "doc": {
                                        "brief": "feature, float list type",
                                        "maixpy": "maix.nn.FaceObject.feature",
                                        "py_doc": "feature, float list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> feature"
                                },
                                "face": {
                                    "type": "var",
                                    "name": "face",
                                    "doc": {
                                        "brief": "face image",
                                        "maixpy": "maix.nn.FaceObject.face",
                                        "py_doc": "face image"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "image::Image face"
                                }
                            },
                            "def": "class FaceObject"
                        },
                        "FaceRecognizer": {
                            "type": "class",
                            "name": "FaceRecognizer",
                            "doc": {
                                "brief": "FaceRecognizer class",
                                "maixpy": "maix.nn.FaceRecognizer",
                                "py_doc": "FaceRecognizer class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "FaceRecognizer",
                                    "doc": {
                                        "brief": "Constructor of FaceRecognizer class",
                                        "param": {
                                            "detect_model": "face detect model path, default empty, you can load model later by load function.",
                                            "feature_model": "feature extract model",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.FaceRecognizer.__init__",
                                        "maixcdk": "maix.nn.FaceRecognizer.FaceRecognizer",
                                        "py_doc": "Constructor of FaceRecognizer class\n\nArgs:\n  - detect_model: face detect model path, default empty, you can load model later by load function.\n  - feature_model: feature extract model\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "detect_model",
                                            "\"\""
                                        ],
                                        [
                                            "const string &",
                                            "feature_model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "FaceRecognizer(const string &detect_model = \"\", const string &feature_model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, detect_model: str = '', feature_model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "detect_model": "face detect model path, default empty, you can load model later by load function.",
                                            "feature_model": "feature extract model"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.FaceRecognizer.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - detect_model: face detect model path, default empty, you can load model later by load function.\n  - feature_model: feature extract model\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "detect_model",
                                            null
                                        ],
                                        [
                                            "const string &",
                                            "feature_model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &detect_model, const string &feature_model)",
                                    "py_def": "def load(self, detect_model: str, feature_model: str) -> maix.err.Err"
                                },
                                "recognize": {
                                    "type": "func",
                                    "name": "recognize",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Detect confidence threshold, default 0.5.",
                                            "iou_th": "Detect IoU threshold, default 0.45.",
                                            "compare_th": "Compare two face score threshold, default 0.8, if two faces' score < this value, will see this face fas unknown.",
                                            "get_feature": "return feature or not, if true will copy features to result, if false will not copy feature to result to save time and memory.",
                                            "get_face": "return face image or not, if true result object's face attribute will valid, or face sttribute is empty. Get face image will alloc memory and copy image, so will lead to slower speed.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "FaceObject list. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.FaceRecognizer.recognize",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Detect confidence threshold, default 0.5.\n  - iou_th: Detect IoU threshold, default 0.45.\n  - compare_th: Compare two face score threshold, default 0.8, if two faces' score < this value, will see this face fas unknown.\n  - get_feature: return feature or not, if true will copy features to result, if false will not copy feature to result to save time and memory.\n  - get_face: return face image or not, if true result object's face attribute will valid, or face sttribute is empty. Get face image will alloc memory and copy image, so will lead to slower speed.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n\n\nReturns: FaceObject list. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "float",
                                            "compare_th",
                                            "0.8"
                                        ],
                                        [
                                            "bool",
                                            "get_feature",
                                            "false"
                                        ],
                                        [
                                            "bool",
                                            "get_face",
                                            "false"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "std::vector<nn::FaceObject>*",
                                    "static": false,
                                    "def": "std::vector<nn::FaceObject> *recognize(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, float compare_th = 0.8, bool get_feature = false, bool get_face = false, maix::image::Fit fit = maix::image::FIT_CONTAIN)",
                                    "py_def": "def recognize(self, img: maix.image.Image, conf_th: float = 0.5, iou_th: float = 0.45, compare_th: float = 0.8, get_feature: bool = False, get_face: bool = False, fit: maix.image.Fit = ...) -> list[FaceObject]"
                                },
                                "add_face": {
                                    "type": "func",
                                    "name": "add_face",
                                    "doc": {
                                        "brief": "Add face to lib",
                                        "param": {
                                            "face": "face object, find by recognize",
                                            "label": "face label(name)"
                                        },
                                        "maixpy": "maix.nn.FaceRecognizer.add_face",
                                        "py_doc": "Add face to lib\n\nArgs:\n  - face: face object, find by recognize\n  - label: face label(name)\n"
                                    },
                                    "args": [
                                        [
                                            "nn::FaceObject *",
                                            "face",
                                            null
                                        ],
                                        [
                                            "const std::string &",
                                            "label",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err add_face(nn::FaceObject *face, const std::string &label)",
                                    "py_def": "def add_face(self, face: FaceObject, label: str) -> maix.err.Err"
                                },
                                "remove_face": {
                                    "type": "func",
                                    "name": "remove_face",
                                    "doc": {
                                        "brief": "remove face from lib",
                                        "param": {
                                            "idx": "index of face in lib, default -1 means use label, idx and label must have one, idx have high priotiry.",
                                            "label": "which face to remove, default to empty string mean use idx, idx and label must have one, idx have high priotiry."
                                        },
                                        "maixpy": "maix.nn.FaceRecognizer.remove_face",
                                        "py_doc": "remove face from lib\n\nArgs:\n  - idx: index of face in lib, default -1 means use label, idx and label must have one, idx have high priotiry.\n  - label: which face to remove, default to empty string mean use idx, idx and label must have one, idx have high priotiry.\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            "-1"
                                        ],
                                        [
                                            "const std::string &",
                                            "label",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err remove_face(int idx = -1, const std::string &label = \"\")",
                                    "py_def": "def remove_face(self, idx: int = -1, label: str = '') -> maix.err.Err"
                                },
                                "save_faces": {
                                    "type": "func",
                                    "name": "save_faces",
                                    "doc": {
                                        "brief": "Save faces info to a file",
                                        "param": {
                                            "path": "where to save, string type."
                                        },
                                        "return": "err.Err type",
                                        "maixpy": "maix.nn.FaceRecognizer.save_faces",
                                        "py_doc": "Save faces info to a file\n\nArgs:\n  - path: where to save, string type.\n\n\nReturns: err.Err type\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err save_faces(const std::string &path)",
                                    "py_def": "def save_faces(self, path: str) -> maix.err.Err"
                                },
                                "load_faces": {
                                    "type": "func",
                                    "name": "load_faces",
                                    "doc": {
                                        "brief": "Load faces info from a file",
                                        "param": {
                                            "path": "from where to load, string type."
                                        },
                                        "return": "err::Err type",
                                        "maixpy": "maix.nn.FaceRecognizer.load_faces",
                                        "py_doc": "Load faces info from a file\n\nArgs:\n  - path: from where to load, string type.\n\n\nReturns: err::Err type\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load_faces(const std::string &path)",
                                    "py_def": "def load_faces(self, path: str) -> maix.err.Err"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.FaceRecognizer.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.FaceRecognizer.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.FaceRecognizer.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.FaceRecognizer.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "mean_detector": {
                                    "type": "var",
                                    "name": "mean_detector",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.FaceRecognizer.mean_detector",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean_detector"
                                },
                                "scale_detector": {
                                    "type": "var",
                                    "name": "scale_detector",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.FaceRecognizer.scale_detector",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale_detector"
                                },
                                "mean_feature": {
                                    "type": "var",
                                    "name": "mean_feature",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.FaceRecognizer.mean_feature",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean_feature"
                                },
                                "scale_feature": {
                                    "type": "var",
                                    "name": "scale_feature",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.FaceRecognizer.scale_feature",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale_feature"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "labels, list type, first is \\\"unknown\\\"",
                                        "maixpy": "maix.nn.FaceRecognizer.labels",
                                        "py_doc": "labels, list type, first is \"unknown\""
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<std::string> labels"
                                },
                                "features": {
                                    "type": "var",
                                    "name": "features",
                                    "doc": {
                                        "brief": "features",
                                        "maixpy": "maix.nn.FaceRecognizer.features",
                                        "py_doc": "features"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<std::vector<float>> features"
                                }
                            },
                            "def": "class FaceRecognizer"
                        },
                        "SelfLearnClassifier": {
                            "type": "class",
                            "name": "SelfLearnClassifier",
                            "doc": {
                                "brief": "SelfLearnClassifier",
                                "maixpy": "maix.nn.SelfLearnClassifier",
                                "py_doc": "SelfLearnClassifier"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "SelfLearnClassifier",
                                    "doc": {
                                        "brief": "Construct a new SelfLearnClassifier object",
                                        "param": {
                                            "model": "MUD model path, if empty, will not load model, you can call load_model() later.\nif not empty, will load model and will raise err::Exception if load failed.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.__init__",
                                        "maixcdk": "maix.nn.SelfLearnClassifier.SelfLearnClassifier",
                                        "py_doc": "Construct a new SelfLearnClassifier object\n\nArgs:\n  - model: MUD model path, if empty, will not load model, you can call load_model() later.\nif not empty, will load model and will raise err::Exception if load failed.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "SelfLearnClassifier(const std::string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load_model": {
                                    "type": "func",
                                    "name": "load_model",
                                    "doc": {
                                        "brief": "Load model from file, model format is .mud,\\nMUD file should contain [extra] section, have key-values:\\n- model_type: classifier_no_top\\n- input_type: rgb or bgr\\n- mean: 123.675, 116.28, 103.53\\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137",
                                        "param": {
                                            "model": "MUD model path"
                                        },
                                        "return": "error code, if load failed, return error code",
                                        "maixpy": "maix.nn.SelfLearnClassifier.load_model",
                                        "py_doc": "Load model from file, model format is .mud,\nMUD file should contain [extra] section, have key-values:\n- model_type: classifier_no_top\n- input_type: rgb or bgr\n- mean: 123.675, 116.28, 103.53\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137\n\nArgs:\n  - model: MUD model path\n\n\nReturns: error code, if load failed, return error code\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load_model(const string &model)",
                                    "py_def": "def load_model(self, model: str) -> maix.err.Err"
                                },
                                "classify": {
                                    "type": "func",
                                    "name": "classify",
                                    "doc": {
                                        "brief": "Classify image",
                                        "param": {
                                            "img": "image, format should match model input_type\uff0c or will raise err.Exception",
                                            "fit": "image resize fit mode, default Fit.FIT_COVER, see image.Fit."
                                        },
                                        "throw": "If error occurred, will raise err::Exception, you can find reason in log, mostly caused by args error or hardware error.",
                                        "return": "result, a list of (idx, distance), smaller distance means more similar. In C++, you need to delete it after use.",
                                        "maixpy": "maix.nn.SelfLearnClassifier.classify",
                                        "py_doc": "Classify image\n\nArgs:\n  - img: image, format should match model input_type\uff0c or will raise err.Exception\n  - fit: image resize fit mode, default Fit.FIT_COVER, see image.Fit.\n\n\nReturns: result, a list of (idx, distance), smaller distance means more similar. In C++, you need to delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_COVER"
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::pair<int, float>>*",
                                    "static": false,
                                    "def": "std::vector<std::pair<int, float>> *classify(image::Image &img, image::Fit fit = image::FIT_COVER)",
                                    "py_def": "def classify(self, img: maix.image.Image, fit: maix.image.Fit = ...) -> list[tuple[int, float]]"
                                },
                                "add_class": {
                                    "type": "func",
                                    "name": "add_class",
                                    "doc": {
                                        "brief": "Add a class to recognize",
                                        "param": {
                                            "img": "Add a image as a new class",
                                            "fit": "image resize fit mode, default Fit.FIT_COVER, see image.Fit."
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.add_class",
                                        "py_doc": "Add a class to recognize\n\nArgs:\n  - img: Add a image as a new class\n  - fit: image resize fit mode, default Fit.FIT_COVER, see image.Fit.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_COVER"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_class(image::Image &img, image::Fit fit = image::FIT_COVER)",
                                    "py_def": "def add_class(self, img: maix.image.Image, fit: maix.image.Fit = ...) -> None"
                                },
                                "class_num": {
                                    "type": "func",
                                    "name": "class_num",
                                    "doc": {
                                        "brief": "Get class number",
                                        "maixpy": "maix.nn.SelfLearnClassifier.class_num",
                                        "py_doc": "Get class number"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int class_num()",
                                    "py_def": "def class_num(self) -> int"
                                },
                                "rm_class": {
                                    "type": "func",
                                    "name": "rm_class",
                                    "doc": {
                                        "brief": "Remove a class",
                                        "param": {
                                            "idx": "index, value from 0 to class_num();"
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.rm_class",
                                        "py_doc": "Remove a class\n\nArgs:\n  - idx: index, value from 0 to class_num();\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err rm_class(int idx)",
                                    "py_def": "def rm_class(self, idx: int) -> maix.err.Err"
                                },
                                "add_sample": {
                                    "type": "func",
                                    "name": "add_sample",
                                    "doc": {
                                        "brief": "Add sample, you should call learn method after add some samples to learn classes.\\nSample image can be any of classes we already added.",
                                        "param": {
                                            "img": "Add a image as a new sample."
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.add_sample",
                                        "py_doc": "Add sample, you should call learn method after add some samples to learn classes.\nSample image can be any of classes we already added.\n\nArgs:\n  - img: Add a image as a new sample.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_COVER"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void add_sample(image::Image &img, image::Fit fit = image::FIT_COVER)",
                                    "py_def": "def add_sample(self, img: maix.image.Image, fit: maix.image.Fit = ...) -> None"
                                },
                                "rm_sample": {
                                    "type": "func",
                                    "name": "rm_sample",
                                    "doc": {
                                        "brief": "Remove a sample",
                                        "param": {
                                            "idx": "index, value from 0 to sample_num();"
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.rm_sample",
                                        "py_doc": "Remove a sample\n\nArgs:\n  - idx: index, value from 0 to sample_num();\n"
                                    },
                                    "args": [
                                        [
                                            "int",
                                            "idx",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err rm_sample(int idx)",
                                    "py_def": "def rm_sample(self, idx: int) -> maix.err.Err"
                                },
                                "sample_num": {
                                    "type": "func",
                                    "name": "sample_num",
                                    "doc": {
                                        "brief": "Get sample number",
                                        "maixpy": "maix.nn.SelfLearnClassifier.sample_num",
                                        "py_doc": "Get sample number"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int sample_num()",
                                    "py_def": "def sample_num(self) -> int"
                                },
                                "learn": {
                                    "type": "func",
                                    "name": "learn",
                                    "doc": {
                                        "brief": "Start auto learn class features from classes image and samples.\\nYou should call this method after you add some samples.",
                                        "return": "learn epoch(times), 0 means learn nothing.",
                                        "maixpy": "maix.nn.SelfLearnClassifier.learn",
                                        "py_doc": "Start auto learn class features from classes image and samples.\nYou should call this method after you add some samples.\n\nReturns: learn epoch(times), 0 means learn nothing.\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int learn()",
                                    "py_def": "def learn(self) -> int"
                                },
                                "clear": {
                                    "type": "func",
                                    "name": "clear",
                                    "doc": {
                                        "brief": "Clear all class and samples",
                                        "maixpy": "maix.nn.SelfLearnClassifier.clear",
                                        "py_doc": "Clear all class and samples"
                                    },
                                    "args": [],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void clear()",
                                    "py_def": "def clear(self) -> None"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size, only for image input",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.SelfLearnClassifier.input_size",
                                        "py_doc": "Get model input size, only for image input\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width, only for image input",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.SelfLearnClassifier.input_width",
                                        "py_doc": "Get model input width, only for image input\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height, only for image input",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.SelfLearnClassifier.input_height",
                                        "py_doc": "Get model input height, only for image input\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format, only for image input",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.SelfLearnClassifier.input_format",
                                        "py_doc": "Get input image format, only for image input\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "input_shape": {
                                    "type": "func",
                                    "name": "input_shape",
                                    "doc": {
                                        "brief": "Get input shape, if have multiple input, only return first input shape",
                                        "return": "input shape, list type",
                                        "maixpy": "maix.nn.SelfLearnClassifier.input_shape",
                                        "py_doc": "Get input shape, if have multiple input, only return first input shape\n\nReturns: input shape, list type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> input_shape()",
                                    "py_def": "def input_shape(self) -> list[int]"
                                },
                                "save": {
                                    "type": "func",
                                    "name": "save",
                                    "doc": {
                                        "brief": "Save features and labels to a binary file",
                                        "param": {
                                            "path": "file path to save, e.g. /root/my_classes.bin",
                                            "labels": "class labels, can be None, or length must equal to class num, or will return err::Err"
                                        },
                                        "return": "maix.err.Err if labels exists but length not equal to class num, or save file failed, or class num is 0.",
                                        "maixpy": "maix.nn.SelfLearnClassifier.save",
                                        "py_doc": "Save features and labels to a binary file\n\nArgs:\n  - path: file path to save, e.g. /root/my_classes.bin\n  - labels: class labels, can be None, or length must equal to class num, or will return err::Err\n\n\nReturns: maix.err.Err if labels exists but length not equal to class num, or save file failed, or class num is 0.\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ],
                                        [
                                            "const std::vector<std::string> &",
                                            "labels",
                                            "std::vector<std::string>()"
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err save(const std::string &path, const std::vector<std::string> &labels = std::vector<std::string>())",
                                    "py_def": "def save(self, path: str, labels: list[str] = []) -> maix.err.Err"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load features info from binary file",
                                        "param": {
                                            "path": "feature info binary file path, e.g. /root/my_classes.bin"
                                        },
                                        "maixpy": "maix.nn.SelfLearnClassifier.load",
                                        "py_doc": "Load features info from binary file\n\nArgs:\n  - path: feature info binary file path, e.g. /root/my_classes.bin\n"
                                    },
                                    "args": [
                                        [
                                            "const std::string &",
                                            "path",
                                            null
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::string>",
                                    "static": false,
                                    "def": "std::vector<std::string> load(const std::string &path)",
                                    "py_def": "def load(self, path: str) -> list[str]"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.SelfLearnClassifier.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.SelfLearnClassifier.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.SelfLearnClassifier.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.SelfLearnClassifier.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class SelfLearnClassifier"
                        },
                        "YOLOv5": {
                            "type": "class",
                            "name": "YOLOv5",
                            "doc": {
                                "brief": "YOLOv5 class",
                                "maixpy": "maix.nn.YOLOv5",
                                "py_doc": "YOLOv5 class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "YOLOv5",
                                    "doc": {
                                        "brief": "Constructor of YOLOv5 class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.YOLOv5.__init__",
                                        "maixcdk": "maix.nn.YOLOv5.YOLOv5",
                                        "py_doc": "Constructor of YOLOv5 class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "YOLOv5(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.YOLOv5.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.5.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.YOLOv5.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.5.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n\n\nReturns: Object list. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "std::vector<nn::Object>*",
                                    "static": false,
                                    "def": "std::vector<nn::Object> *detect(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN)",
                                    "py_def": "def detect(self, img: maix.image.Image, conf_th: float = 0.5, iou_th: float = 0.45, fit: maix.image.Fit = ...) -> list[Object]"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.YOLOv5.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.YOLOv5.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.YOLOv5.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.YOLOv5.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.YOLOv5.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.YOLOv5.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.YOLOv5.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.YOLOv5.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                },
                                "anchors": {
                                    "type": "var",
                                    "name": "anchors",
                                    "doc": {
                                        "brief": "Get anchors",
                                        "maixpy": "maix.nn.YOLOv5.anchors",
                                        "py_doc": "Get anchors"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> anchors"
                                }
                            },
                            "def": "class YOLOv5"
                        },
                        "YOLO11": {
                            "type": "class",
                            "name": "YOLO11",
                            "doc": {
                                "brief": "YOLO11 class",
                                "maixpy": "maix.nn.YOLO11",
                                "py_doc": "YOLO11 class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "YOLO11",
                                    "doc": {
                                        "brief": "Constructor of YOLO11 class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.YOLO11.__init__",
                                        "maixcdk": "maix.nn.YOLO11.YOLO11",
                                        "py_doc": "Constructor of YOLO11 class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "YOLO11(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.YOLO11.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.5.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN.",
                                            "keypoint_th": "keypoint threshold, default 0.5, only for yolo11-pose model."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.\nIf model is yolo11-pose, object's points have value, and if points' value < 0 means that point is invalid(conf < keypoint_th).",
                                        "maixpy": "maix.nn.YOLO11.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.5.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n  - keypoint_th: keypoint threshold, default 0.5, only for yolo11-pose model.\n\n\nReturns: Object list. In C++, you should delete it after use.\nIf model is yolo11-pose, object's points have value, and if points' value < 0 means that point is invalid(conf < keypoint_th).\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ],
                                        [
                                            "float",
                                            "keypoint_th",
                                            "0.5"
                                        ]
                                    ],
                                    "ret_type": "nn::Objects*",
                                    "static": false,
                                    "def": "nn::Objects *detect(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN, float keypoint_th = 0.5)",
                                    "py_def": "def detect(self, img: maix.image.Image, conf_th: float = 0.5, iou_th: float = 0.45, fit: maix.image.Fit = ..., keypoint_th: float = 0.5) -> Objects"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.YOLO11.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.YOLO11.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.YOLO11.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.YOLO11.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "draw_pose": {
                                    "type": "func",
                                    "name": "draw_pose",
                                    "doc": {
                                        "brief": "Draw pose keypoints on image",
                                        "param": {
                                            "img": "image object, maix.image.Image type.",
                                            "points": "keypoits, int list type, [x, y, x, y ...]",
                                            "radius": "radius of points.",
                                            "color": "color of points.",
                                            "body": "true, if points' length is 17*2 and body is ture, will draw lines as human body, if set to false won't draw lines, default true."
                                        },
                                        "maixpy": "maix.nn.YOLO11.draw_pose",
                                        "py_doc": "Draw pose keypoints on image\n\nArgs:\n  - img: image object, maix.image.Image type.\n  - points: keypoits, int list type, [x, y, x, y ...]\n  - radius: radius of points.\n  - color: color of points.\n  - body: true, if points' length is 17*2 and body is ture, will draw lines as human body, if set to false won't draw lines, default true.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "std::vector<int>",
                                            "points",
                                            null
                                        ],
                                        [
                                            "int",
                                            "radius",
                                            "4"
                                        ],
                                        [
                                            "image::Color",
                                            "color",
                                            "image::COLOR_RED"
                                        ],
                                        [
                                            "bool",
                                            "body",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void draw_pose(image::Image &img, std::vector<int> points, int radius = 4, image::Color color = image::COLOR_RED, bool body = true)",
                                    "py_def": "def draw_pose(self, img: maix.image.Image, points: list[int], radius: int = 4, color: maix.image.Color = ..., body: bool = True) -> None"
                                },
                                "draw_seg_mask": {
                                    "type": "func",
                                    "name": "draw_seg_mask",
                                    "doc": {
                                        "brief": "Draw segmentation on image",
                                        "param": {
                                            "img": "image object, maix.image.Image type.",
                                            "seg_mask": "segmentation mask image by detect method, a grayscale image",
                                            "threshold": "only mask's value > threshold will be draw on image, value from 0 to 255."
                                        },
                                        "maixpy": "maix.nn.YOLO11.draw_seg_mask",
                                        "py_doc": "Draw segmentation on image\n\nArgs:\n  - img: image object, maix.image.Image type.\n  - seg_mask: segmentation mask image by detect method, a grayscale image\n  - threshold: only mask's value > threshold will be draw on image, value from 0 to 255.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "image::Image &",
                                            "seg_mask",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "127"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void draw_seg_mask(image::Image &img, int x, int y, image::Image &seg_mask, int threshold = 127)",
                                    "py_def": "def draw_seg_mask(self, img: maix.image.Image, x: int, y: int, seg_mask: maix.image.Image, threshold: int = 127) -> None"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.YOLO11.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.YOLO11.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.YOLO11.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.YOLO11.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class YOLO11"
                        },
                        "Classifier": {
                            "type": "class",
                            "name": "Classifier",
                            "doc": {
                                "brief": "Classifier",
                                "maixpy": "maix.nn.Classifier",
                                "py_doc": "Classifier"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Classifier",
                                    "doc": {
                                        "brief": "Construct a new Classifier object",
                                        "param": {
                                            "model": "MUD model path, if empty, will not load model, you can call load() later.\nif not empty, will load model and will raise err::Exception if load failed.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "maixpy": "maix.nn.Classifier.__init__",
                                        "maixcdk": "maix.nn.Classifier.Classifier",
                                        "py_doc": "Construct a new Classifier object\n\nArgs:\n  - model: MUD model path, if empty, will not load model, you can call load() later.\nif not empty, will load model and will raise err::Exception if load failed.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Classifier(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file, model format is .mud,\\nMUD file should contain [extra] section, have key-values:\\n- model_type: classifier\\n- input_type: rgb or bgr\\n- mean: 123.675, 116.28, 103.53\\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137\\n- labels: imagenet_classes.txt",
                                        "param": {
                                            "model": "MUD model path"
                                        },
                                        "return": "error code, if load failed, return error code",
                                        "maixpy": "maix.nn.Classifier.load",
                                        "py_doc": "Load model from file, model format is .mud,\nMUD file should contain [extra] section, have key-values:\n- model_type: classifier\n- input_type: rgb or bgr\n- mean: 123.675, 116.28, 103.53\n- scale: 0.017124753831663668, 0.01750700280112045, 0.017429193899782137\n- labels: imagenet_classes.txt\n\nArgs:\n  - model: MUD model path\n\n\nReturns: error code, if load failed, return error code\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "classify": {
                                    "type": "func",
                                    "name": "classify",
                                    "doc": {
                                        "brief": "Forward image to model, get result. Only for image input, use classify_raw for tensor input.",
                                        "param": {
                                            "img": "image, format should match model input_type\uff0c or will raise err.Exception",
                                            "softmax": "if true, will do softmax to result, or will return raw value",
                                            "fit": "image resize fit mode, default Fit.FIT_COVER, see image.Fit."
                                        },
                                        "throw": "If error occurred, will raise err::Exception, you can find reason in log, mostly caused by args error or hardware error.",
                                        "return": "result, a list of (label, score). If in dual_buff mode, value can be one element list and score is zero when not ready. In C++, you need to delete it after use.",
                                        "maixpy": "maix.nn.Classifier.classify",
                                        "py_doc": "Forward image to model, get result. Only for image input, use classify_raw for tensor input.\n\nArgs:\n  - img: image, format should match model input_type\uff0c or will raise err.Exception\n  - softmax: if true, will do softmax to result, or will return raw value\n  - fit: image resize fit mode, default Fit.FIT_COVER, see image.Fit.\n\n\nReturns: result, a list of (label, score). If in dual_buff mode, value can be one element list and score is zero when not ready. In C++, you need to delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "softmax",
                                            "true"
                                        ],
                                        [
                                            "image::Fit",
                                            "fit",
                                            "image::FIT_COVER"
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::pair<int, float>>*",
                                    "static": false,
                                    "def": "std::vector<std::pair<int, float>> *classify(image::Image &img, bool softmax = true, image::Fit fit = image::FIT_COVER)",
                                    "py_def": "def classify(self, img: maix.image.Image, softmax: bool = True, fit: maix.image.Fit = ...) -> list[tuple[int, float]]"
                                },
                                "classify_raw": {
                                    "type": "func",
                                    "name": "classify_raw",
                                    "doc": {
                                        "brief": "Forward tensor data to model, get result",
                                        "param": {
                                            "data": "tensor data, format should match model input_type\uff0c or will raise err.Excetion",
                                            "softmax": "if true, will do softmax to result, or will return raw value"
                                        },
                                        "throw": "If error occurred, will raise err::Exception, you can find reason in log, mostly caused by args error or hardware error.",
                                        "return": "result, a list of (label, score). In C++, you need to delete it after use.",
                                        "maixpy": "maix.nn.Classifier.classify_raw",
                                        "py_doc": "Forward tensor data to model, get result\n\nArgs:\n  - data: tensor data, format should match model input_type\uff0c or will raise err.Excetion\n  - softmax: if true, will do softmax to result, or will return raw value\n\n\nReturns: result, a list of (label, score). In C++, you need to delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensor &",
                                            "data",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "softmax",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": "std::vector<std::pair<int, float>>*",
                                    "static": false,
                                    "def": "std::vector<std::pair<int, float>> *classify_raw(tensor::Tensor &data, bool softmax = true)",
                                    "py_def": "def classify_raw(self, data: maix.tensor.Tensor, softmax: bool = True) -> list[tuple[int, float]]"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size, only for image input",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.Classifier.input_size",
                                        "py_doc": "Get model input size, only for image input\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width, only for image input",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.Classifier.input_width",
                                        "py_doc": "Get model input width, only for image input\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height, only for image input",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.Classifier.input_height",
                                        "py_doc": "Get model input height, only for image input\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format, only for image input",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.Classifier.input_format",
                                        "py_doc": "Get input image format, only for image input\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "input_shape": {
                                    "type": "func",
                                    "name": "input_shape",
                                    "doc": {
                                        "brief": "Get input shape, if have multiple input, only return first input shape",
                                        "return": "input shape, list type",
                                        "maixpy": "maix.nn.Classifier.input_shape",
                                        "py_doc": "Get input shape, if have multiple input, only return first input shape\n\nReturns: input shape, list type\n"
                                    },
                                    "args": [],
                                    "ret_type": "std::vector<int>",
                                    "static": false,
                                    "def": "std::vector<int> input_shape()",
                                    "py_def": "def input_shape(self) -> list[int]"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "Labels list",
                                        "maixpy": "maix.nn.Classifier.labels",
                                        "py_doc": "Labels list"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<string> labels"
                                },
                                "label_path": {
                                    "type": "var",
                                    "name": "label_path",
                                    "doc": {
                                        "brief": "Label file path",
                                        "maixpy": "maix.nn.Classifier.label_path",
                                        "py_doc": "Label file path"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::string label_path"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.Classifier.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.Classifier.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class Classifier"
                        },
                        "Retinaface": {
                            "type": "class",
                            "name": "Retinaface",
                            "doc": {
                                "brief": "Retinaface class",
                                "maixpy": "maix.nn.Retinaface",
                                "py_doc": "Retinaface class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "Retinaface",
                                    "doc": {
                                        "brief": "Constructor of Retinaface class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.Retinaface.__init__",
                                        "maixcdk": "maix.nn.Retinaface.Retinaface",
                                        "py_doc": "Constructor of Retinaface class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "Retinaface(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.Retinaface.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.4.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.Retinaface.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.4.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n\n\nReturns: Object list. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.4"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "std::vector<nn::Object>*",
                                    "static": false,
                                    "def": "std::vector<nn::Object> *detect(image::Image &img, float conf_th = 0.4, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN)",
                                    "py_def": "def detect(self, img: maix.image.Image, conf_th: float = 0.4, iou_th: float = 0.45, fit: maix.image.Fit = ...) -> list[Object]"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.Retinaface.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.Retinaface.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.Retinaface.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.Retinaface.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.Retinaface.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.Retinaface.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class Retinaface"
                        },
                        "F": {
                            "type": "module",
                            "doc": {
                                "brief": "maix.nn.F module"
                            },
                            "members": {
                                "softmax": {
                                    "type": "func",
                                    "name": "softmax",
                                    "doc": {
                                        "brief": "Softmax, only support 1D tensor, multi-dimension tensor will be treated as 1D tensor",
                                        "param": {
                                            "tensor": "input tensor",
                                            "replace": "change input tensor data directly, if not, will create a new tensor"
                                        },
                                        "throw": "If arg error, will raise err.Exception error",
                                        "return": "output tensor, if arg replace is true, return the arg tensor's address.\nIf not replace, return a new object, so In C++, you should delete it manually in this case!",
                                        "maixpy": "maix.nn.F.softmax",
                                        "py_doc": "Softmax, only support 1D tensor, multi-dimension tensor will be treated as 1D tensor\n\nArgs:\n  - tensor: input tensor\n  - replace: change input tensor data directly, if not, will create a new tensor\n\n\nReturns: output tensor, if arg replace is true, return the arg tensor's address.\nIf not replace, return a new object, so In C++, you should delete it manually in this case!\n"
                                    },
                                    "args": [
                                        [
                                            "tensor::Tensor *",
                                            "tensor",
                                            null
                                        ],
                                        [
                                            "bool",
                                            "replace",
                                            null
                                        ]
                                    ],
                                    "ret_type": "tensor::Tensor*",
                                    "static": false,
                                    "def": "tensor::Tensor *softmax(tensor::Tensor *tensor, bool replace)",
                                    "py_def": "def softmax(tensor: maix.tensor.Tensor, replace: bool) -> maix.tensor.Tensor"
                                }
                            },
                            "auto_add": true
                        },
                        "FaceDetector": {
                            "type": "class",
                            "name": "FaceDetector",
                            "doc": {
                                "brief": "FaceDetector class",
                                "maixpy": "maix.nn.FaceDetector",
                                "py_doc": "FaceDetector class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "FaceDetector",
                                    "doc": {
                                        "brief": "Constructor of FaceDetector class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function.",
                                            "dual_buff": "direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.FaceDetector.__init__",
                                        "maixcdk": "maix.nn.FaceDetector.FaceDetector",
                                        "py_doc": "Constructor of FaceDetector class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n  - dual_buff: direction [in], prepare dual input output buffer to accelarate forward, that is, when NPU is forwarding we not wait and prepare the next input buff.\nIf you want to ensure every time forward output the input's result, set this arg to false please.\nDefault true to ensure speed.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ],
                                        [
                                            "bool",
                                            "dual_buff",
                                            "true"
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "FaceDetector(const string &model = \"\", bool dual_buff = true)",
                                    "py_def": "def __init__(self, model: str = '', dual_buff: bool = True) -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.FaceDetector.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "conf_th": "Confidence threshold, default 0.5.",
                                            "iou_th": "IoU threshold, default 0.45.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN."
                                        },
                                        "throw": "If image format not match model input format, will throw err::Exception.",
                                        "return": "Object list. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.FaceDetector.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - conf_th: Confidence threshold, default 0.5.\n  - iou_th: IoU threshold, default 0.45.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n\n\nReturns: Object list. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "conf_th",
                                            "0.5"
                                        ],
                                        [
                                            "float",
                                            "iou_th",
                                            "0.45"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ]
                                    ],
                                    "ret_type": "std::vector<nn::Object>*",
                                    "static": false,
                                    "def": "std::vector<nn::Object> *detect(image::Image &img, float conf_th = 0.5, float iou_th = 0.45, maix::image::Fit fit = maix::image::FIT_CONTAIN)",
                                    "py_def": "def detect(self, img: maix.image.Image, conf_th: float = 0.5, iou_th: float = 0.45, fit: maix.image.Fit = ...) -> list[Object]"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.FaceDetector.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.FaceDetector.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.FaceDetector.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.FaceDetector.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.FaceDetector.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.FaceDetector.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                }
                            },
                            "def": "class FaceDetector"
                        },
                        "PP_OCR": {
                            "type": "class",
                            "name": "PP_OCR",
                            "doc": {
                                "brief": "PP_OCR class",
                                "maixpy": "maix.nn.PP_OCR",
                                "py_doc": "PP_OCR class"
                            },
                            "members": {
                                "__init__": {
                                    "type": "func",
                                    "name": "PP_OCR",
                                    "doc": {
                                        "brief": "Constructor of PP_OCR class",
                                        "param": {
                                            "model": "model path, default empty, you can load model later by load function."
                                        },
                                        "throw": "If model arg is not empty and load failed, will throw err::Exception.",
                                        "maixpy": "maix.nn.PP_OCR.__init__",
                                        "maixcdk": "maix.nn.PP_OCR.PP_OCR",
                                        "py_doc": "Constructor of PP_OCR class\n\nArgs:\n  - model: model path, default empty, you can load model later by load function.\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            "\"\""
                                        ]
                                    ],
                                    "ret_type": null,
                                    "static": false,
                                    "def": "PP_OCR(const string &model = \"\")",
                                    "py_def": "def __init__(self, model: str = '') -> None"
                                },
                                "load": {
                                    "type": "func",
                                    "name": "load",
                                    "doc": {
                                        "brief": "Load model from file",
                                        "param": {
                                            "model": "Model path want to load"
                                        },
                                        "return": "err::Err",
                                        "maixpy": "maix.nn.PP_OCR.load",
                                        "py_doc": "Load model from file\n\nArgs:\n  - model: Model path want to load\n\n\nReturns: err::Err\n"
                                    },
                                    "args": [
                                        [
                                            "const string &",
                                            "model",
                                            null
                                        ]
                                    ],
                                    "ret_type": "err::Err",
                                    "static": false,
                                    "def": "err::Err load(const string &model)",
                                    "py_def": "def load(self, model: str) -> maix.err.Err"
                                },
                                "detect": {
                                    "type": "func",
                                    "name": "detect",
                                    "doc": {
                                        "brief": "Detect objects from image",
                                        "param": {
                                            "img": "Image want to detect, if image's size not match model input's, will auto resize with fit method.",
                                            "thresh": "Confidence threshold where pixels have charactor, default 0.3.",
                                            "box_thresh": "Box threshold, the box prob higher than this value will be valid, default 0.6.",
                                            "fit": "Resize method, default image.Fit.FIT_CONTAIN.",
                                            "char_box": "Calculate every charactor's box, default false, if true then you can get charactor's box by nn.OCR_Object's char_boxes attribute."
                                        },
                                        "throw": "If image format not match model input format or no memory, will throw err::Exception.",
                                        "return": "nn.OCR_Objects type. In C++, you should delete it after use.",
                                        "maixpy": "maix.nn.PP_OCR.detect",
                                        "py_doc": "Detect objects from image\n\nArgs:\n  - img: Image want to detect, if image's size not match model input's, will auto resize with fit method.\n  - thresh: Confidence threshold where pixels have charactor, default 0.3.\n  - box_thresh: Box threshold, the box prob higher than this value will be valid, default 0.6.\n  - fit: Resize method, default image.Fit.FIT_CONTAIN.\n  - char_box: Calculate every charactor's box, default false, if true then you can get charactor's box by nn.OCR_Object's char_boxes attribute.\n\n\nReturns: nn.OCR_Objects type. In C++, you should delete it after use.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "float",
                                            "thresh",
                                            "0.3"
                                        ],
                                        [
                                            "float",
                                            "box_thresh",
                                            "0.6"
                                        ],
                                        [
                                            "maix::image::Fit",
                                            "fit",
                                            "maix::image::FIT_CONTAIN"
                                        ],
                                        [
                                            "bool",
                                            "char_box",
                                            "false"
                                        ]
                                    ],
                                    "ret_type": "nn::OCR_Objects*",
                                    "static": false,
                                    "def": "nn::OCR_Objects *detect(image::Image &img, float thresh = 0.3, float box_thresh = 0.6, maix::image::Fit fit = maix::image::FIT_CONTAIN, bool char_box = false)",
                                    "py_def": "def detect(self, img: maix.image.Image, thresh: float = 0.3, box_thresh: float = 0.6, fit: maix.image.Fit = ..., char_box: bool = False) -> OCR_Objects"
                                },
                                "recognize": {
                                    "type": "func",
                                    "name": "recognize",
                                    "doc": {
                                        "brief": "Only recognize, not detect",
                                        "param": {
                                            "img": "image to recognize chractors, can be a stanrd cropped charactors image,\nif crop image not standard, you can use box_points to assgin where the charactors' 4 corner is.",
                                            "box_points": "list type, length must be 8 or 0, default empty means not transfer image to standard image.\n4 points postiion, format: [x1, y1, x2, y2, x3, y3, x4, y4], point 1 at the left-top, point 2 right-top...",
                                            "char_box": "Calculate every charactor's box, default false, if true then you can get charactor's box by nn.OCR_Object's char_boxes attribute."
                                        },
                                        "maixpy": "maix.nn.PP_OCR.recognize",
                                        "py_doc": "Only recognize, not detect\n\nArgs:\n  - img: image to recognize chractors, can be a stanrd cropped charactors image,\nif crop image not standard, you can use box_points to assgin where the charactors' 4 corner is.\n  - box_points: list type, length must be 8 or 0, default empty means not transfer image to standard image.\n4 points postiion, format: [x1, y1, x2, y2, x3, y3, x4, y4], point 1 at the left-top, point 2 right-top...\n  - char_box: Calculate every charactor's box, default false, if true then you can get charactor's box by nn.OCR_Object's char_boxes attribute.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "const std::vector<int> &",
                                            "box_points",
                                            "std::vector<int>()"
                                        ]
                                    ],
                                    "ret_type": "nn::OCR_Object*",
                                    "static": false,
                                    "def": "nn::OCR_Object *recognize(image::Image &img, const std::vector<int> &box_points = std::vector<int>())",
                                    "py_def": "def recognize(self, img: maix.image.Image, box_points: list[int] = []) -> OCR_Object"
                                },
                                "draw_seg_mask": {
                                    "type": "func",
                                    "name": "draw_seg_mask",
                                    "doc": {
                                        "brief": "Draw segmentation on image",
                                        "param": {
                                            "img": "image object, maix.image.Image type.",
                                            "seg_mask": "segmentation mask image by detect method, a grayscale image",
                                            "threshold": "only mask's value > threshold will be draw on image, value from 0 to 255."
                                        },
                                        "maixpy": "maix.nn.PP_OCR.draw_seg_mask",
                                        "py_doc": "Draw segmentation on image\n\nArgs:\n  - img: image object, maix.image.Image type.\n  - seg_mask: segmentation mask image by detect method, a grayscale image\n  - threshold: only mask's value > threshold will be draw on image, value from 0 to 255.\n"
                                    },
                                    "args": [
                                        [
                                            "image::Image &",
                                            "img",
                                            null
                                        ],
                                        [
                                            "int",
                                            "x",
                                            null
                                        ],
                                        [
                                            "int",
                                            "y",
                                            null
                                        ],
                                        [
                                            "image::Image &",
                                            "seg_mask",
                                            null
                                        ],
                                        [
                                            "int",
                                            "threshold",
                                            "127"
                                        ]
                                    ],
                                    "ret_type": "void",
                                    "static": false,
                                    "def": "void draw_seg_mask(image::Image &img, int x, int y, image::Image &seg_mask, int threshold = 127)",
                                    "py_def": "def draw_seg_mask(self, img: maix.image.Image, x: int, y: int, seg_mask: maix.image.Image, threshold: int = 127) -> None"
                                },
                                "input_size": {
                                    "type": "func",
                                    "name": "input_size",
                                    "doc": {
                                        "brief": "Get model input size",
                                        "return": "model input size",
                                        "maixpy": "maix.nn.PP_OCR.input_size",
                                        "py_doc": "Get model input size\n\nReturns: model input size\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Size",
                                    "static": false,
                                    "def": "image::Size input_size()",
                                    "py_def": "def input_size(self) -> maix.image.Size"
                                },
                                "input_width": {
                                    "type": "func",
                                    "name": "input_width",
                                    "doc": {
                                        "brief": "Get model input width",
                                        "return": "model input size of width",
                                        "maixpy": "maix.nn.PP_OCR.input_width",
                                        "py_doc": "Get model input width\n\nReturns: model input size of width\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_width()",
                                    "py_def": "def input_width(self) -> int"
                                },
                                "input_height": {
                                    "type": "func",
                                    "name": "input_height",
                                    "doc": {
                                        "brief": "Get model input height",
                                        "return": "model input size of height",
                                        "maixpy": "maix.nn.PP_OCR.input_height",
                                        "py_doc": "Get model input height\n\nReturns: model input size of height\n"
                                    },
                                    "args": [],
                                    "ret_type": "int",
                                    "static": false,
                                    "def": "int input_height()",
                                    "py_def": "def input_height(self) -> int"
                                },
                                "input_format": {
                                    "type": "func",
                                    "name": "input_format",
                                    "doc": {
                                        "brief": "Get input image format",
                                        "return": "input image format, image::Format type.",
                                        "maixpy": "maix.nn.PP_OCR.input_format",
                                        "py_doc": "Get input image format\n\nReturns: input image format, image::Format type.\n"
                                    },
                                    "args": [],
                                    "ret_type": "image::Format",
                                    "static": false,
                                    "def": "image::Format input_format()",
                                    "py_def": "def input_format(self) -> maix.image.Format"
                                },
                                "mean": {
                                    "type": "var",
                                    "name": "mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.PP_OCR.mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> mean"
                                },
                                "scale": {
                                    "type": "var",
                                    "name": "scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.PP_OCR.scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> scale"
                                },
                                "rec_mean": {
                                    "type": "var",
                                    "name": "rec_mean",
                                    "doc": {
                                        "brief": "Get mean value, list type",
                                        "maixpy": "maix.nn.PP_OCR.rec_mean",
                                        "py_doc": "Get mean value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> rec_mean"
                                },
                                "rec_scale": {
                                    "type": "var",
                                    "name": "rec_scale",
                                    "doc": {
                                        "brief": "Get scale value, list type",
                                        "maixpy": "maix.nn.PP_OCR.rec_scale",
                                        "py_doc": "Get scale value, list type"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<float> rec_scale"
                                },
                                "labels": {
                                    "type": "var",
                                    "name": "labels",
                                    "doc": {
                                        "brief": "labels (charactors)",
                                        "maixpy": "maix.nn.PP_OCR.labels",
                                        "py_doc": "labels (charactors)"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "std::vector<std::string> labels"
                                },
                                "det": {
                                    "type": "var",
                                    "name": "det",
                                    "doc": {
                                        "brief": "model have detect model",
                                        "maixpy": "maix.nn.PP_OCR.det",
                                        "py_doc": "model have detect model"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool det"
                                },
                                "rec": {
                                    "type": "var",
                                    "name": "rec",
                                    "doc": {
                                        "brief": "model have recognize model",
                                        "maixpy": "maix.nn.PP_OCR.rec",
                                        "py_doc": "model have recognize model"
                                    },
                                    "value": null,
                                    "static": false,
                                    "readonly": false,
                                    "def": "bool rec"
                                }
                            },
                            "def": "class PP_OCR"
                        }
                    },
                    "auto_add": true
                }
            }
        }
    }
}